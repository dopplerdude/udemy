
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007008  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f0  080073f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073f8  080073f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e8c  20000080  0800747c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20012f0c  0800747c  00022f0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012300  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e82  00000000  00000000  000323ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00035230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00036358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a99  00000000  00000000  00037328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001395b  00000000  00000000  00050dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a283a  00000000  00000000  0006471c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106f56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000522c  00000000  00000000  00106fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0010c1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0010c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007190 	.word	0x08007190

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08007190 	.word	0x08007190

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fddd 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f887 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f94b 	bl	800082c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000596:	f000 f8ed 	bl	8000774 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate( task1_ADC_handler,
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	2303      	movs	r3, #3
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	4b35      	ldr	r3, [pc, #212]	; (800067c <main+0xf8>)
 80005a6:	22c8      	movs	r2, #200	; 0xc8
 80005a8:	4935      	ldr	r1, [pc, #212]	; (8000680 <main+0xfc>)
 80005aa:	4836      	ldr	r0, [pc, #216]	; (8000684 <main+0x100>)
 80005ac:	f003 fb2a 	bl	8003c04 <xTaskCreate>
 80005b0:	61f8      	str	r0, [r7, #28]
                          "Task-1",
                          200,
                          "This is ADC count handler task",
                          3,
                          &task1_handle);
  configASSERT(status == pdPASS);
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d00a      	beq.n	80005ce <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005bc:	f383 8811 	msr	BASEPRI, r3
 80005c0:	f3bf 8f6f 	isb	sy
 80005c4:	f3bf 8f4f 	dsb	sy
 80005c8:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ca:	bf00      	nop
 80005cc:	e7fe      	b.n	80005cc <main+0x48>


  status = xTaskCreate( task2_publisher,
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2302      	movs	r3, #2
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	22fa      	movs	r2, #250	; 0xfa
 80005dc:	492a      	ldr	r1, [pc, #168]	; (8000688 <main+0x104>)
 80005de:	482b      	ldr	r0, [pc, #172]	; (800068c <main+0x108>)
 80005e0:	f003 fb10 	bl	8003c04 <xTaskCreate>
 80005e4:	61f8      	str	r0, [r7, #28]
                          "Publisher Task",
                          250,
						  NULL,
                          2,
                          &task2_publisher_handle);
  configASSERT(status == pdPASS);
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00a      	beq.n	8000602 <main+0x7e>
        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	617b      	str	r3, [r7, #20]
    }
 80005fe:	bf00      	nop
 8000600:	e7fe      	b.n	8000600 <main+0x7c>

  status = xTaskCreate( task3_consumer,
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	22fa      	movs	r2, #250	; 0xfa
 800060e:	4920      	ldr	r1, [pc, #128]	; (8000690 <main+0x10c>)
 8000610:	4820      	ldr	r0, [pc, #128]	; (8000694 <main+0x110>)
 8000612:	f003 faf7 	bl	8003c04 <xTaskCreate>
 8000616:	61f8      	str	r0, [r7, #28]
                          "Consumer Task",
                          250,
						  NULL,
                          2,
                          &task3_consumer_handle);
  configASSERT(status == pdPASS);
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d00a      	beq.n	8000634 <main+0xb0>
        __asm volatile
 800061e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000622:	f383 8811 	msr	BASEPRI, r3
 8000626:	f3bf 8f6f 	isb	sy
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	613b      	str	r3, [r7, #16]
    }
 8000630:	bf00      	nop
 8000632:	e7fe      	b.n	8000632 <main+0xae>

  srand(time(0));
 8000634:	2000      	movs	r0, #0
 8000636:	f005 fe67 	bl	8006308 <time>
 800063a:	4602      	mov	r2, r0
 800063c:	460b      	mov	r3, r1
 800063e:	4613      	mov	r3, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f005 fdd1 	bl	80061e8 <srand>
  xBinarySemaphore = xSemaphoreCreateBinary();
 8000646:	2203      	movs	r2, #3
 8000648:	2100      	movs	r1, #0
 800064a:	2001      	movs	r0, #1
 800064c:	f002 fd0a 	bl	8003064 <xQueueGenericCreate>
 8000650:	4603      	mov	r3, r0
 8000652:	4a11      	ldr	r2, [pc, #68]	; (8000698 <main+0x114>)
 8000654:	6013      	str	r3, [r2, #0]
  if(xBinarySemaphore != NULL)
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <main+0x114>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d009      	beq.n	8000672 <main+0xee>
  {
	  xSemaphoreGive(xBinarySemaphore);
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <main+0x114>)
 8000660:	6818      	ldr	r0, [r3, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	f002 fd9c 	bl	80031a4 <xQueueGenericSend>
  {
	  printf("Error creating Binary semaphore\n");
	  while(1){};
  }
  // start the FreeRTOS scheduler
  vTaskStartScheduler();
 800066c:	f003 fc46 	bl	8003efc <vTaskStartScheduler>
 8000670:	e003      	b.n	800067a <main+0xf6>
	  printf("Error creating Binary semaphore\n");
 8000672:	480a      	ldr	r0, [pc, #40]	; (800069c <main+0x118>)
 8000674:	f005 fdb0 	bl	80061d8 <puts>
	  while(1){};
 8000678:	e7fe      	b.n	8000678 <main+0xf4>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067a:	e7fe      	b.n	800067a <main+0xf6>
 800067c:	080071a8 	.word	0x080071a8
 8000680:	080071c8 	.word	0x080071c8
 8000684:	08000ae9 	.word	0x08000ae9
 8000688:	080071d0 	.word	0x080071d0
 800068c:	08000b31 	.word	0x08000b31
 8000690:	080071e0 	.word	0x080071e0
 8000694:	08000bf9 	.word	0x08000bf9
 8000698:	200000f0 	.word	0x200000f0
 800069c:	080071f0 	.word	0x080071f0

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 fc24 	bl	8005efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b28      	ldr	r3, [pc, #160]	; (800076c <SystemClock_Config+0xcc>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a27      	ldr	r2, [pc, #156]	; (800076c <SystemClock_Config+0xcc>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <SystemClock_Config+0xcc>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b22      	ldr	r3, [pc, #136]	; (8000770 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a21      	ldr	r2, [pc, #132]	; (8000770 <SystemClock_Config+0xd0>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <SystemClock_Config+0xd0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000714:	23c0      	movs	r3, #192	; 0xc0
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000718:	2304      	movs	r3, #4
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800071c:	2308      	movs	r3, #8
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fc47 	bl	8001fb8 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 fabc 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2103      	movs	r1, #3
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fea8 	bl	80024a8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075e:	f000 faa5 	bl	8000cac <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_ADC1_Init+0xa8>)
 8000788:	4a25      	ldr	r2, [pc, #148]	; (8000820 <MX_ADC1_Init+0xac>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800078c:	4b23      	ldr	r3, [pc, #140]	; (800081c <MX_ADC1_Init+0xa8>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0xa8>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_ADC1_Init+0xa8>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_ADC1_Init+0xa8>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_ADC1_Init+0xa8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_ADC1_Init+0xa8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_ADC1_Init+0xa8>)
 80007b4:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <MX_ADC1_Init+0xb0>)
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_ADC1_Init+0xa8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_ADC1_Init+0xa8>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_ADC1_Init+0xa8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007cc:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_ADC1_Init+0xa8>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_ADC1_Init+0xa8>)
 80007d4:	f000 fcfa 	bl	80011cc <HAL_ADC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 fa65 	bl	8000cac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_ADC1_Init+0xb4>)
 80007e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ee:	463b      	mov	r3, r7
 80007f0:	4619      	mov	r1, r3
 80007f2:	480a      	ldr	r0, [pc, #40]	; (800081c <MX_ADC1_Init+0xa8>)
 80007f4:	f000 ff28 	bl	8001648 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007fe:	f000 fa55 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8000802:	4806      	ldr	r0, [pc, #24]	; (800081c <MX_ADC1_Init+0xa8>)
 8000804:	f000 fd26 	bl	8001254 <HAL_ADC_Start_IT>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_ADC1_Init+0x9e>
  {
	  Error_Handler();
 800080e:	f000 fa4d 	bl	8000cac <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	2000009c 	.word	0x2000009c
 8000820:	40012000 	.word	0x40012000
 8000824:	0f000001 	.word	0x0f000001
 8000828:	10000012 	.word	0x10000012

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	4ba2      	ldr	r3, [pc, #648]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4aa1      	ldr	r2, [pc, #644]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b9f      	ldr	r3, [pc, #636]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	4b9b      	ldr	r3, [pc, #620]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a9a      	ldr	r2, [pc, #616]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b98      	ldr	r3, [pc, #608]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b94      	ldr	r3, [pc, #592]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a93      	ldr	r2, [pc, #588]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b91      	ldr	r3, [pc, #580]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b8d      	ldr	r3, [pc, #564]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a8c      	ldr	r2, [pc, #560]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b8a      	ldr	r3, [pc, #552]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b86      	ldr	r3, [pc, #536]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a85      	ldr	r2, [pc, #532]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b83      	ldr	r3, [pc, #524]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b7f      	ldr	r3, [pc, #508]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a7e      	ldr	r2, [pc, #504]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b7c      	ldr	r3, [pc, #496]	; (8000ad0 <MX_GPIO_Init+0x2a4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	4879      	ldr	r0, [pc, #484]	; (8000ad4 <MX_GPIO_Init+0x2a8>)
 80008f0:	f001 fb48 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	4877      	ldr	r0, [pc, #476]	; (8000ad8 <MX_GPIO_Init+0x2ac>)
 80008fa:	f001 fb43 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fe:	2200      	movs	r2, #0
 8000900:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000904:	4875      	ldr	r0, [pc, #468]	; (8000adc <MX_GPIO_Init+0x2b0>)
 8000906:	f001 fb3d 	bl	8001f84 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800090a:	2304      	movs	r3, #4
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	486d      	ldr	r0, [pc, #436]	; (8000ad4 <MX_GPIO_Init+0x2a8>)
 800091e:	f001 f9ad 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000922:	2308      	movs	r3, #8
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4866      	ldr	r0, [pc, #408]	; (8000ad4 <MX_GPIO_Init+0x2a8>)
 800093a:	f001 f99f 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 800093e:	2332      	movs	r3, #50	; 0x32
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000942:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4860      	ldr	r0, [pc, #384]	; (8000ad4 <MX_GPIO_Init+0x2a8>)
 8000954:	f001 f992 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000958:	2301      	movs	r3, #1
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	485a      	ldr	r0, [pc, #360]	; (8000ad8 <MX_GPIO_Init+0x2ac>)
 8000970:	f001 f984 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000974:	2308      	movs	r3, #8
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000984:	2305      	movs	r3, #5
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4852      	ldr	r0, [pc, #328]	; (8000ad8 <MX_GPIO_Init+0x2ac>)
 8000990:	f001 f974 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000994:	2301      	movs	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000998:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	484d      	ldr	r0, [pc, #308]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 80009aa:	f001 f967 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009ae:	2310      	movs	r3, #16
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009be:	2306      	movs	r3, #6
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4845      	ldr	r0, [pc, #276]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 80009ca:	f001 f957 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009ce:	23e0      	movs	r3, #224	; 0xe0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009de:	2305      	movs	r3, #5
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	483d      	ldr	r0, [pc, #244]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 80009ea:	f001 f947 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a00:	2305      	movs	r3, #5
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4836      	ldr	r0, [pc, #216]	; (8000ae4 <MX_GPIO_Init+0x2b8>)
 8000a0c:	f001 f936 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a10:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a14:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	482c      	ldr	r0, [pc, #176]	; (8000adc <MX_GPIO_Init+0x2b0>)
 8000a2a:	f001 f927 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a2e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a40:	2306      	movs	r3, #6
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4823      	ldr	r0, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0x2ac>)
 8000a4c:	f001 f916 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 8000a66:	f001 f909 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	4816      	ldr	r0, [pc, #88]	; (8000ae0 <MX_GPIO_Init+0x2b4>)
 8000a88:	f001 f8f8 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480f      	ldr	r0, [pc, #60]	; (8000adc <MX_GPIO_Init+0x2b0>)
 8000aa0:	f001 f8ec 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aa4:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aaa:	2312      	movs	r3, #18
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_GPIO_Init+0x2b8>)
 8000ac2:	f001 f8db 	bl	8001c7c <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	; 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <task1_ADC_handler>:

/* USER CODE BEGIN 4 */
static void task1_ADC_handler(void* parameters)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	xSemaphore = xSemaphoreCreateBinary();
 8000af0:	2203      	movs	r2, #3
 8000af2:	2100      	movs	r1, #0
 8000af4:	2001      	movs	r0, #1
 8000af6:	f002 fab5 	bl	8003064 <xQueueGenericCreate>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <task1_ADC_handler+0x3c>)
 8000afe:	6013      	str	r3, [r2, #0]
	//xSemaphoreGive(xSemaphore);
	printf("Initial ADC value : %lu\n", adc_count);
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <task1_ADC_handler+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4619      	mov	r1, r3
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <task1_ADC_handler+0x44>)
 8000b08:	f005 fae0 	bl	80060cc <iprintf>
	while(1)
	{
		if(xSemaphore != NULL)
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <task1_ADC_handler+0x3c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0fb      	beq.n	8000b0c <task1_ADC_handler+0x24>
		{
			if(xSemaphoreTake( xSemaphore, LONG_TIME))
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <task1_ADC_handler+0x3c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 fdbb 	bl	8003698 <xQueueSemaphoreTake>
		if(xSemaphore != NULL)
 8000b22:	e7f3      	b.n	8000b0c <task1_ADC_handler+0x24>
 8000b24:	200000e8 	.word	0x200000e8
 8000b28:	200000e4 	.word	0x200000e4
 8000b2c:	08007210 	.word	0x08007210

08000b30 <task2_publisher>:
		}
	}
}

static void task2_publisher(void* parameters)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	(void*)parameters;
	#define queue_len 5
	my_queue = create_my_queue(queue_len);
 8000b38:	2005      	movs	r0, #5
 8000b3a:	f005 f8b5 	bl	8005ca8 <create_my_queue>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	4a27      	ldr	r2, [pc, #156]	; (8000be0 <task2_publisher+0xb0>)
 8000b42:	6013      	str	r3, [r2, #0]
	xCountingSemaphore = xSemaphoreCreateCounting( queue_len, 0 );
 8000b44:	2100      	movs	r1, #0
 8000b46:	2005      	movs	r0, #5
 8000b48:	f002 fafd 	bl	8003146 <xQueueCreateCountingSemaphore>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a25      	ldr	r2, [pc, #148]	; (8000be4 <task2_publisher+0xb4>)
 8000b50:	6013      	str	r3, [r2, #0]
	assert(xCountingSemaphore != NULL);
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <task2_publisher+0xb4>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d100      	bne.n	8000b5c <task2_publisher+0x2c>
 8000b5a:	e7fe      	b.n	8000b5a <task2_publisher+0x2a>
	assert(my_queue != NULL);
 8000b5c:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <task2_publisher+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d100      	bne.n	8000b66 <task2_publisher+0x36>
 8000b64:	e7fe      	b.n	8000b64 <task2_publisher+0x34>
	int temp;
	status_t status;
	while(1)
	{
		temp = rand() % 50;
 8000b66:	f005 fb6d 	bl	8006244 <rand>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <task2_publisher+0xb8>)
 8000b6e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b72:	1119      	asrs	r1, r3, #4
 8000b74:	17d3      	asrs	r3, r2, #31
 8000b76:	1acb      	subs	r3, r1, r3
 8000b78:	2132      	movs	r1, #50	; 0x32
 8000b7a:	fb01 f303 	mul.w	r3, r1, r3
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	60bb      	str	r3, [r7, #8]
		xSemaphoreTake( xBinarySemaphore, LONG_TIME);
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <task2_publisher+0xbc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fd84 	bl	8003698 <xQueueSemaphoreTake>
		status = my_queue_push(my_queue, &temp, sizeof(int));
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <task2_publisher+0xb0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f107 0108 	add.w	r1, r7, #8
 8000b98:	2204      	movs	r2, #4
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 f8bf 	bl	8005d1e <my_queue_push>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	73fb      	strb	r3, [r7, #15]

		if(status != QUEUE_SUCCESS)
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d005      	beq.n	8000bb6 <task2_publisher+0x86>
		{
			printf("Push error : %d\n", status);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <task2_publisher+0xc0>)
 8000bb0:	f005 fa8c 	bl	80060cc <iprintf>
 8000bb4:	e004      	b.n	8000bc0 <task2_publisher+0x90>
		}
		else
		{
			printf("Push success : %d\n", temp);
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <task2_publisher+0xc4>)
 8000bbc:	f005 fa86 	bl	80060cc <iprintf>
		}
		xSemaphoreGive( xBinarySemaphore);
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <task2_publisher+0xbc>)
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f002 faeb 	bl	80031a4 <xQueueGenericSend>
		xSemaphoreGive( xCountingSemaphore);
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <task2_publisher+0xb4>)
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f002 fae4 	bl	80031a4 <xQueueGenericSend>
		temp = rand() % 50;
 8000bdc:	e7c3      	b.n	8000b66 <task2_publisher+0x36>
 8000bde:	bf00      	nop
 8000be0:	200000f4 	.word	0x200000f4
 8000be4:	200000ec 	.word	0x200000ec
 8000be8:	51eb851f 	.word	0x51eb851f
 8000bec:	200000f0 	.word	0x200000f0
 8000bf0:	0800722c 	.word	0x0800722c
 8000bf4:	08007240 	.word	0x08007240

08000bf8 <task3_consumer>:
	}
}

static void task3_consumer(void* parameters)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	(void*)parameters;
	int temp;
	status_t status;
	while(my_queue == NULL) {};
 8000c00:	bf00      	nop
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <task3_consumer+0x7c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0fb      	beq.n	8000c02 <task3_consumer+0xa>
	while(1)
	{
		if(xCountingSemaphore != NULL)
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <task3_consumer+0x80>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0fb      	beq.n	8000c0a <task3_consumer+0x12>
		{
			if(xSemaphoreTake( xCountingSemaphore, portMAX_DELAY ))
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <task3_consumer+0x80>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fd3c 	bl	8003698 <xQueueSemaphoreTake>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f1      	beq.n	8000c0a <task3_consumer+0x12>
			{
				xSemaphoreTake( xBinarySemaphore, portMAX_DELAY);
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <task3_consumer+0x84>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 fd32 	bl	8003698 <xQueueSemaphoreTake>
				status = my_queue_pop(my_queue, &temp, sizeof(int));
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <task3_consumer+0x7c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f107 0108 	add.w	r1, r7, #8
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f005 f8b7 	bl	8005db2 <my_queue_pop>
 8000c44:	4603      	mov	r3, r0
 8000c46:	73fb      	strb	r3, [r7, #15]

				if(status != QUEUE_SUCCESS)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d005      	beq.n	8000c5a <task3_consumer+0x62>
				{
					printf("Pop error : %d\n", status);
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	4619      	mov	r1, r3
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <task3_consumer+0x88>)
 8000c54:	f005 fa3a 	bl	80060cc <iprintf>
 8000c58:	e004      	b.n	8000c64 <task3_consumer+0x6c>
				}
				else
				{
					printf("Pop success : %d\n", temp);
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4809      	ldr	r0, [pc, #36]	; (8000c84 <task3_consumer+0x8c>)
 8000c60:	f005 fa34 	bl	80060cc <iprintf>
				}
				xSemaphoreGive( xBinarySemaphore);
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <task3_consumer+0x84>)
 8000c66:	6818      	ldr	r0, [r3, #0]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f002 fa99 	bl	80031a4 <xQueueGenericSend>
		if(xCountingSemaphore != NULL)
 8000c72:	e7ca      	b.n	8000c0a <task3_consumer+0x12>
 8000c74:	200000f4 	.word	0x200000f4
 8000c78:	200000ec 	.word	0x200000ec
 8000c7c:	200000f0 	.word	0x200000f0
 8000c80:	08007254 	.word	0x08007254
 8000c84:	08007264 	.word	0x08007264

08000c88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d101      	bne.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c9a:	f000 fa77 	bl	800118c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40000c00 	.word	0x40000c00

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <Error_Handler+0x8>
	...

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_MspInit+0x4c>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_ADC_MspInit+0x48>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d115      	bne.n	8000d46 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_ADC_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <HAL_ADC_MspInit+0x4c>)
 8000d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_ADC_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 9, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2109      	movs	r1, #9
 8000d3a:	2012      	movs	r0, #18
 8000d3c:	f000 ff74 	bl	8001c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d40:	2012      	movs	r0, #18
 8000d42:	f000 ff8d 	bl	8001c60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40012000 	.word	0x40012000
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b33      	ldr	r3, [pc, #204]	; (8000e3c <HAL_InitTick+0xe4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a32      	ldr	r2, [pc, #200]	; (8000e3c <HAL_InitTick+0xe4>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HAL_InitTick+0xe4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d84:	f107 0210 	add.w	r2, r7, #16
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fd96 	bl	80028c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d9e:	f001 fd7b 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8000da2:	6378      	str	r0, [r7, #52]	; 0x34
 8000da4:	e004      	b.n	8000db0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000da6:	f001 fd77 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8000daa:	4603      	mov	r3, r0
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db2:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <HAL_InitTick+0xe8>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	0c9b      	lsrs	r3, r3, #18
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_InitTick+0xec>)
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <HAL_InitTick+0xf0>)
 8000dc2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_InitTick+0xec>)
 8000dc6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dca:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_InitTick+0xec>)
 8000dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_InitTick+0xec>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_InitTick+0xec>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <HAL_InitTick+0xec>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000de4:	4817      	ldr	r0, [pc, #92]	; (8000e44 <HAL_InitTick+0xec>)
 8000de6:	f001 fd9d 	bl	8002924 <HAL_TIM_Base_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000df0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d11b      	bne.n	8000e30 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000df8:	4812      	ldr	r0, [pc, #72]	; (8000e44 <HAL_InitTick+0xec>)
 8000dfa:	f001 fded 	bl	80029d8 <HAL_TIM_Base_Start_IT>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d111      	bne.n	8000e30 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000e0c:	2032      	movs	r0, #50	; 0x32
 8000e0e:	f000 ff27 	bl	8001c60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d808      	bhi.n	8000e2a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	2032      	movs	r0, #50	; 0x32
 8000e1e:	f000 ff03 	bl	8001c28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_InitTick+0xf4>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	e002      	b.n	8000e30 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3738      	adds	r7, #56	; 0x38
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	431bde83 	.word	0x431bde83
 8000e44:	200000f8 	.word	0x200000f8
 8000e48:	40000c00 	.word	0x40000c00
 8000e4c:	20000008 	.word	0x20000008

08000e50 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	609a      	str	r2, [r3, #8]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000e9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ea2:	4824      	ldr	r0, [pc, #144]	; (8000f34 <ADC_IRQHandler+0x98>)
 8000ea4:	f000 fa94 	bl	80013d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */
  static uint64_t sum = 0;
  static int i = 1;
  static long xHigherPriorityTaskWoken = pdFALSE;
  sum += HAL_ADC_GetValue(&hadc1);
 8000ea8:	4822      	ldr	r0, [pc, #136]	; (8000f34 <ADC_IRQHandler+0x98>)
 8000eaa:	f000 fba1 	bl	80015f0 <HAL_ADC_GetValue>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	461c      	mov	r4, r3
 8000eb4:	4615      	mov	r5, r2
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <ADC_IRQHandler+0x9c>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	eb14 0802 	adds.w	r8, r4, r2
 8000ec0:	eb45 0903 	adc.w	r9, r5, r3
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <ADC_IRQHandler+0x9c>)
 8000ec6:	e9c3 8900 	strd	r8, r9, [r3]
  if(++i > 10000)
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <ADC_IRQHandler+0xa0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <ADC_IRQHandler+0xa0>)
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <ADC_IRQHandler+0xa0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000edc:	4293      	cmp	r3, r2
 8000ede:	dd20      	ble.n	8000f22 <ADC_IRQHandler+0x86>
  {
	  adc_count = sum/10000;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <ADC_IRQHandler+0x9c>)
 8000ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	f7ff f9c7 	bl	8000280 <__aeabi_uldivmod>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <ADC_IRQHandler+0xa4>)
 8000ef8:	601a      	str	r2, [r3, #0]
	  sum = 0;
 8000efa:	490f      	ldr	r1, [pc, #60]	; (8000f38 <ADC_IRQHandler+0x9c>)
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	e9c1 2300 	strd	r2, r3, [r1]
	  i = 1;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <ADC_IRQHandler+0xa0>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
	  if(xSemaphore != NULL)
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <ADC_IRQHandler+0xa8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d005      	beq.n	8000f22 <ADC_IRQHandler+0x86>
	  {
		xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken);
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <ADC_IRQHandler+0xa8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	490b      	ldr	r1, [pc, #44]	; (8000f48 <ADC_IRQHandler+0xac>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f002 fa3f 	bl	80033a0 <xQueueGiveFromISR>
	  }
  }

  LL_ADC_REG_StartConversionSWStart(hadc1.Instance);
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <ADC_IRQHandler+0x98>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff92 	bl	8000e50 <LL_ADC_REG_StartConversionSWStart>
  /* USER CODE END ADC_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f32:	bf00      	nop
 8000f34:	2000009c 	.word	0x2000009c
 8000f38:	20000140 	.word	0x20000140
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	200000e4 	.word	0x200000e4
 8000f44:	200000e8 	.word	0x200000e8
 8000f48:	20000148 	.word	0x20000148

08000f4c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <TIM5_IRQHandler+0x10>)
 8000f52:	f001 fda3 	bl	8002a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000f8 	.word	0x200000f8

08000f60 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <ITM_SendChar+0x48>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <ITM_SendChar+0x48>)
 8000f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f74:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <ITM_SendChar+0x4c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <ITM_SendChar+0x4c>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000f82:	bf00      	nop
 8000f84:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f8      	beq.n	8000f84 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000f92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	6013      	str	r3, [r2, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000edfc 	.word	0xe000edfc
 8000fac:	e0000e00 	.word	0xe0000e00

08000fb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	return 1;
 8000fb4:	2301      	movs	r3, #1
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_kill>:

int _kill(int pid, int sig)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fca:	f004 ff57 	bl	8005e7c <__errno>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2216      	movs	r2, #22
 8000fd2:	601a      	str	r2, [r3, #0]
	return -1;
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_exit>:

void _exit (int status)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffe7 	bl	8000fc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ff2:	e7fe      	b.n	8000ff2 <_exit+0x12>

08000ff4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e00a      	b.n	800101c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001006:	f3af 8000 	nop.w
 800100a:	4601      	mov	r1, r0
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	b2ca      	uxtb	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf0      	blt.n	8001006 <_read+0x12>
	}

return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e009      	b.n	8001054 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff89 	bl	8000f60 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf1      	blt.n	8001040 <_write+0x12>
	}
	return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_close>:

int _close(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108e:	605a      	str	r2, [r3, #4]
	return 0;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <_isatty>:

int _isatty(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
	return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	return 0;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010fa:	490e      	ldr	r1, [pc, #56]	; (8001134 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001110:	4c0b      	ldr	r4, [pc, #44]	; (8001140 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800111e:	f7ff ffd7 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f004 feb1 	bl	8005e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff fa2d 	bl	8000584 <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800112c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001138:	08007400 	.word	0x08007400
  ldr r2, =_sbss
 800113c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001140:	20012f0c 	.word	0x20012f0c

08001144 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <DMA1_Stream0_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_Init+0x40>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_Init+0x40>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x40>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 fd4e 	bl	8001c12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fdee 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fd9c 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x20>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x24>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_IncTick+0x24>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	2000014c 	.word	0x2000014c

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_GetTick+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	2000014c 	.word	0x2000014c

080011cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e033      	b.n	800124a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fd8c 	bl	8000d08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d118      	bne.n	800123c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001212:	f023 0302 	bic.w	r3, r3, #2
 8001216:	f043 0202 	orr.w	r2, r3, #2
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fb44 	bl	80018ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f023 0303 	bic.w	r3, r3, #3
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
 800123a:	e001      	b.n	8001240 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_ADC_Start_IT+0x1a>
 800126a:	2302      	movs	r3, #2
 800126c:	e0a1      	b.n	80013b2 <HAL_ADC_Start_IT+0x15e>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b01      	cmp	r3, #1
 8001282:	d018      	beq.n	80012b6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001294:	4b4a      	ldr	r3, [pc, #296]	; (80013c0 <HAL_ADC_Start_IT+0x16c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a4a      	ldr	r2, [pc, #296]	; (80013c4 <HAL_ADC_Start_IT+0x170>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9a      	lsrs	r2, r3, #18
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f9      	bne.n	80012aa <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d169      	bne.n	8001398 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012cc:	f023 0301 	bic.w	r3, r3, #1
 80012d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001302:	d106      	bne.n	8001312 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001308:	f023 0206 	bic.w	r2, r3, #6
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	645a      	str	r2, [r3, #68]	; 0x44
 8001310:	e002      	b.n	8001318 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2200      	movs	r2, #0
 800131c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_ADC_Start_IT+0x174>)
 8001322:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800132c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800133c:	f043 0320 	orr.w	r3, r3, #32
 8001340:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d129      	bne.n	80013b0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	e020      	b.n	80013b0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <HAL_ADC_Start_IT+0x178>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d11b      	bne.n	80013b0 <HAL_ADC_Start_IT+0x15c>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d114      	bne.n	80013b0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	e00b      	b.n	80013b0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f043 0210 	orr.w	r2, r3, #16
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	f043 0201 	orr.w	r2, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000004 	.word	0x20000004
 80013c4:	431bde83 	.word	0x431bde83
 80013c8:	40012300 	.word	0x40012300
 80013cc:	40012000 	.word	0x40012000

080013d0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d049      	beq.n	800149a <HAL_ADC_IRQHandler+0xca>
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d046      	beq.n	800149a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b00      	cmp	r3, #0
 8001416:	d105      	bne.n	8001424 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d12b      	bne.n	800148a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001436:	2b00      	cmp	r3, #0
 8001438:	d127      	bne.n	800148a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001452:	2b00      	cmp	r3, #0
 8001454:	d119      	bne.n	800148a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0220 	bic.w	r2, r2, #32
 8001464:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d105      	bne.n	800148a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f8bd 	bl	800160a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f06f 0212 	mvn.w	r2, #18
 8001498:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d057      	beq.n	8001560 <HAL_ADC_IRQHandler+0x190>
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d054      	beq.n	8001560 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d139      	bne.n	8001550 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d12b      	bne.n	8001550 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d124      	bne.n	8001550 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001510:	2b00      	cmp	r3, #0
 8001512:	d11d      	bne.n	8001550 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001518:	2b00      	cmp	r3, #0
 800151a:	d119      	bne.n	8001550 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800152a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	2b00      	cmp	r3, #0
 8001542:	d105      	bne.n	8001550 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f043 0201 	orr.w	r2, r3, #1
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 faa7 	bl	8001aa4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f06f 020c 	mvn.w	r2, #12
 800155e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d017      	beq.n	80015a6 <HAL_ADC_IRQHandler+0x1d6>
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d014      	beq.n	80015a6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d10d      	bne.n	80015a6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 f841 	bl	800161e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f06f 0201 	mvn.w	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f003 0320 	and.w	r3, r3, #32
 80015ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015b4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d015      	beq.n	80015e8 <HAL_ADC_IRQHandler+0x218>
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d012      	beq.n	80015e8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f043 0202 	orr.w	r2, r3, #2
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f06f 0220 	mvn.w	r2, #32
 80015d6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f82a 	bl	8001632 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f06f 0220 	mvn.w	r2, #32
 80015e6:	601a      	str	r2, [r3, #0]
  }
}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x1c>
 8001660:	2302      	movs	r3, #2
 8001662:	e113      	b.n	800188c <HAL_ADC_ConfigChannel+0x244>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b09      	cmp	r3, #9
 8001672:	d925      	bls.n	80016c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68d9      	ldr	r1, [r3, #12]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	3b1e      	subs	r3, #30
 800168a:	2207      	movs	r2, #7
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43da      	mvns	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	400a      	ands	r2, r1
 8001698:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68d9      	ldr	r1, [r3, #12]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	4603      	mov	r3, r0
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4403      	add	r3, r0
 80016b2:	3b1e      	subs	r3, #30
 80016b4:	409a      	lsls	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	e022      	b.n	8001706 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6919      	ldr	r1, [r3, #16]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	2207      	movs	r2, #7
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	400a      	ands	r2, r1
 80016e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6919      	ldr	r1, [r3, #16]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4618      	mov	r0, r3
 80016f6:	4603      	mov	r3, r0
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4403      	add	r3, r0
 80016fc:	409a      	lsls	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b06      	cmp	r3, #6
 800170c:	d824      	bhi.n	8001758 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b05      	subs	r3, #5
 8001720:	221f      	movs	r2, #31
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	400a      	ands	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b05      	subs	r3, #5
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
 8001756:	e04c      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d824      	bhi.n	80017aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	3b23      	subs	r3, #35	; 0x23
 8001772:	221f      	movs	r2, #31
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43da      	mvns	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	400a      	ands	r2, r1
 8001780:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	3b23      	subs	r3, #35	; 0x23
 800179c:	fa00 f203 	lsl.w	r2, r0, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30
 80017a8:	e023      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	3b41      	subs	r3, #65	; 0x41
 80017bc:	221f      	movs	r2, #31
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43da      	mvns	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	400a      	ands	r2, r1
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	3b41      	subs	r3, #65	; 0x41
 80017e6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_ADC_ConfigChannel+0x250>)
 80017f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a28      	ldr	r2, [pc, #160]	; (800189c <HAL_ADC_ConfigChannel+0x254>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d10f      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x1d8>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b12      	cmp	r3, #18
 8001806:	d10b      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_ADC_ConfigChannel+0x254>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12b      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x23a>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a1c      	ldr	r2, [pc, #112]	; (80018a0 <HAL_ADC_ConfigChannel+0x258>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d003      	beq.n	800183c <HAL_ADC_ConfigChannel+0x1f4>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b11      	cmp	r3, #17
 800183a:	d122      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <HAL_ADC_ConfigChannel+0x258>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d111      	bne.n	8001882 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_ADC_ConfigChannel+0x25c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a11      	ldr	r2, [pc, #68]	; (80018a8 <HAL_ADC_ConfigChannel+0x260>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	0c9a      	lsrs	r2, r3, #18
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001874:	e002      	b.n	800187c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3b01      	subs	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1f9      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40012300 	.word	0x40012300
 800189c:	40012000 	.word	0x40012000
 80018a0:	10000012 	.word	0x10000012
 80018a4:	20000004 	.word	0x20000004
 80018a8:	431bde83 	.word	0x431bde83

080018ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b4:	4b79      	ldr	r3, [pc, #484]	; (8001a9c <ADC_Init+0x1f0>)
 80018b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	431a      	orrs	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	021a      	lsls	r2, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <ADC_Init+0x1f4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d022      	beq.n	800198a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001952:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6899      	ldr	r1, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001974:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	e00f      	b.n	80019aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0202 	bic.w	r2, r2, #2
 80019b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6899      	ldr	r1, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7e1b      	ldrb	r3, [r3, #24]
 80019c4:	005a      	lsls	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01b      	beq.n	8001a10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6859      	ldr	r1, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	3b01      	subs	r3, #1
 8001a04:	035a      	lsls	r2, r3, #13
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	e007      	b.n	8001a20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	051a      	lsls	r2, r3, #20
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6899      	ldr	r1, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a62:	025a      	lsls	r2, r3, #9
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6899      	ldr	r1, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	029a      	lsls	r2, r3, #10
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40012300 	.word	0x40012300
 8001aa0:	0f000001 	.word	0x0f000001

08001aa4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x44>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <__NVIC_GetPriorityGrouping+0x18>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	f003 0307 	and.w	r3, r3, #7
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	db0b      	blt.n	8001b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	f003 021f 	and.w	r2, r3, #31
 8001b34:	4907      	ldr	r1, [pc, #28]	; (8001b54 <__NVIC_EnableIRQ+0x38>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ff4c 	bl	8001ab8 <__NVIC_SetPriorityGrouping>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3a:	f7ff ff61 	bl	8001b00 <__NVIC_GetPriorityGrouping>
 8001c3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	6978      	ldr	r0, [r7, #20]
 8001c46:	f7ff ffb1 	bl	8001bac <NVIC_EncodePriority>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff80 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c58:	bf00      	nop
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff54 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	; 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e159      	b.n	8001f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8148 	bne.w	8001f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d130      	bne.n	8001d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0201 	and.w	r2, r3, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d017      	beq.n	8001d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80a2 	beq.w	8001f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a56      	ldr	r2, [pc, #344]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b54      	ldr	r3, [pc, #336]	; (8001f64 <HAL_GPIO_Init+0x2e8>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1e:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <HAL_GPIO_Init+0x2f0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d019      	beq.n	8001e7e <HAL_GPIO_Init+0x202>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a48      	ldr	r2, [pc, #288]	; (8001f70 <HAL_GPIO_Init+0x2f4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0x1fe>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <HAL_GPIO_Init+0x2f8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_GPIO_Init+0x1fa>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a46      	ldr	r2, [pc, #280]	; (8001f78 <HAL_GPIO_Init+0x2fc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x1f6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a45      	ldr	r2, [pc, #276]	; (8001f7c <HAL_GPIO_Init+0x300>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_GPIO_Init+0x1f2>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e008      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e6e:	2307      	movs	r3, #7
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e72:	2303      	movs	r3, #3
 8001e74:	e004      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e002      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_GPIO_Init+0x204>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	f002 0203 	and.w	r2, r2, #3
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	4093      	lsls	r3, r2
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e90:	4935      	ldr	r1, [pc, #212]	; (8001f68 <HAL_GPIO_Init+0x2ec>)
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	3302      	adds	r3, #2
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec2:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eec:	4a24      	ldr	r2, [pc, #144]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef2:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f16:	4a1a      	ldr	r2, [pc, #104]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f40:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <HAL_GPIO_Init+0x304>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b0f      	cmp	r3, #15
 8001f50:	f67f aea2 	bls.w	8001c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40013800 	.word	0x40013800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40020400 	.word	0x40020400
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e267      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d075      	beq.n	80020c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d00c      	beq.n	8001ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe2:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d112      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fee:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffa:	d10b      	bne.n	8002014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffc:	4b7e      	ldr	r3, [pc, #504]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d05b      	beq.n	80020c0 <HAL_RCC_OscConfig+0x108>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d157      	bne.n	80020c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e242      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800201c:	d106      	bne.n	800202c <HAL_RCC_OscConfig+0x74>
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x98>
 8002036:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6f      	ldr	r2, [pc, #444]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6c      	ldr	r2, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xb0>
 8002050:	4b69      	ldr	r3, [pc, #420]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a68      	ldr	r2, [pc, #416]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b66      	ldr	r3, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a65      	ldr	r2, [pc, #404]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff f8a0 	bl	80011b4 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff f89c 	bl	80011b4 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e207      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xc0>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff f88c 	bl	80011b4 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff f888 	bl	80011b4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1f3      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0xe8>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ce:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e6:	4b44      	ldr	r3, [pc, #272]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1c7      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4937      	ldr	r1, [pc, #220]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b34      	ldr	r3, [pc, #208]	; (80021fc <HAL_RCC_OscConfig+0x244>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7ff f841 	bl	80011b4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7ff f83d 	bl	80011b4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1a8      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4925      	ldr	r1, [pc, #148]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_OscConfig+0x244>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff f820 	bl	80011b4 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002178:	f7ff f81c 	bl	80011b4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e187      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d036      	beq.n	8002210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_RCC_OscConfig+0x248>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7ff f800 	bl	80011b4 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b8:	f7fe fffc 	bl	80011b4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e167      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x240>)
 80021cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x200>
 80021d6:	e01b      	b.n	8002210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_OscConfig+0x248>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7fe ffe9 	bl	80011b4 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	e00e      	b.n	8002204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e6:	f7fe ffe5 	bl	80011b4 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d907      	bls.n	8002204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e150      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
 80021f8:	40023800 	.word	0x40023800
 80021fc:	42470000 	.word	0x42470000
 8002200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ea      	bne.n	80021e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 8097 	beq.w	800234c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10f      	bne.n	800224e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b7d      	ldr	r3, [pc, #500]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a7c      	ldr	r2, [pc, #496]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b7a      	ldr	r3, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224a:	2301      	movs	r3, #1
 800224c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224e:	4b77      	ldr	r3, [pc, #476]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225a:	4b74      	ldr	r3, [pc, #464]	; (800242c <HAL_RCC_OscConfig+0x474>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a73      	ldr	r2, [pc, #460]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002266:	f7fe ffa5 	bl	80011b4 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226e:	f7fe ffa1 	bl	80011b4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e10c      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_OscConfig+0x474>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x2ea>
 8002294:	4b64      	ldr	r3, [pc, #400]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a63      	ldr	r2, [pc, #396]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
 80022a0:	e01c      	b.n	80022dc <HAL_RCC_OscConfig+0x324>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b05      	cmp	r3, #5
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x30c>
 80022aa:	4b5f      	ldr	r3, [pc, #380]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	4b5c      	ldr	r3, [pc, #368]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ba:	4a5b      	ldr	r2, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6713      	str	r3, [r2, #112]	; 0x70
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0x324>
 80022c4:	4b58      	ldr	r3, [pc, #352]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a57      	ldr	r2, [pc, #348]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
 80022d0:	4b55      	ldr	r3, [pc, #340]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	4a54      	ldr	r2, [pc, #336]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e4:	f7fe ff66 	bl	80011b4 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ea:	e00a      	b.n	8002302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe ff62 	bl	80011b4 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e0cb      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0ee      	beq.n	80022ec <HAL_RCC_OscConfig+0x334>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe ff50 	bl	80011b4 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe ff4c 	bl	80011b4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0b5      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232e:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ee      	bne.n	8002318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	4a38      	ldr	r2, [pc, #224]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a1 	beq.w	8002498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b08      	cmp	r3, #8
 8002360:	d05c      	beq.n	800241c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d141      	bne.n	80023ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe ff20 	bl	80011b4 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe ff1c 	bl	80011b4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e087      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69da      	ldr	r2, [r3, #28]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	085b      	lsrs	r3, r3, #1
 80023ae:	3b01      	subs	r3, #1
 80023b0:	041b      	lsls	r3, r3, #16
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	491b      	ldr	r1, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7fe fef5 	bl	80011b4 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe fef1 	bl	80011b4 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e05c      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x416>
 80023ec:	e054      	b.n	8002498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_RCC_OscConfig+0x478>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7fe fede 	bl	80011b4 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7fe feda 	bl	80011b4 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e045      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_OscConfig+0x470>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x444>
 800241a:	e03d      	b.n	8002498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e038      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
 8002428:	40023800 	.word	0x40023800
 800242c:	40007000 	.word	0x40007000
 8002430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <HAL_RCC_OscConfig+0x4ec>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d028      	beq.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d121      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d11a      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800246a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246c:	4293      	cmp	r3, r2
 800246e:	d111      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d107      	bne.n	8002494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023800 	.word	0x40023800

080024a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0cc      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b68      	ldr	r3, [pc, #416]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d90c      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b65      	ldr	r3, [pc, #404]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fc:	4b59      	ldr	r3, [pc, #356]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002514:	4b53      	ldr	r3, [pc, #332]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a52      	ldr	r2, [pc, #328]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800251e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	494d      	ldr	r1, [pc, #308]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d044      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d119      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d003      	beq.n	8002566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	2b03      	cmp	r3, #3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e067      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002586:	4b37      	ldr	r3, [pc, #220]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4934      	ldr	r1, [pc, #208]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7fe fe0c 	bl	80011b4 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7fe fe08 	bl	80011b4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e04f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b2b      	ldr	r3, [pc, #172]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 020c 	and.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1eb      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d20c      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b22      	ldr	r3, [pc, #136]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e032      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4916      	ldr	r1, [pc, #88]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	490e      	ldr	r1, [pc, #56]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800262e:	f000 f821 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	490a      	ldr	r1, [pc, #40]	; (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb82 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00
 8002664:	40023800 	.word	0x40023800
 8002668:	08007290 	.word	0x08007290
 800266c:	20000004 	.word	0x20000004
 8002670:	20000008 	.word	0x20000008

08002674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002678:	b094      	sub	sp, #80	; 0x50
 800267a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	647b      	str	r3, [r7, #68]	; 0x44
 8002680:	2300      	movs	r3, #0
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002684:	2300      	movs	r3, #0
 8002686:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268c:	4b79      	ldr	r3, [pc, #484]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b08      	cmp	r3, #8
 8002696:	d00d      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x40>
 8002698:	2b08      	cmp	r3, #8
 800269a:	f200 80e1 	bhi.w	8002860 <HAL_RCC_GetSysClockFreq+0x1ec>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x3a>
 80026a6:	e0db      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <HAL_RCC_GetSysClockFreq+0x204>)
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026ac:	e0db      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026ae:	4b73      	ldr	r3, [pc, #460]	; (800287c <HAL_RCC_GetSysClockFreq+0x208>)
 80026b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b2:	e0d8      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b4:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026be:	4b6d      	ldr	r3, [pc, #436]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d063      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ca:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	099b      	lsrs	r3, r3, #6
 80026d0:	2200      	movs	r2, #0
 80026d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026dc:	633b      	str	r3, [r7, #48]	; 0x30
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026e6:	4622      	mov	r2, r4
 80026e8:	462b      	mov	r3, r5
 80026ea:	f04f 0000 	mov.w	r0, #0
 80026ee:	f04f 0100 	mov.w	r1, #0
 80026f2:	0159      	lsls	r1, r3, #5
 80026f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f8:	0150      	lsls	r0, r2, #5
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4621      	mov	r1, r4
 8002700:	1a51      	subs	r1, r2, r1
 8002702:	6139      	str	r1, [r7, #16]
 8002704:	4629      	mov	r1, r5
 8002706:	eb63 0301 	sbc.w	r3, r3, r1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002718:	4659      	mov	r1, fp
 800271a:	018b      	lsls	r3, r1, #6
 800271c:	4651      	mov	r1, sl
 800271e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002722:	4651      	mov	r1, sl
 8002724:	018a      	lsls	r2, r1, #6
 8002726:	4651      	mov	r1, sl
 8002728:	ebb2 0801 	subs.w	r8, r2, r1
 800272c:	4659      	mov	r1, fp
 800272e:	eb63 0901 	sbc.w	r9, r3, r1
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800273e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002746:	4690      	mov	r8, r2
 8002748:	4699      	mov	r9, r3
 800274a:	4623      	mov	r3, r4
 800274c:	eb18 0303 	adds.w	r3, r8, r3
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	462b      	mov	r3, r5
 8002754:	eb49 0303 	adc.w	r3, r9, r3
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	f04f 0300 	mov.w	r3, #0
 8002762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002766:	4629      	mov	r1, r5
 8002768:	024b      	lsls	r3, r1, #9
 800276a:	4621      	mov	r1, r4
 800276c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002770:	4621      	mov	r1, r4
 8002772:	024a      	lsls	r2, r1, #9
 8002774:	4610      	mov	r0, r2
 8002776:	4619      	mov	r1, r3
 8002778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277a:	2200      	movs	r2, #0
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
 800277e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002784:	f7fd fd7c 	bl	8000280 <__aeabi_uldivmod>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4613      	mov	r3, r2
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002790:	e058      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	2200      	movs	r2, #0
 800279a:	4618      	mov	r0, r3
 800279c:	4611      	mov	r1, r2
 800279e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027a2:	623b      	str	r3, [r7, #32]
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
 80027a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027ac:	4642      	mov	r2, r8
 80027ae:	464b      	mov	r3, r9
 80027b0:	f04f 0000 	mov.w	r0, #0
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	0159      	lsls	r1, r3, #5
 80027ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027be:	0150      	lsls	r0, r2, #5
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4641      	mov	r1, r8
 80027c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ca:	4649      	mov	r1, r9
 80027cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027e4:	ebb2 040a 	subs.w	r4, r2, sl
 80027e8:	eb63 050b 	sbc.w	r5, r3, fp
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	00eb      	lsls	r3, r5, #3
 80027f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fa:	00e2      	lsls	r2, r4, #3
 80027fc:	4614      	mov	r4, r2
 80027fe:	461d      	mov	r5, r3
 8002800:	4643      	mov	r3, r8
 8002802:	18e3      	adds	r3, r4, r3
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	464b      	mov	r3, r9
 8002808:	eb45 0303 	adc.w	r3, r5, r3
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281a:	4629      	mov	r1, r5
 800281c:	028b      	lsls	r3, r1, #10
 800281e:	4621      	mov	r1, r4
 8002820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002824:	4621      	mov	r1, r4
 8002826:	028a      	lsls	r2, r1, #10
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282e:	2200      	movs	r2, #0
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	61fa      	str	r2, [r7, #28]
 8002834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002838:	f7fd fd22 	bl	8000280 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800285e:	e002      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetSysClockFreq+0x204>)
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002868:	4618      	mov	r0, r3
 800286a:	3750      	adds	r7, #80	; 0x50
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	00f42400 	.word	0x00f42400
 800287c:	007a1200 	.word	0x007a1200

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_GetHCLKFreq+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000004 	.word	0x20000004

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800289c:	f7ff fff0 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	080072a0 	.word	0x080072a0

080028c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	220f      	movs	r2, #15
 80028ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_RCC_GetClockConfig+0x5c>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 0203 	and.w	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028dc:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_RCC_GetClockConfig+0x5c>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_RCC_GetClockConfig+0x5c>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_GetClockConfig+0x5c>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	08db      	lsrs	r3, r3, #3
 80028fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <HAL_RCC_GetClockConfig+0x60>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0207 	and.w	r2, r3, #7
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	40023c00 	.word	0x40023c00

08002924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e041      	b.n	80029ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f839 	bl	80029c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f000 f9ca 	bl	8002cfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e044      	b.n	8002a7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d018      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d013      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_TIM_Base_Start_IT+0xb4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00e      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x6c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d111      	bne.n	8002a68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d010      	beq.n	8002a78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a66:	e007      	b.n	8002a78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40000800 	.word	0x40000800
 8002a94:	40000c00 	.word	0x40000c00
 8002a98:	40014000 	.word	0x40014000

08002a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d122      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d11b      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0202 	mvn.w	r2, #2
 8002ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8ee 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8e0 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f8f1 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0204 	mvn.w	r2, #4
 8002b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8c4 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8b6 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8c7 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0208 	mvn.w	r2, #8
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2204      	movs	r2, #4
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f89a 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f88c 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f89d 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0210 	mvn.w	r2, #16
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f870 	bl	8002cc0 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f862 	bl	8002cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f873 	bl	8002cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0201 	mvn.w	r2, #1
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe f834 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2a:	2b80      	cmp	r3, #128	; 0x80
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c38:	2b80      	cmp	r3, #128	; 0x80
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f8e2 	bl	8002e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d107      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f838 	bl	8002ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d10e      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d107      	bne.n	8002ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0220 	mvn.w	r2, #32
 8002c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f8ac 	bl	8002dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <TIM_Base_SetConfig+0xe4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00f      	beq.n	8002d34 <TIM_Base_SetConfig+0x38>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d00b      	beq.n	8002d34 <TIM_Base_SetConfig+0x38>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a31      	ldr	r2, [pc, #196]	; (8002de4 <TIM_Base_SetConfig+0xe8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d007      	beq.n	8002d34 <TIM_Base_SetConfig+0x38>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <TIM_Base_SetConfig+0xec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_Base_SetConfig+0x38>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a2f      	ldr	r2, [pc, #188]	; (8002dec <TIM_Base_SetConfig+0xf0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <TIM_Base_SetConfig+0xe4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01b      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d017      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <TIM_Base_SetConfig+0xe8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <TIM_Base_SetConfig+0xec>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00f      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a20      	ldr	r2, [pc, #128]	; (8002dec <TIM_Base_SetConfig+0xf0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <TIM_Base_SetConfig+0xf4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <TIM_Base_SetConfig+0xf8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <TIM_Base_SetConfig+0xfc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <TIM_Base_SetConfig+0xe4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800

08002dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f103 0208 	add.w	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f103 0208 	add.w	r2, r3, #8
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f103 0208 	add.w	r2, r3, #8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d103      	bne.n	8002e9e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	e00c      	b.n	8002eb8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e002      	b.n	8002eac <vListInsert+0x2e>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d2f6      	bcs.n	8002ea6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6852      	ldr	r2, [r2, #4]
 8002f10:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d103      	bne.n	8002f24 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1e5a      	subs	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10a      	bne.n	8002f72 <xQueueGenericReset+0x2e>
        __asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	60fb      	str	r3, [r7, #12]
    }
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d05d      	beq.n	8003034 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d059      	beq.n	8003034 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	2100      	movs	r1, #0
 8002f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d000      	beq.n	8002f94 <xQueueGenericReset+0x50>
 8002f92:	2101      	movs	r1, #1
 8002f94:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d14c      	bne.n	8003034 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002f9a:	f002 fb65 	bl	8005668 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	6939      	ldr	r1, [r7, #16]
 8002fa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	441a      	add	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	6939      	ldr	r1, [r7, #16]
 8002fce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	441a      	add	r2, r3
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	22ff      	movs	r2, #255	; 0xff
 8002fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d114      	bne.n	800301a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01a      	beq.n	800302e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	3310      	adds	r3, #16
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 fac5 	bl	800458c <xTaskRemoveFromEventList>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d012      	beq.n	800302e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <xQueueGenericReset+0x11c>)
 800300a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	e009      	b.n	800302e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3310      	adds	r3, #16
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff00 	bl	8002e24 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	3324      	adds	r3, #36	; 0x24
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fefb 	bl	8002e24 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800302e:	f002 fb4b 	bl	80056c8 <vPortExitCritical>
 8003032:	e001      	b.n	8003038 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <xQueueGenericReset+0x110>
        __asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	60bb      	str	r3, [r7, #8]
    }
 8003050:	bf00      	nop
 8003052:	e7fe      	b.n	8003052 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003054:	697b      	ldr	r3, [r7, #20]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02e      	beq.n	80030da <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800307c:	2100      	movs	r1, #0
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	fba3 2302 	umull	r2, r3, r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d000      	beq.n	800308c <xQueueGenericCreate+0x28>
 800308a:	2101      	movs	r1, #1
 800308c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	d123      	bne.n	80030da <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800309a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800309e:	d81c      	bhi.n	80030da <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	3350      	adds	r3, #80	; 0x50
 80030ae:	4618      	mov	r0, r3
 80030b0:	f002 fbfc 	bl	80058ac <pvPortMalloc>
 80030b4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d01c      	beq.n	80030f6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3350      	adds	r3, #80	; 0x50
 80030c4:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030c6:	79fa      	ldrb	r2, [r7, #7]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	4613      	mov	r3, r2
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f814 	bl	8003100 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80030d8:	e00d      	b.n	80030f6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <xQueueGenericCreate+0x92>
        __asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	613b      	str	r3, [r7, #16]
    }
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80030f6:	69fb      	ldr	r3, [r7, #28]
    }
 80030f8:	4618      	mov	r0, r3
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d103      	bne.n	800311c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e002      	b.n	8003122 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800312e:	2101      	movs	r1, #1
 8003130:	69b8      	ldr	r0, [r7, #24]
 8003132:	f7ff ff07 	bl	8002f44 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <xQueueCreateCountingSemaphore+0x36>
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	d80c      	bhi.n	800317c <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003162:	2202      	movs	r2, #2
 8003164:	2100      	movs	r1, #0
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ff7c 	bl	8003064 <xQueueGenericCreate>
 800316c:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d011      	beq.n	8003198 <xQueueCreateCountingSemaphore+0x52>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 800317a:	e00d      	b.n	8003198 <xQueueCreateCountingSemaphore+0x52>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <xQueueCreateCountingSemaphore+0x52>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	60bb      	str	r3, [r7, #8]
    }
 8003194:	bf00      	nop
 8003196:	e7fe      	b.n	8003196 <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8003198:	68fb      	ldr	r3, [r7, #12]
    }
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08e      	sub	sp, #56	; 0x38
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <xQueueGenericSend+0x32>
        __asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80031d2:	bf00      	nop
 80031d4:	e7fe      	b.n	80031d4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <xQueueGenericSend+0x40>
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <xQueueGenericSend+0x44>
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <xQueueGenericSend+0x46>
 80031e8:	2300      	movs	r3, #0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <xQueueGenericSend+0x60>
        __asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003200:	bf00      	nop
 8003202:	e7fe      	b.n	8003202 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d103      	bne.n	8003212 <xQueueGenericSend+0x6e>
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <xQueueGenericSend+0x72>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <xQueueGenericSend+0x74>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <xQueueGenericSend+0x8e>
        __asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	623b      	str	r3, [r7, #32]
    }
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003232:	f001 fbbb 	bl	80049ac <xTaskGetSchedulerState>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d102      	bne.n	8003242 <xQueueGenericSend+0x9e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <xQueueGenericSend+0xa2>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <xQueueGenericSend+0xa4>
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <xQueueGenericSend+0xbe>
        __asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61fb      	str	r3, [r7, #28]
    }
 800325e:	bf00      	nop
 8003260:	e7fe      	b.n	8003260 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003262:	f002 fa01 	bl	8005668 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <xQueueGenericSend+0xd4>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d129      	bne.n	80032cc <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800327e:	f000 fb2f 	bl	80038e0 <prvCopyDataToQueue>
 8003282:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	3324      	adds	r3, #36	; 0x24
 8003290:	4618      	mov	r0, r3
 8003292:	f001 f97b 	bl	800458c <xTaskRemoveFromEventList>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d013      	beq.n	80032c4 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800329c:	4b3f      	ldr	r3, [pc, #252]	; (800339c <xQueueGenericSend+0x1f8>)
 800329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	e00a      	b.n	80032c4 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80032b4:	4b39      	ldr	r3, [pc, #228]	; (800339c <xQueueGenericSend+0x1f8>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80032c4:	f002 fa00 	bl	80056c8 <vPortExitCritical>
                return pdPASS;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e063      	b.n	8003394 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80032d2:	f002 f9f9 	bl	80056c8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e05c      	b.n	8003394 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80032da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80032e0:	f107 0314 	add.w	r3, r7, #20
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 fa27 	bl	8004738 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80032ea:	2301      	movs	r3, #1
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80032ee:	f002 f9eb 	bl	80056c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80032f2:	f000 fe55 	bl	8003fa0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032f6:	f002 f9b7 	bl	8005668 <vPortEnterCritical>
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003300:	b25b      	sxtb	r3, r3
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d103      	bne.n	8003310 <xQueueGenericSend+0x16c>
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003316:	b25b      	sxtb	r3, r3
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d103      	bne.n	8003326 <xQueueGenericSend+0x182>
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003326:	f002 f9cf 	bl	80056c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800332a:	1d3a      	adds	r2, r7, #4
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f001 fa16 	bl	8004764 <xTaskCheckForTimeOut>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d124      	bne.n	8003388 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800333e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003340:	f000 fbc6 	bl	8003ad0 <prvIsQueueFull>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d018      	beq.n	800337c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	3310      	adds	r3, #16
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f001 f8b0 	bl	80044b8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800335a:	f000 fb51 	bl	8003a00 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800335e:	f000 fe2d 	bl	8003fbc <xTaskResumeAll>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f af7c 	bne.w	8003262 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800336a:	4b0c      	ldr	r3, [pc, #48]	; (800339c <xQueueGenericSend+0x1f8>)
 800336c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	e772      	b.n	8003262 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800337c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800337e:	f000 fb3f 	bl	8003a00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003382:	f000 fe1b 	bl	8003fbc <xTaskResumeAll>
 8003386:	e76c      	b.n	8003262 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800338a:	f000 fb39 	bl	8003a00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800338e:	f000 fe15 	bl	8003fbc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003392:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003394:	4618      	mov	r0, r3
 8003396:	3738      	adds	r7, #56	; 0x38
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08e      	sub	sp, #56	; 0x38
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <xQueueGiveFromISR+0x2a>
        __asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	623b      	str	r3, [r7, #32]
    }
 80033c6:	bf00      	nop
 80033c8:	e7fe      	b.n	80033c8 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <xQueueGiveFromISR+0x48>
        __asm volatile
 80033d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	61fb      	str	r3, [r7, #28]
    }
 80033e4:	bf00      	nop
 80033e6:	e7fe      	b.n	80033e6 <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80033e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <xQueueGiveFromISR+0x58>
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <xQueueGiveFromISR+0x5c>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <xQueueGiveFromISR+0x5e>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <xQueueGiveFromISR+0x78>
        __asm volatile
 8003402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003406:	f383 8811 	msr	BASEPRI, r3
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	f3bf 8f4f 	dsb	sy
 8003412:	61bb      	str	r3, [r7, #24]
    }
 8003414:	bf00      	nop
 8003416:	e7fe      	b.n	8003416 <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003418:	f002 fa08 	bl	800582c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800341c:	f3ef 8211 	mrs	r2, BASEPRI
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	617a      	str	r2, [r7, #20]
 8003432:	613b      	str	r3, [r7, #16]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003434:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003444:	429a      	cmp	r2, r3
 8003446:	d23a      	bcs.n	80034be <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800345a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003462:	d112      	bne.n	800348a <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2b00      	cmp	r3, #0
 800346a:	d025      	beq.n	80034b8 <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	3324      	adds	r3, #36	; 0x24
 8003470:	4618      	mov	r0, r3
 8003472:	f001 f88b 	bl	800458c <xTaskRemoveFromEventList>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01d      	beq.n	80034b8 <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01a      	beq.n	80034b8 <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e016      	b.n	80034b8 <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800348a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800348e:	2b7f      	cmp	r3, #127	; 0x7f
 8003490:	d10a      	bne.n	80034a8 <xQueueGiveFromISR+0x108>
        __asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	60fb      	str	r3, [r7, #12]
    }
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ac:	3301      	adds	r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	b25a      	sxtb	r2, r3
 80034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80034b8:	2301      	movs	r3, #1
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
 80034bc:	e001      	b.n	80034c2 <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80034cc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3738      	adds	r7, #56	; 0x38
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	; 0x30
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <xQueueReceive+0x30>
        __asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	623b      	str	r3, [r7, #32]
    }
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d103      	bne.n	8003516 <xQueueReceive+0x3e>
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <xQueueReceive+0x42>
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <xQueueReceive+0x44>
 800351a:	2300      	movs	r3, #0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <xQueueReceive+0x5e>
        __asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	61fb      	str	r3, [r7, #28]
    }
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003536:	f001 fa39 	bl	80049ac <xTaskGetSchedulerState>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <xQueueReceive+0x6e>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <xQueueReceive+0x72>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <xQueueReceive+0x74>
 800354a:	2300      	movs	r3, #0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10a      	bne.n	8003566 <xQueueReceive+0x8e>
        __asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	61bb      	str	r3, [r7, #24]
    }
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003566:	f002 f87f 	bl	8005668 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01f      	beq.n	80035b6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800357a:	f000 fa1b 	bl	80039b4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1e5a      	subs	r2, r3, #1
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00f      	beq.n	80035ae <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	3310      	adds	r3, #16
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fffa 	bl	800458c <xTaskRemoveFromEventList>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800359e:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <xQueueReceive+0x1bc>)
 80035a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80035ae:	f002 f88b 	bl	80056c8 <vPortExitCritical>
                return pdPASS;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e069      	b.n	800368a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d103      	bne.n	80035c4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80035bc:	f002 f884 	bl	80056c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e062      	b.n	800368a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 f8b2 	bl	8004738 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80035d8:	f002 f876 	bl	80056c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80035dc:	f000 fce0 	bl	8003fa0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80035e0:	f002 f842 	bl	8005668 <vPortEnterCritical>
 80035e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ea:	b25b      	sxtb	r3, r3
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d103      	bne.n	80035fa <xQueueReceive+0x122>
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003600:	b25b      	sxtb	r3, r3
 8003602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003606:	d103      	bne.n	8003610 <xQueueReceive+0x138>
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003610:	f002 f85a 	bl	80056c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003614:	1d3a      	adds	r2, r7, #4
 8003616:	f107 0310 	add.w	r3, r7, #16
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f001 f8a1 	bl	8004764 <xTaskCheckForTimeOut>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d123      	bne.n	8003670 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800362a:	f000 fa3b 	bl	8003aa4 <prvIsQueueEmpty>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d017      	beq.n	8003664 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003636:	3324      	adds	r3, #36	; 0x24
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f000 ff3b 	bl	80044b8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003644:	f000 f9dc 	bl	8003a00 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003648:	f000 fcb8 	bl	8003fbc <xTaskResumeAll>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d189      	bne.n	8003566 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <xQueueReceive+0x1bc>)
 8003654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	e780      	b.n	8003566 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003666:	f000 f9cb 	bl	8003a00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800366a:	f000 fca7 	bl	8003fbc <xTaskResumeAll>
 800366e:	e77a      	b.n	8003566 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003672:	f000 f9c5 	bl	8003a00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003676:	f000 fca1 	bl	8003fbc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800367a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800367c:	f000 fa12 	bl	8003aa4 <prvIsQueueEmpty>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	f43f af6f 	beq.w	8003566 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003688:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800368a:	4618      	mov	r0, r3
 800368c:	3730      	adds	r7, #48	; 0x30
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xQueueSemaphoreTake+0x32>
        __asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
    }
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	61fb      	str	r3, [r7, #28]
    }
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036e8:	f001 f960 	bl	80049ac <xTaskGetSchedulerState>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <xQueueSemaphoreTake+0x60>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <xQueueSemaphoreTake+0x64>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <xQueueSemaphoreTake+0x66>
 80036fc:	2300      	movs	r3, #0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	61bb      	str	r3, [r7, #24]
    }
 8003714:	bf00      	nop
 8003716:	e7fe      	b.n	8003716 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003718:	f001 ffa6 	bl	8005668 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	2b00      	cmp	r3, #0
 8003726:	d024      	beq.n	8003772 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	1e5a      	subs	r2, r3, #1
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003738:	f001 fb50 	bl	8004ddc <pvTaskIncrementMutexHeldCount>
 800373c:	4602      	mov	r2, r0
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00f      	beq.n	800376a <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	3310      	adds	r3, #16
 800374e:	4618      	mov	r0, r3
 8003750:	f000 ff1c 	bl	800458c <xTaskRemoveFromEventList>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800375a:	4b54      	ldr	r3, [pc, #336]	; (80038ac <xQueueSemaphoreTake+0x214>)
 800375c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800376a:	f001 ffad 	bl	80056c8 <vPortExitCritical>
                return pdPASS;
 800376e:	2301      	movs	r3, #1
 8003770:	e097      	b.n	80038a2 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d111      	bne.n	800379c <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	617b      	str	r3, [r7, #20]
    }
 8003790:	bf00      	nop
 8003792:	e7fe      	b.n	8003792 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003794:	f001 ff98 	bl	80056c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003798:	2300      	movs	r3, #0
 800379a:	e082      	b.n	80038a2 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037a2:	f107 030c 	add.w	r3, r7, #12
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 ffc6 	bl	8004738 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037b0:	f001 ff8a 	bl	80056c8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037b4:	f000 fbf4 	bl	8003fa0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80037b8:	f001 ff56 	bl	8005668 <vPortEnterCritical>
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d103      	bne.n	80037d2 <xQueueSemaphoreTake+0x13a>
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037d8:	b25b      	sxtb	r3, r3
 80037da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037de:	d103      	bne.n	80037e8 <xQueueSemaphoreTake+0x150>
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037e8:	f001 ff6e 	bl	80056c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ec:	463a      	mov	r2, r7
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 ffb5 	bl	8004764 <xTaskCheckForTimeOut>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d132      	bne.n	8003866 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003802:	f000 f94f 	bl	8003aa4 <prvIsQueueEmpty>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d026      	beq.n	800385a <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003814:	f001 ff28 	bl	8005668 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f001 f8e3 	bl	80049e8 <xTaskPriorityInherit>
 8003822:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003824:	f001 ff50 	bl	80056c8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	3324      	adds	r3, #36	; 0x24
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fe41 	bl	80044b8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003838:	f000 f8e2 	bl	8003a00 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800383c:	f000 fbbe 	bl	8003fbc <xTaskResumeAll>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	f47f af68 	bne.w	8003718 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003848:	4b18      	ldr	r3, [pc, #96]	; (80038ac <xQueueSemaphoreTake+0x214>)
 800384a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	e75e      	b.n	8003718 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800385a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800385c:	f000 f8d0 	bl	8003a00 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003860:	f000 fbac 	bl	8003fbc <xTaskResumeAll>
 8003864:	e758      	b.n	8003718 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003868:	f000 f8ca 	bl	8003a00 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800386c:	f000 fba6 	bl	8003fbc <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003870:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003872:	f000 f917 	bl	8003aa4 <prvIsQueueEmpty>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	f43f af4d 	beq.w	8003718 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00d      	beq.n	80038a0 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8003884:	f001 fef0 	bl	8005668 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800388a:	f000 f811 	bl	80038b0 <prvGetDisinheritPriorityAfterTimeout>
 800388e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003896:	4618      	mov	r0, r3
 8003898:	f001 f9e8 	bl	8004c6c <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800389c:	f001 ff14 	bl	80056c8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80038a0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3738      	adds	r7, #56	; 0x38
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	e000ed04 	.word	0xe000ed04

080038b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d006      	beq.n	80038ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f1c3 0305 	rsb	r3, r3, #5
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e001      	b.n	80038d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80038d2:	68fb      	ldr	r3, [r7, #12]
    }
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10d      	bne.n	800391a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d14d      	bne.n	80039a2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4618      	mov	r0, r3
 800390c:	f001 f90a 	bl	8004b24 <xTaskPriorityDisinherit>
 8003910:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	e043      	b.n	80039a2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d119      	bne.n	8003954 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6858      	ldr	r0, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	461a      	mov	r2, r3
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	f002 fad8 	bl	8005ee0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d32b      	bcc.n	80039a2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	e026      	b.n	80039a2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68d8      	ldr	r0, [r3, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	461a      	mov	r2, r3
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	f002 fabe 	bl	8005ee0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	425b      	negs	r3, r3
 800396e:	441a      	add	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d207      	bcs.n	8003990 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	425b      	negs	r3, r3
 800398a:	441a      	add	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d105      	bne.n	80039a2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	3b01      	subs	r3, #1
 80039a0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80039aa:	697b      	ldr	r3, [r7, #20]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d018      	beq.n	80039f8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	441a      	add	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d303      	bcc.n	80039e8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68d9      	ldr	r1, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	461a      	mov	r2, r3
 80039f2:	6838      	ldr	r0, [r7, #0]
 80039f4:	f002 fa74 	bl	8005ee0 <memcpy>
    }
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003a08:	f001 fe2e 	bl	8005668 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a12:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a14:	e011      	b.n	8003a3a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d012      	beq.n	8003a44 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3324      	adds	r3, #36	; 0x24
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fdb2 	bl	800458c <xTaskRemoveFromEventList>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003a2e:	f000 feff 	bl	8004830 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	dce9      	bgt.n	8003a16 <prvUnlockQueue+0x16>
 8003a42:	e000      	b.n	8003a46 <prvUnlockQueue+0x46>
                        break;
 8003a44:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	22ff      	movs	r2, #255	; 0xff
 8003a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003a4e:	f001 fe3b 	bl	80056c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a52:	f001 fe09 	bl	8005668 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a5c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a5e:	e011      	b.n	8003a84 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d012      	beq.n	8003a8e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3310      	adds	r3, #16
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fd8d 	bl	800458c <xTaskRemoveFromEventList>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003a78:	f000 feda 	bl	8004830 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a7c:	7bbb      	ldrb	r3, [r7, #14]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	dce9      	bgt.n	8003a60 <prvUnlockQueue+0x60>
 8003a8c:	e000      	b.n	8003a90 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003a8e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	22ff      	movs	r2, #255	; 0xff
 8003a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003a98:	f001 fe16 	bl	80056c8 <vPortExitCritical>
}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003aac:	f001 fddc 	bl	8005668 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e001      	b.n	8003ac2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ac2:	f001 fe01 	bl	80056c8 <vPortExitCritical>

    return xReturn;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003ad8:	f001 fdc6 	bl	8005668 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d102      	bne.n	8003aee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	e001      	b.n	8003af2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003af2:	f001 fde9 	bl	80056c8 <vPortExitCritical>

    return xReturn;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <vQueueAddToRegistry+0x26>
        __asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60fb      	str	r3, [r7, #12]
    }
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d024      	beq.n	8003b7a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e01e      	b.n	8003b74 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003b36:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <vQueueAddToRegistry+0x98>)
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d105      	bne.n	8003b52 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <vQueueAddToRegistry+0x98>)
 8003b4c:	4413      	add	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
                    break;
 8003b50:	e013      	b.n	8003b7a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <vQueueAddToRegistry+0x6e>
 8003b58:	4a0f      	ldr	r2, [pc, #60]	; (8003b98 <vQueueAddToRegistry+0x98>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d104      	bne.n	8003b6e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <vQueueAddToRegistry+0x98>)
 8003b6a:	4413      	add	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b07      	cmp	r3, #7
 8003b78:	d9dd      	bls.n	8003b36 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	20000150 	.word	0x20000150

08003b9c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003bac:	f001 fd5c 	bl	8005668 <vPortEnterCritical>
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bb6:	b25b      	sxtb	r3, r3
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d103      	bne.n	8003bc6 <vQueueWaitForMessageRestricted+0x2a>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bcc:	b25b      	sxtb	r3, r3
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d103      	bne.n	8003bdc <vQueueWaitForMessageRestricted+0x40>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bdc:	f001 fd74 	bl	80056c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d106      	bne.n	8003bf6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	3324      	adds	r3, #36	; 0x24
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fc85 	bl	8004500 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003bf6:	6978      	ldr	r0, [r7, #20]
 8003bf8:	f7ff ff02 	bl	8003a00 <prvUnlockQueue>
    }
 8003bfc:	bf00      	nop
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08c      	sub	sp, #48	; 0x30
 8003c08:	af04      	add	r7, sp, #16
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f001 fe47 	bl	80058ac <pvPortMalloc>
 8003c1e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00e      	beq.n	8003c44 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c26:	2058      	movs	r0, #88	; 0x58
 8003c28:	f001 fe40 	bl	80058ac <pvPortMalloc>
 8003c2c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
 8003c3a:	e005      	b.n	8003c48 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8003c3c:	6978      	ldr	r0, [r7, #20]
 8003c3e:	f001 ff15 	bl	8005a6c <vPortFree>
 8003c42:	e001      	b.n	8003c48 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d013      	beq.n	8003c76 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	2300      	movs	r3, #0
 8003c52:	9303      	str	r3, [sp, #12]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	9302      	str	r3, [sp, #8]
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f80e 	bl	8003c86 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003c6a:	69f8      	ldr	r0, [r7, #28]
 8003c6c:	f000 f8b0 	bl	8003dd0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c70:	2301      	movs	r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	e002      	b.n	8003c7c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
    }
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b088      	sub	sp, #32
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	21a5      	movs	r1, #165	; 0xa5
 8003ca0:	f002 f92c 	bl	8005efc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	f023 0307 	bic.w	r3, r3, #7
 8003cbc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <prvInitialiseNewTask+0x58>
        __asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	617b      	str	r3, [r7, #20]
    }
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01f      	beq.n	8003d24 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e012      	b.n	8003d10 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4413      	add	r3, r2
 8003cf0:	7819      	ldrb	r1, [r3, #0]
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	3334      	adds	r3, #52	; 0x34
 8003cfa:	460a      	mov	r2, r1
 8003cfc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	4413      	add	r3, r2
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	2b09      	cmp	r3, #9
 8003d14:	d9e9      	bls.n	8003cea <prvInitialiseNewTask+0x64>
 8003d16:	e000      	b.n	8003d1a <prvInitialiseNewTask+0x94>
            {
                break;
 8003d18:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d22:	e003      	b.n	8003d2c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d90a      	bls.n	8003d48 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	613b      	str	r3, [r7, #16]
    }
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d901      	bls.n	8003d52 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d4e:	2304      	movs	r3, #4
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d5c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	2200      	movs	r2, #0
 8003d62:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f87b 	bl	8002e64 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	3318      	adds	r3, #24
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f876 	bl	8002e64 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	f1c3 0205 	rsb	r2, r3, #5
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	3350      	adds	r3, #80	; 0x50
 8003d92:	2204      	movs	r2, #4
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f002 f8b0 	bl	8005efc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9e:	3354      	adds	r3, #84	; 0x54
 8003da0:	2201      	movs	r2, #1
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 f8a9 	bl	8005efc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	68f9      	ldr	r1, [r7, #12]
 8003dae:	69b8      	ldr	r0, [r7, #24]
 8003db0:	f001 fb2c 	bl	800540c <pxPortInitialiseStack>
 8003db4:	4602      	mov	r2, r0
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dc4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003dc6:	bf00      	nop
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003dd8:	f001 fc46 	bl	8005668 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003ddc:	4b40      	ldr	r3, [pc, #256]	; (8003ee0 <prvAddNewTaskToReadyList+0x110>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a3f      	ldr	r2, [pc, #252]	; (8003ee0 <prvAddNewTaskToReadyList+0x110>)
 8003de4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003de6:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <prvAddNewTaskToReadyList+0x114>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003dee:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <prvAddNewTaskToReadyList+0x114>)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003df4:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <prvAddNewTaskToReadyList+0x110>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d110      	bne.n	8003e1e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003dfc:	f000 fd3c 	bl	8004878 <prvInitialiseTaskLists>
 8003e00:	e00d      	b.n	8003e1e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003e02:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <prvAddNewTaskToReadyList+0x118>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d109      	bne.n	8003e1e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <prvAddNewTaskToReadyList+0x114>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d802      	bhi.n	8003e1e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003e18:	4a32      	ldr	r2, [pc, #200]	; (8003ee4 <prvAddNewTaskToReadyList+0x114>)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003e1e:	4b33      	ldr	r3, [pc, #204]	; (8003eec <prvAddNewTaskToReadyList+0x11c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3301      	adds	r3, #1
 8003e24:	4a31      	ldr	r2, [pc, #196]	; (8003eec <prvAddNewTaskToReadyList+0x11c>)
 8003e26:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e28:	4b30      	ldr	r3, [pc, #192]	; (8003eec <prvAddNewTaskToReadyList+0x11c>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	2201      	movs	r2, #1
 8003e36:	409a      	lsls	r2, r3
 8003e38:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <prvAddNewTaskToReadyList+0x120>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <prvAddNewTaskToReadyList+0x120>)
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e46:	492b      	ldr	r1, [pc, #172]	; (8003ef4 <prvAddNewTaskToReadyList+0x124>)
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	3304      	adds	r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	3204      	adds	r2, #4
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	1d1a      	adds	r2, r3, #4
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <prvAddNewTaskToReadyList+0x124>)
 8003e86:	441a      	add	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	615a      	str	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4918      	ldr	r1, [pc, #96]	; (8003ef4 <prvAddNewTaskToReadyList+0x124>)
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	1c59      	adds	r1, r3, #1
 8003ea0:	4814      	ldr	r0, [pc, #80]	; (8003ef4 <prvAddNewTaskToReadyList+0x124>)
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4403      	add	r3, r0
 8003eac:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003eae:	f001 fc0b 	bl	80056c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <prvAddNewTaskToReadyList+0x118>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00e      	beq.n	8003ed8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <prvAddNewTaskToReadyList+0x114>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d207      	bcs.n	8003ed8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <prvAddNewTaskToReadyList+0x128>)
 8003eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000268 	.word	0x20000268
 8003ee4:	20000190 	.word	0x20000190
 8003ee8:	20000274 	.word	0x20000274
 8003eec:	20000284 	.word	0x20000284
 8003ef0:	20000270 	.word	0x20000270
 8003ef4:	20000194 	.word	0x20000194
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003f02:	4b20      	ldr	r3, [pc, #128]	; (8003f84 <vTaskStartScheduler+0x88>)
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	2300      	movs	r3, #0
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2282      	movs	r2, #130	; 0x82
 8003f0e:	491e      	ldr	r1, [pc, #120]	; (8003f88 <vTaskStartScheduler+0x8c>)
 8003f10:	481e      	ldr	r0, [pc, #120]	; (8003f8c <vTaskStartScheduler+0x90>)
 8003f12:	f7ff fe77 	bl	8003c04 <xTaskCreate>
 8003f16:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d102      	bne.n	8003f24 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003f1e:	f000 fff1 	bl	8004f04 <xTimerCreateTimerTask>
 8003f22:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d116      	bne.n	8003f58 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	60bb      	str	r3, [r7, #8]
    }
 8003f3c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003f3e:	4b14      	ldr	r3, [pc, #80]	; (8003f90 <vTaskStartScheduler+0x94>)
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <vTaskStartScheduler+0x98>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <vTaskStartScheduler+0x9c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003f52:	f001 fae7 	bl	8005524 <xPortStartScheduler>
 8003f56:	e00e      	b.n	8003f76 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5e:	d10a      	bne.n	8003f76 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	607b      	str	r3, [r7, #4]
    }
 8003f72:	bf00      	nop
 8003f74:	e7fe      	b.n	8003f74 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <vTaskStartScheduler+0xa0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	2000028c 	.word	0x2000028c
 8003f88:	08007278 	.word	0x08007278
 8003f8c:	08004849 	.word	0x08004849
 8003f90:	20000288 	.word	0x20000288
 8003f94:	20000274 	.word	0x20000274
 8003f98:	2000026c 	.word	0x2000026c
 8003f9c:	20000010 	.word	0x20000010

08003fa0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <vTaskSuspendAll+0x18>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	4a03      	ldr	r2, [pc, #12]	; (8003fb8 <vTaskSuspendAll+0x18>)
 8003fac:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	20000290 	.word	0x20000290

08003fbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003fca:	4b71      	ldr	r3, [pc, #452]	; (8004190 <xTaskResumeAll+0x1d4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <xTaskResumeAll+0x2c>
        __asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	607b      	str	r3, [r7, #4]
    }
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003fe8:	f001 fb3e 	bl	8005668 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003fec:	4b68      	ldr	r3, [pc, #416]	; (8004190 <xTaskResumeAll+0x1d4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	4a67      	ldr	r2, [pc, #412]	; (8004190 <xTaskResumeAll+0x1d4>)
 8003ff4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ff6:	4b66      	ldr	r3, [pc, #408]	; (8004190 <xTaskResumeAll+0x1d4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 80c0 	bne.w	8004180 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004000:	4b64      	ldr	r3, [pc, #400]	; (8004194 <xTaskResumeAll+0x1d8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80bb 	beq.w	8004180 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800400a:	e08a      	b.n	8004122 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400c:	4b62      	ldr	r3, [pc, #392]	; (8004198 <xTaskResumeAll+0x1dc>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	6a12      	ldr	r2, [r2, #32]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	69d2      	ldr	r2, [r2, #28]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	3318      	adds	r3, #24
 8004036:	429a      	cmp	r2, r3
 8004038:	d103      	bne.n	8004042 <xTaskResumeAll+0x86>
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	2200      	movs	r2, #0
 8004046:	629a      	str	r2, [r3, #40]	; 0x28
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	1e5a      	subs	r2, r3, #1
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	68d2      	ldr	r2, [r2, #12]
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	6892      	ldr	r2, [r2, #8]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	3304      	adds	r3, #4
 8004074:	429a      	cmp	r2, r3
 8004076:	d103      	bne.n	8004080 <xTaskResumeAll+0xc4>
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	605a      	str	r2, [r3, #4]
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	2200      	movs	r2, #0
 8004084:	615a      	str	r2, [r3, #20]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1e5a      	subs	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004094:	2201      	movs	r2, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	4b40      	ldr	r3, [pc, #256]	; (800419c <xTaskResumeAll+0x1e0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4313      	orrs	r3, r2
 800409e:	4a3f      	ldr	r2, [pc, #252]	; (800419c <xTaskResumeAll+0x1e0>)
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a6:	493e      	ldr	r1, [pc, #248]	; (80041a0 <xTaskResumeAll+0x1e4>)
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	3304      	adds	r3, #4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	609a      	str	r2, [r3, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	3204      	adds	r2, #4
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4a2e      	ldr	r2, [pc, #184]	; (80041a0 <xTaskResumeAll+0x1e4>)
 80040e6:	441a      	add	r2, r3
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	615a      	str	r2, [r3, #20]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	492b      	ldr	r1, [pc, #172]	; (80041a0 <xTaskResumeAll+0x1e4>)
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	1c59      	adds	r1, r3, #1
 8004100:	4827      	ldr	r0, [pc, #156]	; (80041a0 <xTaskResumeAll+0x1e4>)
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4403      	add	r3, r0
 800410c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <xTaskResumeAll+0x1e8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800411c:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <xTaskResumeAll+0x1ec>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <xTaskResumeAll+0x1dc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	f47f af70 	bne.w	800400c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004132:	f000 fc1f 	bl	8004974 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <xTaskResumeAll+0x1f0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d010      	beq.n	8004164 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004142:	f000 f847 	bl	80041d4 <xTaskIncrementTick>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800414c:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <xTaskResumeAll+0x1ec>)
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	3b01      	subs	r3, #1
 8004156:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f1      	bne.n	8004142 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800415e:	4b13      	ldr	r3, [pc, #76]	; (80041ac <xTaskResumeAll+0x1f0>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <xTaskResumeAll+0x1ec>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d009      	beq.n	8004180 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800416c:	2301      	movs	r3, #1
 800416e:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <xTaskResumeAll+0x1f4>)
 8004172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004180:	f001 faa2 	bl	80056c8 <vPortExitCritical>

    return xAlreadyYielded;
 8004184:	69bb      	ldr	r3, [r7, #24]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000290 	.word	0x20000290
 8004194:	20000268 	.word	0x20000268
 8004198:	20000228 	.word	0x20000228
 800419c:	20000270 	.word	0x20000270
 80041a0:	20000194 	.word	0x20000194
 80041a4:	20000190 	.word	0x20000190
 80041a8:	2000027c 	.word	0x2000027c
 80041ac:	20000278 	.word	0x20000278
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <xTaskGetTickCount+0x1c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80041c0:	687b      	ldr	r3, [r7, #4]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	2000026c 	.word	0x2000026c

080041d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041de:	4b7d      	ldr	r3, [pc, #500]	; (80043d4 <xTaskIncrementTick+0x200>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 80ec 	bne.w	80043c0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041e8:	4b7b      	ldr	r3, [pc, #492]	; (80043d8 <xTaskIncrementTick+0x204>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3301      	adds	r3, #1
 80041ee:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80041f0:	4a79      	ldr	r2, [pc, #484]	; (80043d8 <xTaskIncrementTick+0x204>)
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d120      	bne.n	800423e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80041fc:	4b77      	ldr	r3, [pc, #476]	; (80043dc <xTaskIncrementTick+0x208>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <xTaskIncrementTick+0x48>
        __asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	607b      	str	r3, [r7, #4]
    }
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xTaskIncrementTick+0x46>
 800421c:	4b6f      	ldr	r3, [pc, #444]	; (80043dc <xTaskIncrementTick+0x208>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	4b6f      	ldr	r3, [pc, #444]	; (80043e0 <xTaskIncrementTick+0x20c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a6d      	ldr	r2, [pc, #436]	; (80043dc <xTaskIncrementTick+0x208>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4a6d      	ldr	r2, [pc, #436]	; (80043e0 <xTaskIncrementTick+0x20c>)
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4b6c      	ldr	r3, [pc, #432]	; (80043e4 <xTaskIncrementTick+0x210>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a6b      	ldr	r2, [pc, #428]	; (80043e4 <xTaskIncrementTick+0x210>)
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	f000 fb9b 	bl	8004974 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800423e:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <xTaskIncrementTick+0x214>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a3a      	ldr	r2, [r7, #32]
 8004244:	429a      	cmp	r2, r3
 8004246:	f0c0 80a6 	bcc.w	8004396 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800424a:	4b64      	ldr	r3, [pc, #400]	; (80043dc <xTaskIncrementTick+0x208>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004254:	4b64      	ldr	r3, [pc, #400]	; (80043e8 <xTaskIncrementTick+0x214>)
 8004256:	f04f 32ff 	mov.w	r2, #4294967295
 800425a:	601a      	str	r2, [r3, #0]
                    break;
 800425c:	e09b      	b.n	8004396 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800425e:	4b5f      	ldr	r3, [pc, #380]	; (80043dc <xTaskIncrementTick+0x208>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800426e:	6a3a      	ldr	r2, [r7, #32]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	429a      	cmp	r2, r3
 8004274:	d203      	bcs.n	800427e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004276:	4a5c      	ldr	r2, [pc, #368]	; (80043e8 <xTaskIncrementTick+0x214>)
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800427c:	e08b      	b.n	8004396 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	68d2      	ldr	r2, [r2, #12]
 800428c:	609a      	str	r2, [r3, #8]
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	6892      	ldr	r2, [r2, #8]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	3304      	adds	r3, #4
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d103      	bne.n	80042ac <xTaskIncrementTick+0xd8>
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	605a      	str	r2, [r3, #4]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2200      	movs	r2, #0
 80042b0:	615a      	str	r2, [r3, #20]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	1e5a      	subs	r2, r3, #1
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01e      	beq.n	8004302 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	6a12      	ldr	r2, [r2, #32]
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	69d2      	ldr	r2, [r2, #28]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	3318      	adds	r3, #24
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d103      	bne.n	80042f2 <xTaskIncrementTick+0x11e>
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	6a1a      	ldr	r2, [r3, #32]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2200      	movs	r2, #0
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	2201      	movs	r2, #1
 8004308:	409a      	lsls	r2, r3
 800430a:	4b38      	ldr	r3, [pc, #224]	; (80043ec <xTaskIncrementTick+0x218>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	4a36      	ldr	r2, [pc, #216]	; (80043ec <xTaskIncrementTick+0x218>)
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004318:	4935      	ldr	r1, [pc, #212]	; (80043f0 <xTaskIncrementTick+0x21c>)
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	3304      	adds	r3, #4
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	60da      	str	r2, [r3, #12]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	3204      	adds	r2, #4
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	1d1a      	adds	r2, r3, #4
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4a26      	ldr	r2, [pc, #152]	; (80043f0 <xTaskIncrementTick+0x21c>)
 8004358:	441a      	add	r2, r3
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	615a      	str	r2, [r3, #20]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4923      	ldr	r1, [pc, #140]	; (80043f0 <xTaskIncrementTick+0x21c>)
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	1c59      	adds	r1, r3, #1
 8004372:	481f      	ldr	r0, [pc, #124]	; (80043f0 <xTaskIncrementTick+0x21c>)
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4403      	add	r3, r0
 800437e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <xTaskIncrementTick+0x220>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438a:	429a      	cmp	r2, r3
 800438c:	f4ff af5d 	bcc.w	800424a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8004390:	2301      	movs	r3, #1
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004394:	e759      	b.n	800424a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004396:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <xTaskIncrementTick+0x220>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800439c:	4914      	ldr	r1, [pc, #80]	; (80043f0 <xTaskIncrementTick+0x21c>)
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d901      	bls.n	80043b2 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80043ae:	2301      	movs	r3, #1
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80043b2:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <xTaskIncrementTick+0x224>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
 80043be:	e004      	b.n	80043ca <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <xTaskIncrementTick+0x228>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a0d      	ldr	r2, [pc, #52]	; (80043fc <xTaskIncrementTick+0x228>)
 80043c8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3728      	adds	r7, #40	; 0x28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000290 	.word	0x20000290
 80043d8:	2000026c 	.word	0x2000026c
 80043dc:	20000220 	.word	0x20000220
 80043e0:	20000224 	.word	0x20000224
 80043e4:	20000280 	.word	0x20000280
 80043e8:	20000288 	.word	0x20000288
 80043ec:	20000270 	.word	0x20000270
 80043f0:	20000194 	.word	0x20000194
 80043f4:	20000190 	.word	0x20000190
 80043f8:	2000027c 	.word	0x2000027c
 80043fc:	20000278 	.word	0x20000278

08004400 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004406:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <vTaskSwitchContext+0xa4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <vTaskSwitchContext+0xa8>)
 8004410:	2201      	movs	r2, #1
 8004412:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004414:	e03f      	b.n	8004496 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004416:	4b24      	ldr	r3, [pc, #144]	; (80044a8 <vTaskSwitchContext+0xa8>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <vTaskSwitchContext+0xac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	fab3 f383 	clz	r3, r3
 8004428:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800442a:	7afb      	ldrb	r3, [r7, #11]
 800442c:	f1c3 031f 	rsb	r3, r3, #31
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	491f      	ldr	r1, [pc, #124]	; (80044b0 <vTaskSwitchContext+0xb0>)
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10a      	bne.n	800445c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	607b      	str	r3, [r7, #4]
    }
 8004458:	bf00      	nop
 800445a:	e7fe      	b.n	800445a <vTaskSwitchContext+0x5a>
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <vTaskSwitchContext+0xb0>)
 8004468:	4413      	add	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3308      	adds	r3, #8
 800447e:	429a      	cmp	r2, r3
 8004480:	d104      	bne.n	800448c <vTaskSwitchContext+0x8c>
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	605a      	str	r2, [r3, #4]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <vTaskSwitchContext+0xb4>)
 8004494:	6013      	str	r3, [r2, #0]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000290 	.word	0x20000290
 80044a8:	2000027c 	.word	0x2000027c
 80044ac:	20000270 	.word	0x20000270
 80044b0:	20000194 	.word	0x20000194
 80044b4:	20000190 	.word	0x20000190

080044b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60fb      	str	r3, [r7, #12]
    }
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <vTaskPlaceOnEventList+0x44>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3318      	adds	r3, #24
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fe fcc9 	bl	8002e7e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044ec:	2101      	movs	r1, #1
 80044ee:	6838      	ldr	r0, [r7, #0]
 80044f0:	f000 fc88 	bl	8004e04 <prvAddCurrentTaskToDelayedList>
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000190 	.word	0x20000190

08004500 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	613b      	str	r3, [r7, #16]
    }
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	617b      	str	r3, [r7, #20]
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <vTaskPlaceOnEventListRestricted+0x88>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	61da      	str	r2, [r3, #28]
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <vTaskPlaceOnEventListRestricted+0x88>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	6892      	ldr	r2, [r2, #8]
 800453e:	621a      	str	r2, [r3, #32]
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <vTaskPlaceOnEventListRestricted+0x88>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	3218      	adds	r2, #24
 800454a:	605a      	str	r2, [r3, #4]
 800454c:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <vTaskPlaceOnEventListRestricted+0x88>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f103 0218 	add.w	r2, r3, #24
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <vTaskPlaceOnEventListRestricted+0x88>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	629a      	str	r2, [r3, #40]	; 0x28
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004570:	f04f 33ff 	mov.w	r3, #4294967295
 8004574:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	68b8      	ldr	r0, [r7, #8]
 800457a:	f000 fc43 	bl	8004e04 <prvAddCurrentTaskToDelayedList>
    }
 800457e:	bf00      	nop
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000190 	.word	0x20000190

0800458c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800458c:	b480      	push	{r7}
 800458e:	b08b      	sub	sp, #44	; 0x2c
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	60fb      	str	r3, [r7, #12]
    }
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	6a3a      	ldr	r2, [r7, #32]
 80045c4:	6a12      	ldr	r2, [r2, #32]
 80045c6:	609a      	str	r2, [r3, #8]
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	69d2      	ldr	r2, [r2, #28]
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	3318      	adds	r3, #24
 80045da:	429a      	cmp	r2, r3
 80045dc:	d103      	bne.n	80045e6 <xTaskRemoveFromEventList+0x5a>
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	2200      	movs	r2, #0
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1e5a      	subs	r2, r3, #1
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045f6:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <xTaskRemoveFromEventList+0x194>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d15e      	bne.n	80046bc <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	68d2      	ldr	r2, [r2, #12]
 800460c:	609a      	str	r2, [r3, #8]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	6a3a      	ldr	r2, [r7, #32]
 8004614:	6892      	ldr	r2, [r2, #8]
 8004616:	605a      	str	r2, [r3, #4]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	3304      	adds	r3, #4
 8004620:	429a      	cmp	r2, r3
 8004622:	d103      	bne.n	800462c <xTaskRemoveFromEventList+0xa0>
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	2200      	movs	r2, #0
 8004630:	615a      	str	r2, [r3, #20]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	1e5a      	subs	r2, r3, #1
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	2201      	movs	r2, #1
 8004642:	409a      	lsls	r2, r3
 8004644:	4b37      	ldr	r3, [pc, #220]	; (8004724 <xTaskRemoveFromEventList+0x198>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4313      	orrs	r3, r2
 800464a:	4a36      	ldr	r2, [pc, #216]	; (8004724 <xTaskRemoveFromEventList+0x198>)
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	4935      	ldr	r1, [pc, #212]	; (8004728 <xTaskRemoveFromEventList+0x19c>)
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3304      	adds	r3, #4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	609a      	str	r2, [r3, #8]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	3204      	adds	r2, #4
 800467a:	605a      	str	r2, [r3, #4]
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	1d1a      	adds	r2, r3, #4
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	609a      	str	r2, [r3, #8]
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4a25      	ldr	r2, [pc, #148]	; (8004728 <xTaskRemoveFromEventList+0x19c>)
 8004692:	441a      	add	r2, r3
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	615a      	str	r2, [r3, #20]
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469c:	4922      	ldr	r1, [pc, #136]	; (8004728 <xTaskRemoveFromEventList+0x19c>)
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	481e      	ldr	r0, [pc, #120]	; (8004728 <xTaskRemoveFromEventList+0x19c>)
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4403      	add	r3, r0
 80046b8:	6019      	str	r1, [r3, #0]
 80046ba:	e01b      	b.n	80046f4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <xTaskRemoveFromEventList+0x1a0>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	6a3b      	ldr	r3, [r7, #32]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	61da      	str	r2, [r3, #28]
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	621a      	str	r2, [r3, #32]
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	6a3a      	ldr	r2, [r7, #32]
 80046d6:	3218      	adds	r2, #24
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f103 0218 	add.w	r2, r3, #24
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	4a11      	ldr	r2, [pc, #68]	; (800472c <xTaskRemoveFromEventList+0x1a0>)
 80046e8:	629a      	str	r2, [r3, #40]	; 0x28
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <xTaskRemoveFromEventList+0x1a0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3301      	adds	r3, #1
 80046f0:	4a0e      	ldr	r2, [pc, #56]	; (800472c <xTaskRemoveFromEventList+0x1a0>)
 80046f2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <xTaskRemoveFromEventList+0x1a4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	429a      	cmp	r2, r3
 8004700:	d905      	bls.n	800470e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004702:	2301      	movs	r3, #1
 8004704:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <xTaskRemoveFromEventList+0x1a8>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e001      	b.n	8004712 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004714:	4618      	mov	r0, r3
 8004716:	372c      	adds	r7, #44	; 0x2c
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	20000290 	.word	0x20000290
 8004724:	20000270 	.word	0x20000270
 8004728:	20000194 	.word	0x20000194
 800472c:	20000228 	.word	0x20000228
 8004730:	20000190 	.word	0x20000190
 8004734:	2000027c 	.word	0x2000027c

08004738 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <vTaskInternalSetTimeOutState+0x24>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <vTaskInternalSetTimeOutState+0x28>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	605a      	str	r2, [r3, #4]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	20000280 	.word	0x20000280
 8004760:	2000026c 	.word	0x2000026c

08004764 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	613b      	str	r3, [r7, #16]
    }
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	60fb      	str	r3, [r7, #12]
    }
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80047a6:	f000 ff5f 	bl	8005668 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80047aa:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <xTaskCheckForTimeOut+0xc4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d102      	bne.n	80047ca <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	e026      	b.n	8004818 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	4b17      	ldr	r3, [pc, #92]	; (800482c <xTaskCheckForTimeOut+0xc8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d00a      	beq.n	80047ec <xTaskCheckForTimeOut+0x88>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d305      	bcc.n	80047ec <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e015      	b.n	8004818 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d20b      	bcs.n	800480e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	1ad2      	subs	r2, r2, r3
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff ff98 	bl	8004738 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004808:	2300      	movs	r3, #0
 800480a:	61fb      	str	r3, [r7, #28]
 800480c:	e004      	b.n	8004818 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004814:	2301      	movs	r3, #1
 8004816:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004818:	f000 ff56 	bl	80056c8 <vPortExitCritical>

    return xReturn;
 800481c:	69fb      	ldr	r3, [r7, #28]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3720      	adds	r7, #32
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	2000026c 	.word	0x2000026c
 800482c:	20000280 	.word	0x20000280

08004830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004834:	4b03      	ldr	r3, [pc, #12]	; (8004844 <vTaskMissedYield+0x14>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]
}
 800483a:	bf00      	nop
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	2000027c 	.word	0x2000027c

08004848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004850:	f000 f852 	bl	80048f8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <prvIdleTask+0x28>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d9f9      	bls.n	8004850 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800485c:	4b05      	ldr	r3, [pc, #20]	; (8004874 <prvIdleTask+0x2c>)
 800485e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800486c:	e7f0      	b.n	8004850 <prvIdleTask+0x8>
 800486e:	bf00      	nop
 8004870:	20000194 	.word	0x20000194
 8004874:	e000ed04 	.word	0xe000ed04

08004878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800487e:	2300      	movs	r3, #0
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	e00c      	b.n	800489e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <prvInitialiseTaskLists+0x60>)
 8004890:	4413      	add	r3, r2
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fac6 	bl	8002e24 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3301      	adds	r3, #1
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d9ef      	bls.n	8004884 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80048a4:	480d      	ldr	r0, [pc, #52]	; (80048dc <prvInitialiseTaskLists+0x64>)
 80048a6:	f7fe fabd 	bl	8002e24 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80048aa:	480d      	ldr	r0, [pc, #52]	; (80048e0 <prvInitialiseTaskLists+0x68>)
 80048ac:	f7fe faba 	bl	8002e24 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80048b0:	480c      	ldr	r0, [pc, #48]	; (80048e4 <prvInitialiseTaskLists+0x6c>)
 80048b2:	f7fe fab7 	bl	8002e24 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80048b6:	480c      	ldr	r0, [pc, #48]	; (80048e8 <prvInitialiseTaskLists+0x70>)
 80048b8:	f7fe fab4 	bl	8002e24 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80048bc:	480b      	ldr	r0, [pc, #44]	; (80048ec <prvInitialiseTaskLists+0x74>)
 80048be:	f7fe fab1 	bl	8002e24 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <prvInitialiseTaskLists+0x78>)
 80048c4:	4a05      	ldr	r2, [pc, #20]	; (80048dc <prvInitialiseTaskLists+0x64>)
 80048c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <prvInitialiseTaskLists+0x7c>)
 80048ca:	4a05      	ldr	r2, [pc, #20]	; (80048e0 <prvInitialiseTaskLists+0x68>)
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000194 	.word	0x20000194
 80048dc:	200001f8 	.word	0x200001f8
 80048e0:	2000020c 	.word	0x2000020c
 80048e4:	20000228 	.word	0x20000228
 80048e8:	2000023c 	.word	0x2000023c
 80048ec:	20000254 	.word	0x20000254
 80048f0:	20000220 	.word	0x20000220
 80048f4:	20000224 	.word	0x20000224

080048f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048fe:	e019      	b.n	8004934 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004900:	f000 feb2 	bl	8005668 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004904:	4b10      	ldr	r3, [pc, #64]	; (8004948 <prvCheckTasksWaitingTermination+0x50>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3304      	adds	r3, #4
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe faed 	bl	8002ef0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004916:	4b0d      	ldr	r3, [pc, #52]	; (800494c <prvCheckTasksWaitingTermination+0x54>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3b01      	subs	r3, #1
 800491c:	4a0b      	ldr	r2, [pc, #44]	; (800494c <prvCheckTasksWaitingTermination+0x54>)
 800491e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <prvCheckTasksWaitingTermination+0x58>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3b01      	subs	r3, #1
 8004926:	4a0a      	ldr	r2, [pc, #40]	; (8004950 <prvCheckTasksWaitingTermination+0x58>)
 8004928:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800492a:	f000 fecd 	bl	80056c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f810 	bl	8004954 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <prvCheckTasksWaitingTermination+0x58>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e1      	bne.n	8004900 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	2000023c 	.word	0x2000023c
 800494c:	20000268 	.word	0x20000268
 8004950:	20000250 	.word	0x20000250

08004954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	4618      	mov	r0, r3
 8004962:	f001 f883 	bl	8005a6c <vPortFree>
                vPortFree( pxTCB );
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 f880 	bl	8005a6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800496c:	bf00      	nop
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004978:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <prvResetNextTaskUnblockTime+0x30>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004982:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <prvResetNextTaskUnblockTime+0x34>)
 8004984:	f04f 32ff 	mov.w	r2, #4294967295
 8004988:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800498a:	e005      	b.n	8004998 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <prvResetNextTaskUnblockTime+0x30>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <prvResetNextTaskUnblockTime+0x34>)
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000220 	.word	0x20000220
 80049a8:	20000288 	.word	0x20000288

080049ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <xTaskGetSchedulerState+0x34>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d102      	bne.n	80049c0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80049ba:	2301      	movs	r3, #1
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	e008      	b.n	80049d2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <xTaskGetSchedulerState+0x38>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80049c8:	2302      	movs	r3, #2
 80049ca:	607b      	str	r3, [r7, #4]
 80049cc:	e001      	b.n	80049d2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80049d2:	687b      	ldr	r3, [r7, #4]
    }
 80049d4:	4618      	mov	r0, r3
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20000274 	.word	0x20000274
 80049e4:	20000290 	.word	0x20000290

080049e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8087 	beq.w	8004b0e <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a04:	4b44      	ldr	r3, [pc, #272]	; (8004b18 <xTaskPriorityInherit+0x130>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d276      	bcs.n	8004afc <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db06      	blt.n	8004a24 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a16:	4b40      	ldr	r3, [pc, #256]	; (8004b18 <xTaskPriorityInherit+0x130>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1c:	f1c3 0205 	rsb	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	6959      	ldr	r1, [r3, #20]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4a39      	ldr	r2, [pc, #228]	; (8004b1c <xTaskPriorityInherit+0x134>)
 8004a36:	4413      	add	r3, r2
 8004a38:	4299      	cmp	r1, r3
 8004a3a:	d157      	bne.n	8004aec <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fe fa55 	bl	8002ef0 <uxListRemove>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	2201      	movs	r2, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43da      	mvns	r2, r3
 8004a58:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <xTaskPriorityInherit+0x138>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	4a30      	ldr	r2, [pc, #192]	; (8004b20 <xTaskPriorityInherit+0x138>)
 8004a60:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <xTaskPriorityInherit+0x130>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	2201      	movs	r2, #1
 8004a72:	409a      	lsls	r2, r3
 8004a74:	4b2a      	ldr	r3, [pc, #168]	; (8004b20 <xTaskPriorityInherit+0x138>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	4a29      	ldr	r2, [pc, #164]	; (8004b20 <xTaskPriorityInherit+0x138>)
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	4926      	ldr	r1, [pc, #152]	; (8004b1c <xTaskPriorityInherit+0x134>)
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	3304      	adds	r3, #4
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	609a      	str	r2, [r3, #8]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	3204      	adds	r2, #4
 8004aaa:	605a      	str	r2, [r3, #4]
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1d1a      	adds	r2, r3, #4
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4a16      	ldr	r2, [pc, #88]	; (8004b1c <xTaskPriorityInherit+0x134>)
 8004ac2:	441a      	add	r2, r3
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	615a      	str	r2, [r3, #20]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	4913      	ldr	r1, [pc, #76]	; (8004b1c <xTaskPriorityInherit+0x134>)
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	480f      	ldr	r0, [pc, #60]	; (8004b1c <xTaskPriorityInherit+0x134>)
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4403      	add	r3, r0
 8004ae8:	6019      	str	r1, [r3, #0]
 8004aea:	e004      	b.n	8004af6 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <xTaskPriorityInherit+0x130>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004af6:	2301      	movs	r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e008      	b.n	8004b0e <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <xTaskPriorityInherit+0x130>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d201      	bcs.n	8004b0e <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004b0e:	697b      	ldr	r3, [r7, #20]
    }
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000190 	.word	0x20000190
 8004b1c:	20000194 	.word	0x20000194
 8004b20:	20000270 	.word	0x20000270

08004b24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b088      	sub	sp, #32
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 808c 	beq.w	8004c54 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004b3c:	4b48      	ldr	r3, [pc, #288]	; (8004c60 <xTaskPriorityDisinherit+0x13c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d00a      	beq.n	8004b5c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	613b      	str	r3, [r7, #16]
    }
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	60fb      	str	r3, [r7, #12]
    }
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7e:	1e5a      	subs	r2, r3, #1
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d061      	beq.n	8004c54 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d15d      	bne.n	8004c54 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fe f9a7 	bl	8002ef0 <uxListRemove>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	2201      	movs	r2, #1
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	4b2b      	ldr	r3, [pc, #172]	; (8004c64 <xTaskPriorityDisinherit+0x140>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	4a2a      	ldr	r2, [pc, #168]	; (8004c64 <xTaskPriorityDisinherit+0x140>)
 8004bbc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f1c3 0205 	rsb	r2, r3, #5
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <xTaskPriorityDisinherit+0x140>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	4a20      	ldr	r2, [pc, #128]	; (8004c64 <xTaskPriorityDisinherit+0x140>)
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be8:	491f      	ldr	r1, [pc, #124]	; (8004c68 <xTaskPriorityDisinherit+0x144>)
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	60da      	str	r2, [r3, #12]
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	3204      	adds	r2, #4
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	1d1a      	adds	r2, r3, #4
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	609a      	str	r2, [r3, #8]
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4a10      	ldr	r2, [pc, #64]	; (8004c68 <xTaskPriorityDisinherit+0x144>)
 8004c28:	441a      	add	r2, r3
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	615a      	str	r2, [r3, #20]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c32:	490d      	ldr	r1, [pc, #52]	; (8004c68 <xTaskPriorityDisinherit+0x144>)
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	1c59      	adds	r1, r3, #1
 8004c42:	4809      	ldr	r0, [pc, #36]	; (8004c68 <xTaskPriorityDisinherit+0x144>)
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4403      	add	r3, r0
 8004c4e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004c54:	69fb      	ldr	r3, [r7, #28]
    }
 8004c56:	4618      	mov	r0, r3
 8004c58:	3720      	adds	r7, #32
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000190 	.word	0x20000190
 8004c64:	20000270 	.word	0x20000270
 8004c68:	20000194 	.word	0x20000194

08004c6c <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b08a      	sub	sp, #40	; 0x28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80a1 	beq.w	8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	613b      	str	r3, [r7, #16]
    }
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d902      	bls.n	8004cb4 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	e002      	b.n	8004cba <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	f000 8081 	beq.w	8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d17b      	bne.n	8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004cd0:	4b3f      	ldr	r3, [pc, #252]	; (8004dd0 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6a3a      	ldr	r2, [r7, #32]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10a      	bne.n	8004cf0 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	60fb      	str	r3, [r7, #12]
    }
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfa:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	db04      	blt.n	8004d0e <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	f1c3 0205 	rsb	r2, r3, #5
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	6959      	ldr	r1, [r3, #20]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	4299      	cmp	r1, r3
 8004d22:	d151      	bne.n	8004dc8 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fe f8e1 	bl	8002ef0 <uxListRemove>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	2201      	movs	r2, #1
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43da      	mvns	r2, r3
 8004d40:	4b25      	ldr	r3, [pc, #148]	; (8004dd8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4013      	ands	r3, r2
 8004d46:	4a24      	ldr	r2, [pc, #144]	; (8004dd8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004d48:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	2201      	movs	r2, #1
 8004d50:	409a      	lsls	r2, r3
 8004d52:	4b21      	ldr	r3, [pc, #132]	; (8004dd8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d60:	491c      	ldr	r1, [pc, #112]	; (8004dd4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	60da      	str	r2, [r3, #12]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	3204      	adds	r2, #4
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	1d1a      	adds	r2, r3, #4
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	609a      	str	r2, [r3, #8]
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	4613      	mov	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4a0d      	ldr	r2, [pc, #52]	; (8004dd4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004da0:	441a      	add	r2, r3
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	615a      	str	r2, [r3, #20]
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004daa:	490a      	ldr	r1, [pc, #40]	; (8004dd4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	1c59      	adds	r1, r3, #1
 8004dba:	4806      	ldr	r0, [pc, #24]	; (8004dd4 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4403      	add	r3, r0
 8004dc6:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004dc8:	bf00      	nop
 8004dca:	3728      	adds	r7, #40	; 0x28
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20000190 	.word	0x20000190
 8004dd4:	20000194 	.word	0x20000194
 8004dd8:	20000270 	.word	0x20000270

08004ddc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dee:	3201      	adds	r2, #1
 8004df0:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004df2:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <pvTaskIncrementMutexHeldCount+0x24>)
 8004df4:	681b      	ldr	r3, [r3, #0]
    }
 8004df6:	4618      	mov	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	20000190 	.word	0x20000190

08004e04 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004e0e:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e14:	4b35      	ldr	r3, [pc, #212]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe f868 	bl	8002ef0 <uxListRemove>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e26:	4b31      	ldr	r3, [pc, #196]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43da      	mvns	r2, r3
 8004e34:	4b2e      	ldr	r3, [pc, #184]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xec>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	4a2d      	ldr	r2, [pc, #180]	; (8004ef0 <prvAddCurrentTaskToDelayedList+0xec>)
 8004e3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d124      	bne.n	8004e90 <prvAddCurrentTaskToDelayedList+0x8c>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d021      	beq.n	8004e90 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e4c:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	4b26      	ldr	r3, [pc, #152]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	609a      	str	r2, [r3, #8]
 8004e5a:	4b24      	ldr	r3, [pc, #144]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	60da      	str	r2, [r3, #12]
 8004e64:	4b21      	ldr	r3, [pc, #132]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	3204      	adds	r2, #4
 8004e6e:	605a      	str	r2, [r3, #4]
 8004e70:	4b1e      	ldr	r3, [pc, #120]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	1d1a      	adds	r2, r3, #4
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	609a      	str	r2, [r3, #8]
 8004e7a:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004e80:	615a      	str	r2, [r3, #20]
 8004e82:	4b1c      	ldr	r3, [pc, #112]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3301      	adds	r3, #1
 8004e88:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004e8e:	e026      	b.n	8004ede <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e98:	4b14      	ldr	r3, [pc, #80]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d209      	bcs.n	8004ebc <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ea8:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f7fd ffe2 	bl	8002e7e <vListInsert>
}
 8004eba:	e010      	b.n	8004ede <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <prvAddCurrentTaskToDelayedList+0xf8>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7fd ffd8 	bl	8002e7e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d202      	bcs.n	8004ede <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8004ed8:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6013      	str	r3, [r2, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2000026c 	.word	0x2000026c
 8004eec:	20000190 	.word	0x20000190
 8004ef0:	20000270 	.word	0x20000270
 8004ef4:	20000254 	.word	0x20000254
 8004ef8:	20000224 	.word	0x20000224
 8004efc:	20000220 	.word	0x20000220
 8004f00:	20000288 	.word	0x20000288

08004f04 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004f0e:	f000 fa47 	bl	80053a0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004f12:	4b11      	ldr	r3, [pc, #68]	; (8004f58 <xTimerCreateTimerTask+0x54>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004f1a:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <xTimerCreateTimerTask+0x58>)
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	2302      	movs	r3, #2
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	2300      	movs	r3, #0
 8004f24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f28:	490d      	ldr	r1, [pc, #52]	; (8004f60 <xTimerCreateTimerTask+0x5c>)
 8004f2a:	480e      	ldr	r0, [pc, #56]	; (8004f64 <xTimerCreateTimerTask+0x60>)
 8004f2c:	f7fe fe6a 	bl	8003c04 <xTaskCreate>
 8004f30:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	603b      	str	r3, [r7, #0]
    }
 8004f4a:	bf00      	nop
 8004f4c:	e7fe      	b.n	8004f4c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004f4e:	687b      	ldr	r3, [r7, #4]
    }
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	200002c4 	.word	0x200002c4
 8004f5c:	200002c8 	.word	0x200002c8
 8004f60:	08007280 	.word	0x08007280
 8004f64:	0800500d 	.word	0x0800500d

08004f68 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004f74:	e008      	b.n	8004f88 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	699a      	ldr	r2, [r3, #24]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	18d1      	adds	r1, r2, r3
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f8dd 	bl	8005154 <prvInsertTimerInActiveList>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1ea      	bne.n	8004f76 <prvReloadTimer+0xe>
        }
    }
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb6:	4b14      	ldr	r3, [pc, #80]	; (8005008 <prvProcessExpiredTimer+0x5c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fd ff93 	bl	8002ef0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f7ff ffc3 	bl	8004f68 <prvReloadTimer>
 8004fe2:	e008      	b.n	8004ff6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fea:	f023 0301 	bic.w	r3, r3, #1
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	4798      	blx	r3
    }
 8004ffe:	bf00      	nop
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	200002bc 	.word	0x200002bc

0800500c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005014:	f107 0308 	add.w	r3, r7, #8
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f857 	bl	80050cc <prvGetNextExpireTime>
 800501e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4619      	mov	r1, r3
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f803 	bl	8005030 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800502a:	f000 f8d5 	bl	80051d8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800502e:	e7f1      	b.n	8005014 <prvTimerTask+0x8>

08005030 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800503a:	f7fe ffb1 	bl	8003fa0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800503e:	f107 0308 	add.w	r3, r7, #8
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f866 	bl	8005114 <prvSampleTimeNow>
 8005048:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d130      	bne.n	80050b2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <prvProcessTimerOrBlockTask+0x3c>
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	429a      	cmp	r2, r3
 800505c:	d806      	bhi.n	800506c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800505e:	f7fe ffad 	bl	8003fbc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ffa1 	bl	8004fac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800506a:	e024      	b.n	80050b6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005072:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <prvProcessTimerOrBlockTask+0x90>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <prvProcessTimerOrBlockTask+0x50>
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <prvProcessTimerOrBlockTask+0x52>
 8005080:	2300      	movs	r3, #0
 8005082:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005084:	4b0f      	ldr	r3, [pc, #60]	; (80050c4 <prvProcessTimerOrBlockTask+0x94>)
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	f7fe fd83 	bl	8003b9c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005096:	f7fe ff91 	bl	8003fbc <xTaskResumeAll>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <prvProcessTimerOrBlockTask+0x98>)
 80050a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	f3bf 8f6f 	isb	sy
    }
 80050b0:	e001      	b.n	80050b6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80050b2:	f7fe ff83 	bl	8003fbc <xTaskResumeAll>
    }
 80050b6:	bf00      	nop
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	200002c0 	.word	0x200002c0
 80050c4:	200002c4 	.word	0x200002c4
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050d4:	4b0e      	ldr	r3, [pc, #56]	; (8005110 <prvGetNextExpireTime+0x44>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <prvGetNextExpireTime+0x16>
 80050de:	2201      	movs	r2, #1
 80050e0:	e000      	b.n	80050e4 <prvGetNextExpireTime+0x18>
 80050e2:	2200      	movs	r2, #0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d105      	bne.n	80050fc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <prvGetNextExpireTime+0x44>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	e001      	b.n	8005100 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005100:	68fb      	ldr	r3, [r7, #12]
    }
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	200002bc 	.word	0x200002bc

08005114 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800511c:	f7ff f84a 	bl	80041b4 <xTaskGetTickCount>
 8005120:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <prvSampleTimeNow+0x3c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	429a      	cmp	r2, r3
 800512a:	d205      	bcs.n	8005138 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800512c:	f000 f912 	bl	8005354 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	e002      	b.n	800513e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800513e:	4a04      	ldr	r2, [pc, #16]	; (8005150 <prvSampleTimeNow+0x3c>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005144:	68fb      	ldr	r3, [r7, #12]
    }
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200002cc 	.word	0x200002cc

08005154 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d812      	bhi.n	80051a0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	429a      	cmp	r2, r3
 8005186:	d302      	bcc.n	800518e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005188:	2301      	movs	r3, #1
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e01b      	b.n	80051c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800518e:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <prvInsertTimerInActiveList+0x7c>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f7fd fe70 	bl	8002e7e <vListInsert>
 800519e:	e012      	b.n	80051c6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d206      	bcs.n	80051b6 <prvInsertTimerInActiveList+0x62>
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d302      	bcc.n	80051b6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80051b0:	2301      	movs	r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e007      	b.n	80051c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <prvInsertTimerInActiveList+0x80>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3304      	adds	r3, #4
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f7fd fe5c 	bl	8002e7e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80051c6:	697b      	ldr	r3, [r7, #20]
    }
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	200002c0 	.word	0x200002c0
 80051d4:	200002bc 	.word	0x200002bc

080051d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051de:	e0a6      	b.n	800532e <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f2c0 80a2 	blt.w	800532c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d004      	beq.n	80051fe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fd fe79 	bl	8002ef0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051fe:	1d3b      	adds	r3, r7, #4
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff ff87 	bl	8005114 <prvSampleTimeNow>
 8005206:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	3b01      	subs	r3, #1
 800520c:	2b08      	cmp	r3, #8
 800520e:	f200 808e 	bhi.w	800532e <prvProcessReceivedCommands+0x156>
 8005212:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <prvProcessReceivedCommands+0x40>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	0800523d 	.word	0x0800523d
 800521c:	0800523d 	.word	0x0800523d
 8005220:	080052a5 	.word	0x080052a5
 8005224:	080052b9 	.word	0x080052b9
 8005228:	08005303 	.word	0x08005303
 800522c:	0800523d 	.word	0x0800523d
 8005230:	0800523d 	.word	0x0800523d
 8005234:	080052a5 	.word	0x080052a5
 8005238:	080052b9 	.word	0x080052b9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005242:	f043 0301 	orr.w	r3, r3, #1
 8005246:	b2da      	uxtb	r2, r3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	18d1      	adds	r1, r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	69f8      	ldr	r0, [r7, #28]
 800525c:	f7ff ff7a 	bl	8005154 <prvInsertTimerInActiveList>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d063      	beq.n	800532e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	4413      	add	r3, r2
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4619      	mov	r1, r3
 8005280:	69f8      	ldr	r0, [r7, #28]
 8005282:	f7ff fe71 	bl	8004f68 <prvReloadTimer>
 8005286:	e008      	b.n	800529a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	b2da      	uxtb	r2, r3
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	69f8      	ldr	r0, [r7, #28]
 80052a0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80052a2:	e044      	b.n	800532e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052aa:	f023 0301 	bic.w	r3, r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80052b6:	e03a      	b.n	800532e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052be:	f043 0301 	orr.w	r3, r3, #1
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <prvProcessReceivedCommands+0x116>
        __asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	617b      	str	r3, [r7, #20]
    }
 80052ea:	bf00      	nop
 80052ec:	e7fe      	b.n	80052ec <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	18d1      	adds	r1, r2, r3
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	69f8      	ldr	r0, [r7, #28]
 80052fc:	f7ff ff2a 	bl	8005154 <prvInsertTimerInActiveList>
                        break;
 8005300:	e015      	b.n	800532e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8005310:	69f8      	ldr	r0, [r7, #28]
 8005312:	f000 fbab 	bl	8005a6c <vPortFree>
 8005316:	e00a      	b.n	800532e <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800532a:	e000      	b.n	800532e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800532c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800532e:	4b08      	ldr	r3, [pc, #32]	; (8005350 <prvProcessReceivedCommands+0x178>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f107 0108 	add.w	r1, r7, #8
 8005336:	2200      	movs	r2, #0
 8005338:	4618      	mov	r0, r3
 800533a:	f7fe f8cd 	bl	80034d8 <xQueueReceive>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f af4d 	bne.w	80051e0 <prvProcessReceivedCommands+0x8>
        }
    }
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	3720      	adds	r7, #32
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	200002c4 	.word	0x200002c4

08005354 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800535a:	e009      	b.n	8005370 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <prvSwitchTimerLists+0x44>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005366:	f04f 31ff 	mov.w	r1, #4294967295
 800536a:	6838      	ldr	r0, [r7, #0]
 800536c:	f7ff fe1e 	bl	8004fac <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005370:	4b09      	ldr	r3, [pc, #36]	; (8005398 <prvSwitchTimerLists+0x44>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f0      	bne.n	800535c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800537a:	4b07      	ldr	r3, [pc, #28]	; (8005398 <prvSwitchTimerLists+0x44>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <prvSwitchTimerLists+0x48>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a04      	ldr	r2, [pc, #16]	; (8005398 <prvSwitchTimerLists+0x44>)
 8005386:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005388:	4a04      	ldr	r2, [pc, #16]	; (800539c <prvSwitchTimerLists+0x48>)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6013      	str	r3, [r2, #0]
    }
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	200002bc 	.word	0x200002bc
 800539c:	200002c0 	.word	0x200002c0

080053a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80053a4:	f000 f960 	bl	8005668 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80053a8:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <prvCheckForValidListAndQueue+0x54>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d11d      	bne.n	80053ec <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80053b0:	4811      	ldr	r0, [pc, #68]	; (80053f8 <prvCheckForValidListAndQueue+0x58>)
 80053b2:	f7fd fd37 	bl	8002e24 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80053b6:	4811      	ldr	r0, [pc, #68]	; (80053fc <prvCheckForValidListAndQueue+0x5c>)
 80053b8:	f7fd fd34 	bl	8002e24 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80053bc:	4b10      	ldr	r3, [pc, #64]	; (8005400 <prvCheckForValidListAndQueue+0x60>)
 80053be:	4a0e      	ldr	r2, [pc, #56]	; (80053f8 <prvCheckForValidListAndQueue+0x58>)
 80053c0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <prvCheckForValidListAndQueue+0x64>)
 80053c4:	4a0d      	ldr	r2, [pc, #52]	; (80053fc <prvCheckForValidListAndQueue+0x5c>)
 80053c6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80053c8:	2200      	movs	r2, #0
 80053ca:	210c      	movs	r1, #12
 80053cc:	200a      	movs	r0, #10
 80053ce:	f7fd fe49 	bl	8003064 <xQueueGenericCreate>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <prvCheckForValidListAndQueue+0x54>)
 80053d6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <prvCheckForValidListAndQueue+0x54>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80053e0:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <prvCheckForValidListAndQueue+0x54>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4908      	ldr	r1, [pc, #32]	; (8005408 <prvCheckForValidListAndQueue+0x68>)
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fb8a 	bl	8003b00 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80053ec:	f000 f96c 	bl	80056c8 <vPortExitCritical>
    }
 80053f0:	bf00      	nop
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	200002c4 	.word	0x200002c4
 80053f8:	20000294 	.word	0x20000294
 80053fc:	200002a8 	.word	0x200002a8
 8005400:	200002bc 	.word	0x200002bc
 8005404:	200002c0 	.word	0x200002c0
 8005408:	08007288 	.word	0x08007288

0800540c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3b04      	subs	r3, #4
 800541c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005424:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3b04      	subs	r3, #4
 800542a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f023 0201 	bic.w	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3b04      	subs	r3, #4
 800543a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800543c:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <pxPortInitialiseStack+0x64>)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3b14      	subs	r3, #20
 8005446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3b04      	subs	r3, #4
 8005452:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f06f 0202 	mvn.w	r2, #2
 800545a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3b20      	subs	r3, #32
 8005460:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005462:	68fb      	ldr	r3, [r7, #12]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	08005475 	.word	0x08005475

08005474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800547e:	4b12      	ldr	r3, [pc, #72]	; (80054c8 <prvTaskExitError+0x54>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005486:	d00a      	beq.n	800549e <prvTaskExitError+0x2a>
        __asm volatile
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
 8005498:	60fb      	str	r3, [r7, #12]
    }
 800549a:	bf00      	nop
 800549c:	e7fe      	b.n	800549c <prvTaskExitError+0x28>
        __asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60bb      	str	r3, [r7, #8]
    }
 80054b0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80054b2:	bf00      	nop
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0fc      	beq.n	80054b4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80054ba:	bf00      	nop
 80054bc:	bf00      	nop
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	20000014 	.word	0x20000014
 80054cc:	00000000 	.word	0x00000000

080054d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <pxCurrentTCBConst2>)
 80054d2:	6819      	ldr	r1, [r3, #0]
 80054d4:	6808      	ldr	r0, [r1, #0]
 80054d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054da:	f380 8809 	msr	PSP, r0
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f380 8811 	msr	BASEPRI, r0
 80054ea:	4770      	bx	lr
 80054ec:	f3af 8000 	nop.w

080054f0 <pxCurrentTCBConst2>:
 80054f0:	20000190 	.word	0x20000190
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop

080054f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80054f8:	4808      	ldr	r0, [pc, #32]	; (800551c <prvPortStartFirstTask+0x24>)
 80054fa:	6800      	ldr	r0, [r0, #0]
 80054fc:	6800      	ldr	r0, [r0, #0]
 80054fe:	f380 8808 	msr	MSP, r0
 8005502:	f04f 0000 	mov.w	r0, #0
 8005506:	f380 8814 	msr	CONTROL, r0
 800550a:	b662      	cpsie	i
 800550c:	b661      	cpsie	f
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	df00      	svc	0
 8005518:	bf00      	nop
 800551a:	0000      	.short	0x0000
 800551c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005520:	bf00      	nop
 8005522:	bf00      	nop

08005524 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800552a:	4b46      	ldr	r3, [pc, #280]	; (8005644 <xPortStartScheduler+0x120>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a46      	ldr	r2, [pc, #280]	; (8005648 <xPortStartScheduler+0x124>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d10a      	bne.n	800554a <xPortStartScheduler+0x26>
        __asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	613b      	str	r3, [r7, #16]
    }
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800554a:	4b3e      	ldr	r3, [pc, #248]	; (8005644 <xPortStartScheduler+0x120>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a3f      	ldr	r2, [pc, #252]	; (800564c <xPortStartScheduler+0x128>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d10a      	bne.n	800556a <xPortStartScheduler+0x46>
        __asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	60fb      	str	r3, [r7, #12]
    }
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800556a:	4b39      	ldr	r3, [pc, #228]	; (8005650 <xPortStartScheduler+0x12c>)
 800556c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b2db      	uxtb	r3, r3
 8005574:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	b2db      	uxtb	r3, r3
 8005588:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800558c:	b2da      	uxtb	r2, r3
 800558e:	4b31      	ldr	r3, [pc, #196]	; (8005654 <xPortStartScheduler+0x130>)
 8005590:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005592:	4b31      	ldr	r3, [pc, #196]	; (8005658 <xPortStartScheduler+0x134>)
 8005594:	2207      	movs	r2, #7
 8005596:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005598:	e009      	b.n	80055ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800559a:	4b2f      	ldr	r3, [pc, #188]	; (8005658 <xPortStartScheduler+0x134>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3b01      	subs	r3, #1
 80055a0:	4a2d      	ldr	r2, [pc, #180]	; (8005658 <xPortStartScheduler+0x134>)
 80055a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b6:	2b80      	cmp	r3, #128	; 0x80
 80055b8:	d0ef      	beq.n	800559a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055ba:	4b27      	ldr	r3, [pc, #156]	; (8005658 <xPortStartScheduler+0x134>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f1c3 0307 	rsb	r3, r3, #7
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d00a      	beq.n	80055dc <xPortStartScheduler+0xb8>
        __asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	60bb      	str	r3, [r7, #8]
    }
 80055d8:	bf00      	nop
 80055da:	e7fe      	b.n	80055da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055dc:	4b1e      	ldr	r3, [pc, #120]	; (8005658 <xPortStartScheduler+0x134>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <xPortStartScheduler+0x134>)
 80055e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <xPortStartScheduler+0x134>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055ee:	4a1a      	ldr	r2, [pc, #104]	; (8005658 <xPortStartScheduler+0x134>)
 80055f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80055fa:	4b18      	ldr	r3, [pc, #96]	; (800565c <xPortStartScheduler+0x138>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a17      	ldr	r2, [pc, #92]	; (800565c <xPortStartScheduler+0x138>)
 8005600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005604:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005606:	4b15      	ldr	r3, [pc, #84]	; (800565c <xPortStartScheduler+0x138>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a14      	ldr	r2, [pc, #80]	; (800565c <xPortStartScheduler+0x138>)
 800560c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005610:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005612:	f000 f8db 	bl	80057cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005616:	4b12      	ldr	r3, [pc, #72]	; (8005660 <xPortStartScheduler+0x13c>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800561c:	f000 f8fa 	bl	8005814 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005620:	4b10      	ldr	r3, [pc, #64]	; (8005664 <xPortStartScheduler+0x140>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0f      	ldr	r2, [pc, #60]	; (8005664 <xPortStartScheduler+0x140>)
 8005626:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800562a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800562c:	f7ff ff64 	bl	80054f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005630:	f7fe fee6 	bl	8004400 <vTaskSwitchContext>
    prvTaskExitError();
 8005634:	f7ff ff1e 	bl	8005474 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3718      	adds	r7, #24
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	e000ed00 	.word	0xe000ed00
 8005648:	410fc271 	.word	0x410fc271
 800564c:	410fc270 	.word	0x410fc270
 8005650:	e000e400 	.word	0xe000e400
 8005654:	200002d0 	.word	0x200002d0
 8005658:	200002d4 	.word	0x200002d4
 800565c:	e000ed20 	.word	0xe000ed20
 8005660:	20000014 	.word	0x20000014
 8005664:	e000ef34 	.word	0xe000ef34

08005668 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
        __asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	607b      	str	r3, [r7, #4]
    }
 8005680:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <vPortEnterCritical+0x58>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3301      	adds	r3, #1
 8005688:	4a0d      	ldr	r2, [pc, #52]	; (80056c0 <vPortEnterCritical+0x58>)
 800568a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800568c:	4b0c      	ldr	r3, [pc, #48]	; (80056c0 <vPortEnterCritical+0x58>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10f      	bne.n	80056b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005694:	4b0b      	ldr	r3, [pc, #44]	; (80056c4 <vPortEnterCritical+0x5c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	603b      	str	r3, [r7, #0]
    }
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <vPortEnterCritical+0x4a>
    }
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20000014 	.word	0x20000014
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80056ce:	4b12      	ldr	r3, [pc, #72]	; (8005718 <vPortExitCritical+0x50>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <vPortExitCritical+0x24>
        __asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	607b      	str	r3, [r7, #4]
    }
 80056e8:	bf00      	nop
 80056ea:	e7fe      	b.n	80056ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <vPortExitCritical+0x50>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	4a09      	ldr	r2, [pc, #36]	; (8005718 <vPortExitCritical+0x50>)
 80056f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80056f6:	4b08      	ldr	r3, [pc, #32]	; (8005718 <vPortExitCritical+0x50>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d105      	bne.n	800570a <vPortExitCritical+0x42>
 80056fe:	2300      	movs	r3, #0
 8005700:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f383 8811 	msr	BASEPRI, r3
    }
 8005708:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000014 	.word	0x20000014
 800571c:	00000000 	.word	0x00000000

08005720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005720:	f3ef 8009 	mrs	r0, PSP
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	4b15      	ldr	r3, [pc, #84]	; (8005780 <pxCurrentTCBConst>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	f01e 0f10 	tst.w	lr, #16
 8005730:	bf08      	it	eq
 8005732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573a:	6010      	str	r0, [r2, #0]
 800573c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005744:	f380 8811 	msr	BASEPRI, r0
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f7fe fe56 	bl	8004400 <vTaskSwitchContext>
 8005754:	f04f 0000 	mov.w	r0, #0
 8005758:	f380 8811 	msr	BASEPRI, r0
 800575c:	bc09      	pop	{r0, r3}
 800575e:	6819      	ldr	r1, [r3, #0]
 8005760:	6808      	ldr	r0, [r1, #0]
 8005762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005766:	f01e 0f10 	tst.w	lr, #16
 800576a:	bf08      	it	eq
 800576c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005770:	f380 8809 	msr	PSP, r0
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w

08005780 <pxCurrentTCBConst>:
 8005780:	20000190 	.word	0x20000190
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop

08005788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
        __asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	607b      	str	r3, [r7, #4]
    }
 80057a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80057a2:	f7fe fd17 	bl	80041d4 <xTaskIncrementTick>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <SysTick_Handler+0x40>)
 80057ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	2300      	movs	r3, #0
 80057b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f383 8811 	msr	BASEPRI, r3
    }
 80057be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <vPortSetupTimerInterrupt+0x34>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <vPortSetupTimerInterrupt+0x38>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <vPortSetupTimerInterrupt+0x3c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a0a      	ldr	r2, [pc, #40]	; (800580c <vPortSetupTimerInterrupt+0x40>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	099b      	lsrs	r3, r3, #6
 80057e8:	4a09      	ldr	r2, [pc, #36]	; (8005810 <vPortSetupTimerInterrupt+0x44>)
 80057ea:	3b01      	subs	r3, #1
 80057ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ee:	4b04      	ldr	r3, [pc, #16]	; (8005800 <vPortSetupTimerInterrupt+0x34>)
 80057f0:	2207      	movs	r2, #7
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	e000e010 	.word	0xe000e010
 8005804:	e000e018 	.word	0xe000e018
 8005808:	20000004 	.word	0x20000004
 800580c:	10624dd3 	.word	0x10624dd3
 8005810:	e000e014 	.word	0xe000e014

08005814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005824 <vPortEnableVFP+0x10>
 8005818:	6801      	ldr	r1, [r0, #0]
 800581a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800581e:	6001      	str	r1, [r0, #0]
 8005820:	4770      	bx	lr
 8005822:	0000      	.short	0x0000
 8005824:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop

0800582c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005832:	f3ef 8305 	mrs	r3, IPSR
 8005836:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b0f      	cmp	r3, #15
 800583c:	d914      	bls.n	8005868 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800583e:	4a17      	ldr	r2, [pc, #92]	; (800589c <vPortValidateInterruptPriority+0x70>)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005848:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <vPortValidateInterruptPriority+0x74>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	7afa      	ldrb	r2, [r7, #11]
 800584e:	429a      	cmp	r2, r3
 8005850:	d20a      	bcs.n	8005868 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	607b      	str	r3, [r7, #4]
    }
 8005864:	bf00      	nop
 8005866:	e7fe      	b.n	8005866 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005868:	4b0e      	ldr	r3, [pc, #56]	; (80058a4 <vPortValidateInterruptPriority+0x78>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005870:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <vPortValidateInterruptPriority+0x7c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d90a      	bls.n	800588e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	603b      	str	r3, [r7, #0]
    }
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <vPortValidateInterruptPriority+0x60>
    }
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	e000e3f0 	.word	0xe000e3f0
 80058a0:	200002d0 	.word	0x200002d0
 80058a4:	e000ed0c 	.word	0xe000ed0c
 80058a8:	200002d4 	.word	0x200002d4

080058ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	; 0x28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80058b8:	f7fe fb72 	bl	8003fa0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80058bc:	4b65      	ldr	r3, [pc, #404]	; (8005a54 <pvPortMalloc+0x1a8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d101      	bne.n	80058c8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80058c4:	f000 f934 	bl	8005b30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058c8:	4b63      	ldr	r3, [pc, #396]	; (8005a58 <pvPortMalloc+0x1ac>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 80a7 	bne.w	8005a24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d02d      	beq.n	8005938 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80058dc:	2208      	movs	r2, #8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d227      	bcs.n	8005938 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80058e8:	2208      	movs	r2, #8
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d021      	beq.n	800593e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f023 0307 	bic.w	r3, r3, #7
 8005900:	3308      	adds	r3, #8
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d214      	bcs.n	8005932 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f023 0307 	bic.w	r3, r3, #7
 800590e:	3308      	adds	r3, #8
 8005910:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	2b00      	cmp	r3, #0
 800591a:	d010      	beq.n	800593e <pvPortMalloc+0x92>
        __asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	617b      	str	r3, [r7, #20]
    }
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005936:	e002      	b.n	800593e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	e000      	b.n	8005940 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800593e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d06e      	beq.n	8005a24 <pvPortMalloc+0x178>
 8005946:	4b45      	ldr	r3, [pc, #276]	; (8005a5c <pvPortMalloc+0x1b0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d869      	bhi.n	8005a24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005950:	4b43      	ldr	r3, [pc, #268]	; (8005a60 <pvPortMalloc+0x1b4>)
 8005952:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005954:	4b42      	ldr	r3, [pc, #264]	; (8005a60 <pvPortMalloc+0x1b4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800595a:	e004      	b.n	8005966 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	429a      	cmp	r2, r3
 800596e:	d903      	bls.n	8005978 <pvPortMalloc+0xcc>
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1f1      	bne.n	800595c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005978:	4b36      	ldr	r3, [pc, #216]	; (8005a54 <pvPortMalloc+0x1a8>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597e:	429a      	cmp	r2, r3
 8005980:	d050      	beq.n	8005a24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005982:	6a3b      	ldr	r3, [r7, #32]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2208      	movs	r2, #8
 8005988:	4413      	add	r3, r2
 800598a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	1ad2      	subs	r2, r2, r3
 800599c:	2308      	movs	r3, #8
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d91f      	bls.n	80059e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <pvPortMalloc+0x120>
        __asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	613b      	str	r3, [r7, #16]
    }
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	1ad2      	subs	r2, r2, r3
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059de:	69b8      	ldr	r0, [r7, #24]
 80059e0:	f000 f908 	bl	8005bf4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059e4:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <pvPortMalloc+0x1b0>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	4a1b      	ldr	r2, [pc, #108]	; (8005a5c <pvPortMalloc+0x1b0>)
 80059f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059f2:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <pvPortMalloc+0x1b0>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <pvPortMalloc+0x1b8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d203      	bcs.n	8005a06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059fe:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <pvPortMalloc+0x1b0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <pvPortMalloc+0x1b8>)
 8005a04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <pvPortMalloc+0x1ac>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <pvPortMalloc+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	4a11      	ldr	r2, [pc, #68]	; (8005a68 <pvPortMalloc+0x1bc>)
 8005a22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005a24:	f7fe faca 	bl	8003fbc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <pvPortMalloc+0x19c>
        __asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	60fb      	str	r3, [r7, #12]
    }
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <pvPortMalloc+0x19a>
    return pvReturn;
 8005a48:	69fb      	ldr	r3, [r7, #28]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3728      	adds	r7, #40	; 0x28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	20012ee0 	.word	0x20012ee0
 8005a58:	20012ef4 	.word	0x20012ef4
 8005a5c:	20012ee4 	.word	0x20012ee4
 8005a60:	20012ed8 	.word	0x20012ed8
 8005a64:	20012ee8 	.word	0x20012ee8
 8005a68:	20012eec 	.word	0x20012eec

08005a6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d04d      	beq.n	8005b1a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005a7e:	2308      	movs	r3, #8
 8005a80:	425b      	negs	r3, r3
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4413      	add	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <vPortFree+0xb8>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <vPortFree+0x44>
        __asm volatile
 8005a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	60fb      	str	r3, [r7, #12]
    }
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <vPortFree+0x62>
        __asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	60bb      	str	r3, [r7, #8]
    }
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	4b14      	ldr	r3, [pc, #80]	; (8005b24 <vPortFree+0xb8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01e      	beq.n	8005b1a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11a      	bne.n	8005b1a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	; (8005b24 <vPortFree+0xb8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	43db      	mvns	r3, r3
 8005aee:	401a      	ands	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005af4:	f7fe fa54 	bl	8003fa0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	4b0a      	ldr	r3, [pc, #40]	; (8005b28 <vPortFree+0xbc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4413      	add	r3, r2
 8005b02:	4a09      	ldr	r2, [pc, #36]	; (8005b28 <vPortFree+0xbc>)
 8005b04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b06:	6938      	ldr	r0, [r7, #16]
 8005b08:	f000 f874 	bl	8005bf4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005b0c:	4b07      	ldr	r3, [pc, #28]	; (8005b2c <vPortFree+0xc0>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3301      	adds	r3, #1
 8005b12:	4a06      	ldr	r2, [pc, #24]	; (8005b2c <vPortFree+0xc0>)
 8005b14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005b16:	f7fe fa51 	bl	8003fbc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005b1a:	bf00      	nop
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20012ef4 	.word	0x20012ef4
 8005b28:	20012ee4 	.word	0x20012ee4
 8005b2c:	20012ef0 	.word	0x20012ef0

08005b30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b36:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005b3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005b3c:	4b27      	ldr	r3, [pc, #156]	; (8005bdc <prvHeapInit+0xac>)
 8005b3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00c      	beq.n	8005b64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3307      	adds	r3, #7
 8005b4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0307 	bic.w	r3, r3, #7
 8005b56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <prvHeapInit+0xac>)
 8005b60:	4413      	add	r3, r2
 8005b62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b68:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <prvHeapInit+0xb0>)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005b6e:	4b1c      	ldr	r3, [pc, #112]	; (8005be0 <prvHeapInit+0xb0>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	4413      	add	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0307 	bic.w	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <prvHeapInit+0xb4>)
 8005b90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005b92:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <prvHeapInit+0xb4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005b9a:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <prvHeapInit+0xb4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	1ad2      	subs	r2, r2, r3
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bb0:	4b0c      	ldr	r3, [pc, #48]	; (8005be4 <prvHeapInit+0xb4>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <prvHeapInit+0xb8>)
 8005bbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4a09      	ldr	r2, [pc, #36]	; (8005bec <prvHeapInit+0xbc>)
 8005bc6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <prvHeapInit+0xc0>)
 8005bca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005bce:	601a      	str	r2, [r3, #0]
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	200002d8 	.word	0x200002d8
 8005be0:	20012ed8 	.word	0x20012ed8
 8005be4:	20012ee0 	.word	0x20012ee0
 8005be8:	20012ee8 	.word	0x20012ee8
 8005bec:	20012ee4 	.word	0x20012ee4
 8005bf0:	20012ef4 	.word	0x20012ef4

08005bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bfc:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <prvInsertBlockIntoFreeList+0xac>)
 8005bfe:	60fb      	str	r3, [r7, #12]
 8005c00:	e002      	b.n	8005c08 <prvInsertBlockIntoFreeList+0x14>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d8f7      	bhi.n	8005c02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d108      	bne.n	8005c36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	441a      	add	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	441a      	add	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d118      	bne.n	8005c7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d00d      	beq.n	8005c72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685a      	ldr	r2, [r3, #4]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	441a      	add	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	e008      	b.n	8005c84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c72:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e003      	b.n	8005c84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d002      	beq.n	8005c92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	20012ed8 	.word	0x20012ed8
 8005ca4:	20012ee0 	.word	0x20012ee0

08005ca8 <create_my_queue>:
#include <stdlib.h>
#include "my-queue.h"
#include <string.h>

my_queue_handle_t create_my_queue(int32_t max_my_queue_len)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	my_queue_handle_t my_queue_handle = (my_queue_handle_t)malloc(sizeof(my_queue_t));
 8005cb0:	2014      	movs	r0, #20
 8005cb2:	f000 f90d 	bl	8005ed0 <malloc>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	60fb      	str	r3, [r7, #12]
	assert(my_queue_handle != NULL);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d100      	bne.n	8005cc2 <create_my_queue+0x1a>
 8005cc0:	e7fe      	b.n	8005cc0 <create_my_queue+0x18>
	void** p_data = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
	my_queue_handle->capacity = max_my_queue_len + 1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	609a      	str	r2, [r3, #8]
	my_queue_handle->size = 0;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	60da      	str	r2, [r3, #12]
	my_queue_handle->head = my_queue_handle->capacity;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	601a      	str	r2, [r3, #0]
	my_queue_handle->tail = 0;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	605a      	str	r2, [r3, #4]
	p_data = (void**)malloc(sizeof(void*) * my_queue_handle->capacity);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 f8f1 	bl	8005ed0 <malloc>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	60bb      	str	r3, [r7, #8]
	my_queue_handle->p_data = p_data;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	611a      	str	r2, [r3, #16]
	assert(my_queue_handle->p_data != NULL);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d100      	bne.n	8005d02 <create_my_queue+0x5a>
 8005d00:	e7fe      	b.n	8005d00 <create_my_queue+0x58>
	memset(my_queue_handle->p_data, 0, sizeof(void*) * my_queue_handle->capacity);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6918      	ldr	r0, [r3, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2100      	movs	r1, #0
 8005d10:	f000 f8f4 	bl	8005efc <memset>
	return(my_queue_handle);
 8005d14:	68fb      	ldr	r3, [r7, #12]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <my_queue_push>:
	}
	return(QUEUE_SUCCESS);
}

status_t my_queue_push(my_queue_handle_t my_queue_handle, void* p_data, size_t size_in_bytes)
{
 8005d1e:	b590      	push	{r4, r7, lr}
 8005d20:	b085      	sub	sp, #20
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
	if(my_queue_full(my_queue_handle))
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f891 	bl	8005e52 <my_queue_full>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <my_queue_push+0x1c>
	{
		return(QUEUE_FULL);
 8005d36:	2302      	movs	r3, #2
 8005d38:	e01f      	b.n	8005d7a <my_queue_push+0x5c>
	}
	my_queue_handle->p_data[my_queue_handle->tail++] = get_data(p_data, size_in_bytes);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	1c58      	adds	r0, r3, #1
 8005d44:	68f9      	ldr	r1, [r7, #12]
 8005d46:	6048      	str	r0, [r1, #4]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	18d4      	adds	r4, r2, r3
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	68b8      	ldr	r0, [r7, #8]
 8005d50:	f000 f817 	bl	8005d82 <get_data>
 8005d54:	4603      	mov	r3, r0
 8005d56:	6023      	str	r3, [r4, #0]
	my_queue_handle->tail = my_queue_handle->tail % my_queue_handle->capacity;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	6892      	ldr	r2, [r2, #8]
 8005d60:	fb93 f1f2 	sdiv	r1, r3, r2
 8005d64:	fb01 f202 	mul.w	r2, r1, r2
 8005d68:	1a9a      	subs	r2, r3, r2
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	605a      	str	r2, [r3, #4]
	my_queue_handle->size++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	60da      	str	r2, [r3, #12]
	return(QUEUE_SUCCESS);
 8005d78:	2301      	movs	r3, #1
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd90      	pop	{r4, r7, pc}

08005d82 <get_data>:

void* get_data(void* p_data, size_t size_in_bytes)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	6039      	str	r1, [r7, #0]
	void* data = malloc(size_in_bytes);
 8005d8c:	6838      	ldr	r0, [r7, #0]
 8005d8e:	f000 f89f 	bl	8005ed0 <malloc>
 8005d92:	4603      	mov	r3, r0
 8005d94:	60fb      	str	r3, [r7, #12]
	assert(data != NULL);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d100      	bne.n	8005d9e <get_data+0x1c>
 8005d9c:	e7fe      	b.n	8005d9c <get_data+0x1a>
	strncpy(data, p_data, size_in_bytes);
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fa9c 	bl	80062e0 <strncpy>
	return(data);
 8005da8:	68fb      	ldr	r3, [r7, #12]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <my_queue_pop>:

status_t my_queue_pop(my_queue_handle_t my_queue_handle, void* p_data, size_t size_in_bytes)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
	if(my_queue_empty(my_queue_handle) == TRUE)
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 f82d 	bl	8005e1e <my_queue_empty>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <my_queue_pop+0x1c>
	{
		return(QUEUE_EMPTY);
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e023      	b.n	8005e16 <my_queue_pop+0x64>
	}	
	assert(p_data != NULL);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d100      	bne.n	8005dd6 <my_queue_pop+0x24>
 8005dd4:	e7fe      	b.n	8005dd4 <my_queue_pop+0x22>

	my_queue_handle->head = my_queue_handle->head % my_queue_handle->capacity;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	6892      	ldr	r2, [r2, #8]
 8005dde:	fb93 f1f2 	sdiv	r1, r3, r2
 8005de2:	fb01 f202 	mul.w	r2, r1, r2
 8005de6:	1a9a      	subs	r2, r3, r2
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	601a      	str	r2, [r3, #0]
	strncpy(p_data, my_queue_handle->p_data[my_queue_handle->head++], size_in_bytes);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	1c58      	adds	r0, r3, #1
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	6008      	str	r0, [r1, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4619      	mov	r1, r3
 8005e04:	68b8      	ldr	r0, [r7, #8]
 8005e06:	f000 fa6b 	bl	80062e0 <strncpy>
	my_queue_handle->size--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	1e5a      	subs	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	60da      	str	r2, [r3, #12]
	return(QUEUE_SUCCESS);
 8005e14:	2301      	movs	r3, #1
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <my_queue_empty>:

BOOL my_queue_empty(my_queue_handle_t my_queue_handle)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
	return((my_queue_handle->head % my_queue_handle->capacity) == my_queue_handle->tail);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6892      	ldr	r2, [r2, #8]
 8005e2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005e32:	fb01 f202 	mul.w	r2, r1, r2
 8005e36:	1a9a      	subs	r2, r3, r2
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	bf0c      	ite	eq
 8005e40:	2301      	moveq	r3, #1
 8005e42:	2300      	movne	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <my_queue_full>:

BOOL my_queue_full(my_queue_handle_t my_queue_handle)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
	return(my_queue_handle->tail+1 == my_queue_handle->head);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	bf0c      	ite	eq
 8005e68:	2301      	moveq	r3, #1
 8005e6a:	2300      	movne	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
	...

08005e7c <__errno>:
 8005e7c:	4b01      	ldr	r3, [pc, #4]	; (8005e84 <__errno+0x8>)
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000018 	.word	0x20000018

08005e88 <__libc_init_array>:
 8005e88:	b570      	push	{r4, r5, r6, lr}
 8005e8a:	4d0d      	ldr	r5, [pc, #52]	; (8005ec0 <__libc_init_array+0x38>)
 8005e8c:	4c0d      	ldr	r4, [pc, #52]	; (8005ec4 <__libc_init_array+0x3c>)
 8005e8e:	1b64      	subs	r4, r4, r5
 8005e90:	10a4      	asrs	r4, r4, #2
 8005e92:	2600      	movs	r6, #0
 8005e94:	42a6      	cmp	r6, r4
 8005e96:	d109      	bne.n	8005eac <__libc_init_array+0x24>
 8005e98:	4d0b      	ldr	r5, [pc, #44]	; (8005ec8 <__libc_init_array+0x40>)
 8005e9a:	4c0c      	ldr	r4, [pc, #48]	; (8005ecc <__libc_init_array+0x44>)
 8005e9c:	f001 f978 	bl	8007190 <_init>
 8005ea0:	1b64      	subs	r4, r4, r5
 8005ea2:	10a4      	asrs	r4, r4, #2
 8005ea4:	2600      	movs	r6, #0
 8005ea6:	42a6      	cmp	r6, r4
 8005ea8:	d105      	bne.n	8005eb6 <__libc_init_array+0x2e>
 8005eaa:	bd70      	pop	{r4, r5, r6, pc}
 8005eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb0:	4798      	blx	r3
 8005eb2:	3601      	adds	r6, #1
 8005eb4:	e7ee      	b.n	8005e94 <__libc_init_array+0xc>
 8005eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eba:	4798      	blx	r3
 8005ebc:	3601      	adds	r6, #1
 8005ebe:	e7f2      	b.n	8005ea6 <__libc_init_array+0x1e>
 8005ec0:	080073f8 	.word	0x080073f8
 8005ec4:	080073f8 	.word	0x080073f8
 8005ec8:	080073f8 	.word	0x080073f8
 8005ecc:	080073fc 	.word	0x080073fc

08005ed0 <malloc>:
 8005ed0:	4b02      	ldr	r3, [pc, #8]	; (8005edc <malloc+0xc>)
 8005ed2:	4601      	mov	r1, r0
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f000 b885 	b.w	8005fe4 <_malloc_r>
 8005eda:	bf00      	nop
 8005edc:	20000018 	.word	0x20000018

08005ee0 <memcpy>:
 8005ee0:	440a      	add	r2, r1
 8005ee2:	4291      	cmp	r1, r2
 8005ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ee8:	d100      	bne.n	8005eec <memcpy+0xc>
 8005eea:	4770      	bx	lr
 8005eec:	b510      	push	{r4, lr}
 8005eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ef6:	4291      	cmp	r1, r2
 8005ef8:	d1f9      	bne.n	8005eee <memcpy+0xe>
 8005efa:	bd10      	pop	{r4, pc}

08005efc <memset>:
 8005efc:	4402      	add	r2, r0
 8005efe:	4603      	mov	r3, r0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d100      	bne.n	8005f06 <memset+0xa>
 8005f04:	4770      	bx	lr
 8005f06:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0a:	e7f9      	b.n	8005f00 <memset+0x4>

08005f0c <_free_r>:
 8005f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d044      	beq.n	8005f9c <_free_r+0x90>
 8005f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f16:	9001      	str	r0, [sp, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f1e:	bfb8      	it	lt
 8005f20:	18e4      	addlt	r4, r4, r3
 8005f22:	f000 fd2d 	bl	8006980 <__malloc_lock>
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <_free_r+0x94>)
 8005f28:	9801      	ldr	r0, [sp, #4]
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	b933      	cbnz	r3, 8005f3c <_free_r+0x30>
 8005f2e:	6063      	str	r3, [r4, #4]
 8005f30:	6014      	str	r4, [r2, #0]
 8005f32:	b003      	add	sp, #12
 8005f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f38:	f000 bd28 	b.w	800698c <__malloc_unlock>
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	d908      	bls.n	8005f52 <_free_r+0x46>
 8005f40:	6825      	ldr	r5, [r4, #0]
 8005f42:	1961      	adds	r1, r4, r5
 8005f44:	428b      	cmp	r3, r1
 8005f46:	bf01      	itttt	eq
 8005f48:	6819      	ldreq	r1, [r3, #0]
 8005f4a:	685b      	ldreq	r3, [r3, #4]
 8005f4c:	1949      	addeq	r1, r1, r5
 8005f4e:	6021      	streq	r1, [r4, #0]
 8005f50:	e7ed      	b.n	8005f2e <_free_r+0x22>
 8005f52:	461a      	mov	r2, r3
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b10b      	cbz	r3, 8005f5c <_free_r+0x50>
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d9fa      	bls.n	8005f52 <_free_r+0x46>
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	1855      	adds	r5, r2, r1
 8005f60:	42a5      	cmp	r5, r4
 8005f62:	d10b      	bne.n	8005f7c <_free_r+0x70>
 8005f64:	6824      	ldr	r4, [r4, #0]
 8005f66:	4421      	add	r1, r4
 8005f68:	1854      	adds	r4, r2, r1
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	d1e0      	bne.n	8005f32 <_free_r+0x26>
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	6053      	str	r3, [r2, #4]
 8005f76:	4421      	add	r1, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	e7da      	b.n	8005f32 <_free_r+0x26>
 8005f7c:	d902      	bls.n	8005f84 <_free_r+0x78>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	6003      	str	r3, [r0, #0]
 8005f82:	e7d6      	b.n	8005f32 <_free_r+0x26>
 8005f84:	6825      	ldr	r5, [r4, #0]
 8005f86:	1961      	adds	r1, r4, r5
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	bf04      	itt	eq
 8005f8c:	6819      	ldreq	r1, [r3, #0]
 8005f8e:	685b      	ldreq	r3, [r3, #4]
 8005f90:	6063      	str	r3, [r4, #4]
 8005f92:	bf04      	itt	eq
 8005f94:	1949      	addeq	r1, r1, r5
 8005f96:	6021      	streq	r1, [r4, #0]
 8005f98:	6054      	str	r4, [r2, #4]
 8005f9a:	e7ca      	b.n	8005f32 <_free_r+0x26>
 8005f9c:	b003      	add	sp, #12
 8005f9e:	bd30      	pop	{r4, r5, pc}
 8005fa0:	20012ef8 	.word	0x20012ef8

08005fa4 <sbrk_aligned>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4e0e      	ldr	r6, [pc, #56]	; (8005fe0 <sbrk_aligned+0x3c>)
 8005fa8:	460c      	mov	r4, r1
 8005faa:	6831      	ldr	r1, [r6, #0]
 8005fac:	4605      	mov	r5, r0
 8005fae:	b911      	cbnz	r1, 8005fb6 <sbrk_aligned+0x12>
 8005fb0:	f000 f986 	bl	80062c0 <_sbrk_r>
 8005fb4:	6030      	str	r0, [r6, #0]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 f981 	bl	80062c0 <_sbrk_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d00a      	beq.n	8005fd8 <sbrk_aligned+0x34>
 8005fc2:	1cc4      	adds	r4, r0, #3
 8005fc4:	f024 0403 	bic.w	r4, r4, #3
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d007      	beq.n	8005fdc <sbrk_aligned+0x38>
 8005fcc:	1a21      	subs	r1, r4, r0
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 f976 	bl	80062c0 <_sbrk_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d101      	bne.n	8005fdc <sbrk_aligned+0x38>
 8005fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8005fdc:	4620      	mov	r0, r4
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	20012efc 	.word	0x20012efc

08005fe4 <_malloc_r>:
 8005fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe8:	1ccd      	adds	r5, r1, #3
 8005fea:	f025 0503 	bic.w	r5, r5, #3
 8005fee:	3508      	adds	r5, #8
 8005ff0:	2d0c      	cmp	r5, #12
 8005ff2:	bf38      	it	cc
 8005ff4:	250c      	movcc	r5, #12
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	db01      	blt.n	8006000 <_malloc_r+0x1c>
 8005ffc:	42a9      	cmp	r1, r5
 8005ffe:	d905      	bls.n	800600c <_malloc_r+0x28>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	2600      	movs	r6, #0
 8006006:	4630      	mov	r0, r6
 8006008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600c:	4e2e      	ldr	r6, [pc, #184]	; (80060c8 <_malloc_r+0xe4>)
 800600e:	f000 fcb7 	bl	8006980 <__malloc_lock>
 8006012:	6833      	ldr	r3, [r6, #0]
 8006014:	461c      	mov	r4, r3
 8006016:	bb34      	cbnz	r4, 8006066 <_malloc_r+0x82>
 8006018:	4629      	mov	r1, r5
 800601a:	4638      	mov	r0, r7
 800601c:	f7ff ffc2 	bl	8005fa4 <sbrk_aligned>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	4604      	mov	r4, r0
 8006024:	d14d      	bne.n	80060c2 <_malloc_r+0xde>
 8006026:	6834      	ldr	r4, [r6, #0]
 8006028:	4626      	mov	r6, r4
 800602a:	2e00      	cmp	r6, #0
 800602c:	d140      	bne.n	80060b0 <_malloc_r+0xcc>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	4631      	mov	r1, r6
 8006032:	4638      	mov	r0, r7
 8006034:	eb04 0803 	add.w	r8, r4, r3
 8006038:	f000 f942 	bl	80062c0 <_sbrk_r>
 800603c:	4580      	cmp	r8, r0
 800603e:	d13a      	bne.n	80060b6 <_malloc_r+0xd2>
 8006040:	6821      	ldr	r1, [r4, #0]
 8006042:	3503      	adds	r5, #3
 8006044:	1a6d      	subs	r5, r5, r1
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	4629      	mov	r1, r5
 8006054:	4638      	mov	r0, r7
 8006056:	f7ff ffa5 	bl	8005fa4 <sbrk_aligned>
 800605a:	3001      	adds	r0, #1
 800605c:	d02b      	beq.n	80060b6 <_malloc_r+0xd2>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	442b      	add	r3, r5
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	e00e      	b.n	8006084 <_malloc_r+0xa0>
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	1b52      	subs	r2, r2, r5
 800606a:	d41e      	bmi.n	80060aa <_malloc_r+0xc6>
 800606c:	2a0b      	cmp	r2, #11
 800606e:	d916      	bls.n	800609e <_malloc_r+0xba>
 8006070:	1961      	adds	r1, r4, r5
 8006072:	42a3      	cmp	r3, r4
 8006074:	6025      	str	r5, [r4, #0]
 8006076:	bf18      	it	ne
 8006078:	6059      	strne	r1, [r3, #4]
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	bf08      	it	eq
 800607e:	6031      	streq	r1, [r6, #0]
 8006080:	5162      	str	r2, [r4, r5]
 8006082:	604b      	str	r3, [r1, #4]
 8006084:	4638      	mov	r0, r7
 8006086:	f104 060b 	add.w	r6, r4, #11
 800608a:	f000 fc7f 	bl	800698c <__malloc_unlock>
 800608e:	f026 0607 	bic.w	r6, r6, #7
 8006092:	1d23      	adds	r3, r4, #4
 8006094:	1af2      	subs	r2, r6, r3
 8006096:	d0b6      	beq.n	8006006 <_malloc_r+0x22>
 8006098:	1b9b      	subs	r3, r3, r6
 800609a:	50a3      	str	r3, [r4, r2]
 800609c:	e7b3      	b.n	8006006 <_malloc_r+0x22>
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	bf0c      	ite	eq
 80060a4:	6032      	streq	r2, [r6, #0]
 80060a6:	605a      	strne	r2, [r3, #4]
 80060a8:	e7ec      	b.n	8006084 <_malloc_r+0xa0>
 80060aa:	4623      	mov	r3, r4
 80060ac:	6864      	ldr	r4, [r4, #4]
 80060ae:	e7b2      	b.n	8006016 <_malloc_r+0x32>
 80060b0:	4634      	mov	r4, r6
 80060b2:	6876      	ldr	r6, [r6, #4]
 80060b4:	e7b9      	b.n	800602a <_malloc_r+0x46>
 80060b6:	230c      	movs	r3, #12
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4638      	mov	r0, r7
 80060bc:	f000 fc66 	bl	800698c <__malloc_unlock>
 80060c0:	e7a1      	b.n	8006006 <_malloc_r+0x22>
 80060c2:	6025      	str	r5, [r4, #0]
 80060c4:	e7de      	b.n	8006084 <_malloc_r+0xa0>
 80060c6:	bf00      	nop
 80060c8:	20012ef8 	.word	0x20012ef8

080060cc <iprintf>:
 80060cc:	b40f      	push	{r0, r1, r2, r3}
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <iprintf+0x2c>)
 80060d0:	b513      	push	{r0, r1, r4, lr}
 80060d2:	681c      	ldr	r4, [r3, #0]
 80060d4:	b124      	cbz	r4, 80060e0 <iprintf+0x14>
 80060d6:	69a3      	ldr	r3, [r4, #24]
 80060d8:	b913      	cbnz	r3, 80060e0 <iprintf+0x14>
 80060da:	4620      	mov	r0, r4
 80060dc:	f000 fb26 	bl	800672c <__sinit>
 80060e0:	ab05      	add	r3, sp, #20
 80060e2:	9a04      	ldr	r2, [sp, #16]
 80060e4:	68a1      	ldr	r1, [r4, #8]
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	4620      	mov	r0, r4
 80060ea:	f000 fc7f 	bl	80069ec <_vfiprintf_r>
 80060ee:	b002      	add	sp, #8
 80060f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f4:	b004      	add	sp, #16
 80060f6:	4770      	bx	lr
 80060f8:	20000018 	.word	0x20000018

080060fc <_puts_r>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	460e      	mov	r6, r1
 8006100:	4605      	mov	r5, r0
 8006102:	b118      	cbz	r0, 800610c <_puts_r+0x10>
 8006104:	6983      	ldr	r3, [r0, #24]
 8006106:	b90b      	cbnz	r3, 800610c <_puts_r+0x10>
 8006108:	f000 fb10 	bl	800672c <__sinit>
 800610c:	69ab      	ldr	r3, [r5, #24]
 800610e:	68ac      	ldr	r4, [r5, #8]
 8006110:	b913      	cbnz	r3, 8006118 <_puts_r+0x1c>
 8006112:	4628      	mov	r0, r5
 8006114:	f000 fb0a 	bl	800672c <__sinit>
 8006118:	4b2c      	ldr	r3, [pc, #176]	; (80061cc <_puts_r+0xd0>)
 800611a:	429c      	cmp	r4, r3
 800611c:	d120      	bne.n	8006160 <_puts_r+0x64>
 800611e:	686c      	ldr	r4, [r5, #4]
 8006120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006122:	07db      	lsls	r3, r3, #31
 8006124:	d405      	bmi.n	8006132 <_puts_r+0x36>
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	0598      	lsls	r0, r3, #22
 800612a:	d402      	bmi.n	8006132 <_puts_r+0x36>
 800612c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800612e:	f000 fbc0 	bl	80068b2 <__retarget_lock_acquire_recursive>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	0719      	lsls	r1, r3, #28
 8006136:	d51d      	bpl.n	8006174 <_puts_r+0x78>
 8006138:	6923      	ldr	r3, [r4, #16]
 800613a:	b1db      	cbz	r3, 8006174 <_puts_r+0x78>
 800613c:	3e01      	subs	r6, #1
 800613e:	68a3      	ldr	r3, [r4, #8]
 8006140:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006144:	3b01      	subs	r3, #1
 8006146:	60a3      	str	r3, [r4, #8]
 8006148:	bb39      	cbnz	r1, 800619a <_puts_r+0x9e>
 800614a:	2b00      	cmp	r3, #0
 800614c:	da38      	bge.n	80061c0 <_puts_r+0xc4>
 800614e:	4622      	mov	r2, r4
 8006150:	210a      	movs	r1, #10
 8006152:	4628      	mov	r0, r5
 8006154:	f000 f8f2 	bl	800633c <__swbuf_r>
 8006158:	3001      	adds	r0, #1
 800615a:	d011      	beq.n	8006180 <_puts_r+0x84>
 800615c:	250a      	movs	r5, #10
 800615e:	e011      	b.n	8006184 <_puts_r+0x88>
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <_puts_r+0xd4>)
 8006162:	429c      	cmp	r4, r3
 8006164:	d101      	bne.n	800616a <_puts_r+0x6e>
 8006166:	68ac      	ldr	r4, [r5, #8]
 8006168:	e7da      	b.n	8006120 <_puts_r+0x24>
 800616a:	4b1a      	ldr	r3, [pc, #104]	; (80061d4 <_puts_r+0xd8>)
 800616c:	429c      	cmp	r4, r3
 800616e:	bf08      	it	eq
 8006170:	68ec      	ldreq	r4, [r5, #12]
 8006172:	e7d5      	b.n	8006120 <_puts_r+0x24>
 8006174:	4621      	mov	r1, r4
 8006176:	4628      	mov	r0, r5
 8006178:	f000 f932 	bl	80063e0 <__swsetup_r>
 800617c:	2800      	cmp	r0, #0
 800617e:	d0dd      	beq.n	800613c <_puts_r+0x40>
 8006180:	f04f 35ff 	mov.w	r5, #4294967295
 8006184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006186:	07da      	lsls	r2, r3, #31
 8006188:	d405      	bmi.n	8006196 <_puts_r+0x9a>
 800618a:	89a3      	ldrh	r3, [r4, #12]
 800618c:	059b      	lsls	r3, r3, #22
 800618e:	d402      	bmi.n	8006196 <_puts_r+0x9a>
 8006190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006192:	f000 fb8f 	bl	80068b4 <__retarget_lock_release_recursive>
 8006196:	4628      	mov	r0, r5
 8006198:	bd70      	pop	{r4, r5, r6, pc}
 800619a:	2b00      	cmp	r3, #0
 800619c:	da04      	bge.n	80061a8 <_puts_r+0xac>
 800619e:	69a2      	ldr	r2, [r4, #24]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	dc06      	bgt.n	80061b2 <_puts_r+0xb6>
 80061a4:	290a      	cmp	r1, #10
 80061a6:	d004      	beq.n	80061b2 <_puts_r+0xb6>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	6022      	str	r2, [r4, #0]
 80061ae:	7019      	strb	r1, [r3, #0]
 80061b0:	e7c5      	b.n	800613e <_puts_r+0x42>
 80061b2:	4622      	mov	r2, r4
 80061b4:	4628      	mov	r0, r5
 80061b6:	f000 f8c1 	bl	800633c <__swbuf_r>
 80061ba:	3001      	adds	r0, #1
 80061bc:	d1bf      	bne.n	800613e <_puts_r+0x42>
 80061be:	e7df      	b.n	8006180 <_puts_r+0x84>
 80061c0:	6823      	ldr	r3, [r4, #0]
 80061c2:	250a      	movs	r5, #10
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	6022      	str	r2, [r4, #0]
 80061c8:	701d      	strb	r5, [r3, #0]
 80061ca:	e7db      	b.n	8006184 <_puts_r+0x88>
 80061cc:	0800737c 	.word	0x0800737c
 80061d0:	0800739c 	.word	0x0800739c
 80061d4:	0800735c 	.word	0x0800735c

080061d8 <puts>:
 80061d8:	4b02      	ldr	r3, [pc, #8]	; (80061e4 <puts+0xc>)
 80061da:	4601      	mov	r1, r0
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	f7ff bf8d 	b.w	80060fc <_puts_r>
 80061e2:	bf00      	nop
 80061e4:	20000018 	.word	0x20000018

080061e8 <srand>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4b10      	ldr	r3, [pc, #64]	; (800622c <srand+0x44>)
 80061ec:	681d      	ldr	r5, [r3, #0]
 80061ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80061f0:	4604      	mov	r4, r0
 80061f2:	b9b3      	cbnz	r3, 8006222 <srand+0x3a>
 80061f4:	2018      	movs	r0, #24
 80061f6:	f7ff fe6b 	bl	8005ed0 <malloc>
 80061fa:	4602      	mov	r2, r0
 80061fc:	63a8      	str	r0, [r5, #56]	; 0x38
 80061fe:	b920      	cbnz	r0, 800620a <srand+0x22>
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <srand+0x48>)
 8006202:	480c      	ldr	r0, [pc, #48]	; (8006234 <srand+0x4c>)
 8006204:	2142      	movs	r1, #66	; 0x42
 8006206:	f000 f959 	bl	80064bc <__assert_func>
 800620a:	490b      	ldr	r1, [pc, #44]	; (8006238 <srand+0x50>)
 800620c:	4b0b      	ldr	r3, [pc, #44]	; (800623c <srand+0x54>)
 800620e:	e9c0 1300 	strd	r1, r3, [r0]
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <srand+0x58>)
 8006214:	6083      	str	r3, [r0, #8]
 8006216:	230b      	movs	r3, #11
 8006218:	8183      	strh	r3, [r0, #12]
 800621a:	2100      	movs	r1, #0
 800621c:	2001      	movs	r0, #1
 800621e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006222:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006224:	2200      	movs	r2, #0
 8006226:	611c      	str	r4, [r3, #16]
 8006228:	615a      	str	r2, [r3, #20]
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	20000018 	.word	0x20000018
 8006230:	080072ac 	.word	0x080072ac
 8006234:	080072c3 	.word	0x080072c3
 8006238:	abcd330e 	.word	0xabcd330e
 800623c:	e66d1234 	.word	0xe66d1234
 8006240:	0005deec 	.word	0x0005deec

08006244 <rand>:
 8006244:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <rand+0x5c>)
 8006246:	b510      	push	{r4, lr}
 8006248:	681c      	ldr	r4, [r3, #0]
 800624a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800624c:	b9b3      	cbnz	r3, 800627c <rand+0x38>
 800624e:	2018      	movs	r0, #24
 8006250:	f7ff fe3e 	bl	8005ed0 <malloc>
 8006254:	63a0      	str	r0, [r4, #56]	; 0x38
 8006256:	b928      	cbnz	r0, 8006264 <rand+0x20>
 8006258:	4602      	mov	r2, r0
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <rand+0x60>)
 800625c:	4812      	ldr	r0, [pc, #72]	; (80062a8 <rand+0x64>)
 800625e:	214e      	movs	r1, #78	; 0x4e
 8006260:	f000 f92c 	bl	80064bc <__assert_func>
 8006264:	4a11      	ldr	r2, [pc, #68]	; (80062ac <rand+0x68>)
 8006266:	4b12      	ldr	r3, [pc, #72]	; (80062b0 <rand+0x6c>)
 8006268:	e9c0 2300 	strd	r2, r3, [r0]
 800626c:	4b11      	ldr	r3, [pc, #68]	; (80062b4 <rand+0x70>)
 800626e:	6083      	str	r3, [r0, #8]
 8006270:	230b      	movs	r3, #11
 8006272:	8183      	strh	r3, [r0, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	2300      	movs	r3, #0
 8006278:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800627c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800627e:	4a0e      	ldr	r2, [pc, #56]	; (80062b8 <rand+0x74>)
 8006280:	6920      	ldr	r0, [r4, #16]
 8006282:	6963      	ldr	r3, [r4, #20]
 8006284:	490d      	ldr	r1, [pc, #52]	; (80062bc <rand+0x78>)
 8006286:	4342      	muls	r2, r0
 8006288:	fb01 2203 	mla	r2, r1, r3, r2
 800628c:	fba0 0101 	umull	r0, r1, r0, r1
 8006290:	1c43      	adds	r3, r0, #1
 8006292:	eb42 0001 	adc.w	r0, r2, r1
 8006296:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800629a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800629e:	bd10      	pop	{r4, pc}
 80062a0:	20000018 	.word	0x20000018
 80062a4:	080072ac 	.word	0x080072ac
 80062a8:	080072c3 	.word	0x080072c3
 80062ac:	abcd330e 	.word	0xabcd330e
 80062b0:	e66d1234 	.word	0xe66d1234
 80062b4:	0005deec 	.word	0x0005deec
 80062b8:	5851f42d 	.word	0x5851f42d
 80062bc:	4c957f2d 	.word	0x4c957f2d

080062c0 <_sbrk_r>:
 80062c0:	b538      	push	{r3, r4, r5, lr}
 80062c2:	4d06      	ldr	r5, [pc, #24]	; (80062dc <_sbrk_r+0x1c>)
 80062c4:	2300      	movs	r3, #0
 80062c6:	4604      	mov	r4, r0
 80062c8:	4608      	mov	r0, r1
 80062ca:	602b      	str	r3, [r5, #0]
 80062cc:	f000 ff52 	bl	8007174 <_sbrk>
 80062d0:	1c43      	adds	r3, r0, #1
 80062d2:	d102      	bne.n	80062da <_sbrk_r+0x1a>
 80062d4:	682b      	ldr	r3, [r5, #0]
 80062d6:	b103      	cbz	r3, 80062da <_sbrk_r+0x1a>
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	bd38      	pop	{r3, r4, r5, pc}
 80062dc:	20012f04 	.word	0x20012f04

080062e0 <strncpy>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	3901      	subs	r1, #1
 80062e4:	4603      	mov	r3, r0
 80062e6:	b132      	cbz	r2, 80062f6 <strncpy+0x16>
 80062e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80062ec:	f803 4b01 	strb.w	r4, [r3], #1
 80062f0:	3a01      	subs	r2, #1
 80062f2:	2c00      	cmp	r4, #0
 80062f4:	d1f7      	bne.n	80062e6 <strncpy+0x6>
 80062f6:	441a      	add	r2, r3
 80062f8:	2100      	movs	r1, #0
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d100      	bne.n	8006300 <strncpy+0x20>
 80062fe:	bd10      	pop	{r4, pc}
 8006300:	f803 1b01 	strb.w	r1, [r3], #1
 8006304:	e7f9      	b.n	80062fa <strncpy+0x1a>
	...

08006308 <time>:
 8006308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <time+0x30>)
 800630c:	2200      	movs	r2, #0
 800630e:	4669      	mov	r1, sp
 8006310:	4604      	mov	r4, r0
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	f000 faba 	bl	800688c <_gettimeofday_r>
 8006318:	2800      	cmp	r0, #0
 800631a:	bfbe      	ittt	lt
 800631c:	f04f 32ff 	movlt.w	r2, #4294967295
 8006320:	f04f 33ff 	movlt.w	r3, #4294967295
 8006324:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800632c:	b10c      	cbz	r4, 8006332 <time+0x2a>
 800632e:	e9c4 0100 	strd	r0, r1, [r4]
 8006332:	b004      	add	sp, #16
 8006334:	bd10      	pop	{r4, pc}
 8006336:	bf00      	nop
 8006338:	20000018 	.word	0x20000018

0800633c <__swbuf_r>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	460e      	mov	r6, r1
 8006340:	4614      	mov	r4, r2
 8006342:	4605      	mov	r5, r0
 8006344:	b118      	cbz	r0, 800634e <__swbuf_r+0x12>
 8006346:	6983      	ldr	r3, [r0, #24]
 8006348:	b90b      	cbnz	r3, 800634e <__swbuf_r+0x12>
 800634a:	f000 f9ef 	bl	800672c <__sinit>
 800634e:	4b21      	ldr	r3, [pc, #132]	; (80063d4 <__swbuf_r+0x98>)
 8006350:	429c      	cmp	r4, r3
 8006352:	d12b      	bne.n	80063ac <__swbuf_r+0x70>
 8006354:	686c      	ldr	r4, [r5, #4]
 8006356:	69a3      	ldr	r3, [r4, #24]
 8006358:	60a3      	str	r3, [r4, #8]
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	071a      	lsls	r2, r3, #28
 800635e:	d52f      	bpl.n	80063c0 <__swbuf_r+0x84>
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	b36b      	cbz	r3, 80063c0 <__swbuf_r+0x84>
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	6820      	ldr	r0, [r4, #0]
 8006368:	1ac0      	subs	r0, r0, r3
 800636a:	6963      	ldr	r3, [r4, #20]
 800636c:	b2f6      	uxtb	r6, r6
 800636e:	4283      	cmp	r3, r0
 8006370:	4637      	mov	r7, r6
 8006372:	dc04      	bgt.n	800637e <__swbuf_r+0x42>
 8006374:	4621      	mov	r1, r4
 8006376:	4628      	mov	r0, r5
 8006378:	f000 f944 	bl	8006604 <_fflush_r>
 800637c:	bb30      	cbnz	r0, 80063cc <__swbuf_r+0x90>
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	3b01      	subs	r3, #1
 8006382:	60a3      	str	r3, [r4, #8]
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	6022      	str	r2, [r4, #0]
 800638a:	701e      	strb	r6, [r3, #0]
 800638c:	6963      	ldr	r3, [r4, #20]
 800638e:	3001      	adds	r0, #1
 8006390:	4283      	cmp	r3, r0
 8006392:	d004      	beq.n	800639e <__swbuf_r+0x62>
 8006394:	89a3      	ldrh	r3, [r4, #12]
 8006396:	07db      	lsls	r3, r3, #31
 8006398:	d506      	bpl.n	80063a8 <__swbuf_r+0x6c>
 800639a:	2e0a      	cmp	r6, #10
 800639c:	d104      	bne.n	80063a8 <__swbuf_r+0x6c>
 800639e:	4621      	mov	r1, r4
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 f92f 	bl	8006604 <_fflush_r>
 80063a6:	b988      	cbnz	r0, 80063cc <__swbuf_r+0x90>
 80063a8:	4638      	mov	r0, r7
 80063aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <__swbuf_r+0x9c>)
 80063ae:	429c      	cmp	r4, r3
 80063b0:	d101      	bne.n	80063b6 <__swbuf_r+0x7a>
 80063b2:	68ac      	ldr	r4, [r5, #8]
 80063b4:	e7cf      	b.n	8006356 <__swbuf_r+0x1a>
 80063b6:	4b09      	ldr	r3, [pc, #36]	; (80063dc <__swbuf_r+0xa0>)
 80063b8:	429c      	cmp	r4, r3
 80063ba:	bf08      	it	eq
 80063bc:	68ec      	ldreq	r4, [r5, #12]
 80063be:	e7ca      	b.n	8006356 <__swbuf_r+0x1a>
 80063c0:	4621      	mov	r1, r4
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 f80c 	bl	80063e0 <__swsetup_r>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d0cb      	beq.n	8006364 <__swbuf_r+0x28>
 80063cc:	f04f 37ff 	mov.w	r7, #4294967295
 80063d0:	e7ea      	b.n	80063a8 <__swbuf_r+0x6c>
 80063d2:	bf00      	nop
 80063d4:	0800737c 	.word	0x0800737c
 80063d8:	0800739c 	.word	0x0800739c
 80063dc:	0800735c 	.word	0x0800735c

080063e0 <__swsetup_r>:
 80063e0:	4b32      	ldr	r3, [pc, #200]	; (80064ac <__swsetup_r+0xcc>)
 80063e2:	b570      	push	{r4, r5, r6, lr}
 80063e4:	681d      	ldr	r5, [r3, #0]
 80063e6:	4606      	mov	r6, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	b125      	cbz	r5, 80063f6 <__swsetup_r+0x16>
 80063ec:	69ab      	ldr	r3, [r5, #24]
 80063ee:	b913      	cbnz	r3, 80063f6 <__swsetup_r+0x16>
 80063f0:	4628      	mov	r0, r5
 80063f2:	f000 f99b 	bl	800672c <__sinit>
 80063f6:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <__swsetup_r+0xd0>)
 80063f8:	429c      	cmp	r4, r3
 80063fa:	d10f      	bne.n	800641c <__swsetup_r+0x3c>
 80063fc:	686c      	ldr	r4, [r5, #4]
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006404:	0719      	lsls	r1, r3, #28
 8006406:	d42c      	bmi.n	8006462 <__swsetup_r+0x82>
 8006408:	06dd      	lsls	r5, r3, #27
 800640a:	d411      	bmi.n	8006430 <__swsetup_r+0x50>
 800640c:	2309      	movs	r3, #9
 800640e:	6033      	str	r3, [r6, #0]
 8006410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	f04f 30ff 	mov.w	r0, #4294967295
 800641a:	e03e      	b.n	800649a <__swsetup_r+0xba>
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <__swsetup_r+0xd4>)
 800641e:	429c      	cmp	r4, r3
 8006420:	d101      	bne.n	8006426 <__swsetup_r+0x46>
 8006422:	68ac      	ldr	r4, [r5, #8]
 8006424:	e7eb      	b.n	80063fe <__swsetup_r+0x1e>
 8006426:	4b24      	ldr	r3, [pc, #144]	; (80064b8 <__swsetup_r+0xd8>)
 8006428:	429c      	cmp	r4, r3
 800642a:	bf08      	it	eq
 800642c:	68ec      	ldreq	r4, [r5, #12]
 800642e:	e7e6      	b.n	80063fe <__swsetup_r+0x1e>
 8006430:	0758      	lsls	r0, r3, #29
 8006432:	d512      	bpl.n	800645a <__swsetup_r+0x7a>
 8006434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006436:	b141      	cbz	r1, 800644a <__swsetup_r+0x6a>
 8006438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800643c:	4299      	cmp	r1, r3
 800643e:	d002      	beq.n	8006446 <__swsetup_r+0x66>
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff fd63 	bl	8005f0c <_free_r>
 8006446:	2300      	movs	r3, #0
 8006448:	6363      	str	r3, [r4, #52]	; 0x34
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	2300      	movs	r3, #0
 8006454:	6063      	str	r3, [r4, #4]
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	f043 0308 	orr.w	r3, r3, #8
 8006460:	81a3      	strh	r3, [r4, #12]
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	b94b      	cbnz	r3, 800647a <__swsetup_r+0x9a>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800646c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006470:	d003      	beq.n	800647a <__swsetup_r+0x9a>
 8006472:	4621      	mov	r1, r4
 8006474:	4630      	mov	r0, r6
 8006476:	f000 fa43 	bl	8006900 <__smakebuf_r>
 800647a:	89a0      	ldrh	r0, [r4, #12]
 800647c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006480:	f010 0301 	ands.w	r3, r0, #1
 8006484:	d00a      	beq.n	800649c <__swsetup_r+0xbc>
 8006486:	2300      	movs	r3, #0
 8006488:	60a3      	str	r3, [r4, #8]
 800648a:	6963      	ldr	r3, [r4, #20]
 800648c:	425b      	negs	r3, r3
 800648e:	61a3      	str	r3, [r4, #24]
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	b943      	cbnz	r3, 80064a6 <__swsetup_r+0xc6>
 8006494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006498:	d1ba      	bne.n	8006410 <__swsetup_r+0x30>
 800649a:	bd70      	pop	{r4, r5, r6, pc}
 800649c:	0781      	lsls	r1, r0, #30
 800649e:	bf58      	it	pl
 80064a0:	6963      	ldrpl	r3, [r4, #20]
 80064a2:	60a3      	str	r3, [r4, #8]
 80064a4:	e7f4      	b.n	8006490 <__swsetup_r+0xb0>
 80064a6:	2000      	movs	r0, #0
 80064a8:	e7f7      	b.n	800649a <__swsetup_r+0xba>
 80064aa:	bf00      	nop
 80064ac:	20000018 	.word	0x20000018
 80064b0:	0800737c 	.word	0x0800737c
 80064b4:	0800739c 	.word	0x0800739c
 80064b8:	0800735c 	.word	0x0800735c

080064bc <__assert_func>:
 80064bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064be:	4614      	mov	r4, r2
 80064c0:	461a      	mov	r2, r3
 80064c2:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <__assert_func+0x2c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4605      	mov	r5, r0
 80064c8:	68d8      	ldr	r0, [r3, #12]
 80064ca:	b14c      	cbz	r4, 80064e0 <__assert_func+0x24>
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <__assert_func+0x30>)
 80064ce:	9100      	str	r1, [sp, #0]
 80064d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064d4:	4906      	ldr	r1, [pc, #24]	; (80064f0 <__assert_func+0x34>)
 80064d6:	462b      	mov	r3, r5
 80064d8:	f000 f9a6 	bl	8006828 <fiprintf>
 80064dc:	f000 fda0 	bl	8007020 <abort>
 80064e0:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <__assert_func+0x38>)
 80064e2:	461c      	mov	r4, r3
 80064e4:	e7f3      	b.n	80064ce <__assert_func+0x12>
 80064e6:	bf00      	nop
 80064e8:	20000018 	.word	0x20000018
 80064ec:	0800731e 	.word	0x0800731e
 80064f0:	0800732b 	.word	0x0800732b
 80064f4:	08007359 	.word	0x08007359

080064f8 <__sflush_r>:
 80064f8:	898a      	ldrh	r2, [r1, #12]
 80064fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064fe:	4605      	mov	r5, r0
 8006500:	0710      	lsls	r0, r2, #28
 8006502:	460c      	mov	r4, r1
 8006504:	d458      	bmi.n	80065b8 <__sflush_r+0xc0>
 8006506:	684b      	ldr	r3, [r1, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dc05      	bgt.n	8006518 <__sflush_r+0x20>
 800650c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	dc02      	bgt.n	8006518 <__sflush_r+0x20>
 8006512:	2000      	movs	r0, #0
 8006514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800651a:	2e00      	cmp	r6, #0
 800651c:	d0f9      	beq.n	8006512 <__sflush_r+0x1a>
 800651e:	2300      	movs	r3, #0
 8006520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006524:	682f      	ldr	r7, [r5, #0]
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	d032      	beq.n	8006590 <__sflush_r+0x98>
 800652a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	075a      	lsls	r2, r3, #29
 8006530:	d505      	bpl.n	800653e <__sflush_r+0x46>
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	1ac0      	subs	r0, r0, r3
 8006536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006538:	b10b      	cbz	r3, 800653e <__sflush_r+0x46>
 800653a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800653c:	1ac0      	subs	r0, r0, r3
 800653e:	2300      	movs	r3, #0
 8006540:	4602      	mov	r2, r0
 8006542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006544:	6a21      	ldr	r1, [r4, #32]
 8006546:	4628      	mov	r0, r5
 8006548:	47b0      	blx	r6
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	d106      	bne.n	800655e <__sflush_r+0x66>
 8006550:	6829      	ldr	r1, [r5, #0]
 8006552:	291d      	cmp	r1, #29
 8006554:	d82c      	bhi.n	80065b0 <__sflush_r+0xb8>
 8006556:	4a2a      	ldr	r2, [pc, #168]	; (8006600 <__sflush_r+0x108>)
 8006558:	40ca      	lsrs	r2, r1
 800655a:	07d6      	lsls	r6, r2, #31
 800655c:	d528      	bpl.n	80065b0 <__sflush_r+0xb8>
 800655e:	2200      	movs	r2, #0
 8006560:	6062      	str	r2, [r4, #4]
 8006562:	04d9      	lsls	r1, r3, #19
 8006564:	6922      	ldr	r2, [r4, #16]
 8006566:	6022      	str	r2, [r4, #0]
 8006568:	d504      	bpl.n	8006574 <__sflush_r+0x7c>
 800656a:	1c42      	adds	r2, r0, #1
 800656c:	d101      	bne.n	8006572 <__sflush_r+0x7a>
 800656e:	682b      	ldr	r3, [r5, #0]
 8006570:	b903      	cbnz	r3, 8006574 <__sflush_r+0x7c>
 8006572:	6560      	str	r0, [r4, #84]	; 0x54
 8006574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006576:	602f      	str	r7, [r5, #0]
 8006578:	2900      	cmp	r1, #0
 800657a:	d0ca      	beq.n	8006512 <__sflush_r+0x1a>
 800657c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006580:	4299      	cmp	r1, r3
 8006582:	d002      	beq.n	800658a <__sflush_r+0x92>
 8006584:	4628      	mov	r0, r5
 8006586:	f7ff fcc1 	bl	8005f0c <_free_r>
 800658a:	2000      	movs	r0, #0
 800658c:	6360      	str	r0, [r4, #52]	; 0x34
 800658e:	e7c1      	b.n	8006514 <__sflush_r+0x1c>
 8006590:	6a21      	ldr	r1, [r4, #32]
 8006592:	2301      	movs	r3, #1
 8006594:	4628      	mov	r0, r5
 8006596:	47b0      	blx	r6
 8006598:	1c41      	adds	r1, r0, #1
 800659a:	d1c7      	bne.n	800652c <__sflush_r+0x34>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0c4      	beq.n	800652c <__sflush_r+0x34>
 80065a2:	2b1d      	cmp	r3, #29
 80065a4:	d001      	beq.n	80065aa <__sflush_r+0xb2>
 80065a6:	2b16      	cmp	r3, #22
 80065a8:	d101      	bne.n	80065ae <__sflush_r+0xb6>
 80065aa:	602f      	str	r7, [r5, #0]
 80065ac:	e7b1      	b.n	8006512 <__sflush_r+0x1a>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b4:	81a3      	strh	r3, [r4, #12]
 80065b6:	e7ad      	b.n	8006514 <__sflush_r+0x1c>
 80065b8:	690f      	ldr	r7, [r1, #16]
 80065ba:	2f00      	cmp	r7, #0
 80065bc:	d0a9      	beq.n	8006512 <__sflush_r+0x1a>
 80065be:	0793      	lsls	r3, r2, #30
 80065c0:	680e      	ldr	r6, [r1, #0]
 80065c2:	bf08      	it	eq
 80065c4:	694b      	ldreq	r3, [r1, #20]
 80065c6:	600f      	str	r7, [r1, #0]
 80065c8:	bf18      	it	ne
 80065ca:	2300      	movne	r3, #0
 80065cc:	eba6 0807 	sub.w	r8, r6, r7
 80065d0:	608b      	str	r3, [r1, #8]
 80065d2:	f1b8 0f00 	cmp.w	r8, #0
 80065d6:	dd9c      	ble.n	8006512 <__sflush_r+0x1a>
 80065d8:	6a21      	ldr	r1, [r4, #32]
 80065da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065dc:	4643      	mov	r3, r8
 80065de:	463a      	mov	r2, r7
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b0      	blx	r6
 80065e4:	2800      	cmp	r0, #0
 80065e6:	dc06      	bgt.n	80065f6 <__sflush_r+0xfe>
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	e78e      	b.n	8006514 <__sflush_r+0x1c>
 80065f6:	4407      	add	r7, r0
 80065f8:	eba8 0800 	sub.w	r8, r8, r0
 80065fc:	e7e9      	b.n	80065d2 <__sflush_r+0xda>
 80065fe:	bf00      	nop
 8006600:	20400001 	.word	0x20400001

08006604 <_fflush_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	690b      	ldr	r3, [r1, #16]
 8006608:	4605      	mov	r5, r0
 800660a:	460c      	mov	r4, r1
 800660c:	b913      	cbnz	r3, 8006614 <_fflush_r+0x10>
 800660e:	2500      	movs	r5, #0
 8006610:	4628      	mov	r0, r5
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	b118      	cbz	r0, 800661e <_fflush_r+0x1a>
 8006616:	6983      	ldr	r3, [r0, #24]
 8006618:	b90b      	cbnz	r3, 800661e <_fflush_r+0x1a>
 800661a:	f000 f887 	bl	800672c <__sinit>
 800661e:	4b14      	ldr	r3, [pc, #80]	; (8006670 <_fflush_r+0x6c>)
 8006620:	429c      	cmp	r4, r3
 8006622:	d11b      	bne.n	800665c <_fflush_r+0x58>
 8006624:	686c      	ldr	r4, [r5, #4]
 8006626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0ef      	beq.n	800660e <_fflush_r+0xa>
 800662e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006630:	07d0      	lsls	r0, r2, #31
 8006632:	d404      	bmi.n	800663e <_fflush_r+0x3a>
 8006634:	0599      	lsls	r1, r3, #22
 8006636:	d402      	bmi.n	800663e <_fflush_r+0x3a>
 8006638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800663a:	f000 f93a 	bl	80068b2 <__retarget_lock_acquire_recursive>
 800663e:	4628      	mov	r0, r5
 8006640:	4621      	mov	r1, r4
 8006642:	f7ff ff59 	bl	80064f8 <__sflush_r>
 8006646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006648:	07da      	lsls	r2, r3, #31
 800664a:	4605      	mov	r5, r0
 800664c:	d4e0      	bmi.n	8006610 <_fflush_r+0xc>
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	059b      	lsls	r3, r3, #22
 8006652:	d4dd      	bmi.n	8006610 <_fflush_r+0xc>
 8006654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006656:	f000 f92d 	bl	80068b4 <__retarget_lock_release_recursive>
 800665a:	e7d9      	b.n	8006610 <_fflush_r+0xc>
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <_fflush_r+0x70>)
 800665e:	429c      	cmp	r4, r3
 8006660:	d101      	bne.n	8006666 <_fflush_r+0x62>
 8006662:	68ac      	ldr	r4, [r5, #8]
 8006664:	e7df      	b.n	8006626 <_fflush_r+0x22>
 8006666:	4b04      	ldr	r3, [pc, #16]	; (8006678 <_fflush_r+0x74>)
 8006668:	429c      	cmp	r4, r3
 800666a:	bf08      	it	eq
 800666c:	68ec      	ldreq	r4, [r5, #12]
 800666e:	e7da      	b.n	8006626 <_fflush_r+0x22>
 8006670:	0800737c 	.word	0x0800737c
 8006674:	0800739c 	.word	0x0800739c
 8006678:	0800735c 	.word	0x0800735c

0800667c <std>:
 800667c:	2300      	movs	r3, #0
 800667e:	b510      	push	{r4, lr}
 8006680:	4604      	mov	r4, r0
 8006682:	e9c0 3300 	strd	r3, r3, [r0]
 8006686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800668a:	6083      	str	r3, [r0, #8]
 800668c:	8181      	strh	r1, [r0, #12]
 800668e:	6643      	str	r3, [r0, #100]	; 0x64
 8006690:	81c2      	strh	r2, [r0, #14]
 8006692:	6183      	str	r3, [r0, #24]
 8006694:	4619      	mov	r1, r3
 8006696:	2208      	movs	r2, #8
 8006698:	305c      	adds	r0, #92	; 0x5c
 800669a:	f7ff fc2f 	bl	8005efc <memset>
 800669e:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <std+0x38>)
 80066a0:	6263      	str	r3, [r4, #36]	; 0x24
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <std+0x3c>)
 80066a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80066a6:	4b05      	ldr	r3, [pc, #20]	; (80066bc <std+0x40>)
 80066a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <std+0x44>)
 80066ac:	6224      	str	r4, [r4, #32]
 80066ae:	6323      	str	r3, [r4, #48]	; 0x30
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	bf00      	nop
 80066b4:	08006f75 	.word	0x08006f75
 80066b8:	08006f97 	.word	0x08006f97
 80066bc:	08006fcf 	.word	0x08006fcf
 80066c0:	08006ff3 	.word	0x08006ff3

080066c4 <_cleanup_r>:
 80066c4:	4901      	ldr	r1, [pc, #4]	; (80066cc <_cleanup_r+0x8>)
 80066c6:	f000 b8c1 	b.w	800684c <_fwalk_reent>
 80066ca:	bf00      	nop
 80066cc:	08006605 	.word	0x08006605

080066d0 <__sfmoreglue>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	2268      	movs	r2, #104	; 0x68
 80066d4:	1e4d      	subs	r5, r1, #1
 80066d6:	4355      	muls	r5, r2
 80066d8:	460e      	mov	r6, r1
 80066da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066de:	f7ff fc81 	bl	8005fe4 <_malloc_r>
 80066e2:	4604      	mov	r4, r0
 80066e4:	b140      	cbz	r0, 80066f8 <__sfmoreglue+0x28>
 80066e6:	2100      	movs	r1, #0
 80066e8:	e9c0 1600 	strd	r1, r6, [r0]
 80066ec:	300c      	adds	r0, #12
 80066ee:	60a0      	str	r0, [r4, #8]
 80066f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066f4:	f7ff fc02 	bl	8005efc <memset>
 80066f8:	4620      	mov	r0, r4
 80066fa:	bd70      	pop	{r4, r5, r6, pc}

080066fc <__sfp_lock_acquire>:
 80066fc:	4801      	ldr	r0, [pc, #4]	; (8006704 <__sfp_lock_acquire+0x8>)
 80066fe:	f000 b8d8 	b.w	80068b2 <__retarget_lock_acquire_recursive>
 8006702:	bf00      	nop
 8006704:	20012f01 	.word	0x20012f01

08006708 <__sfp_lock_release>:
 8006708:	4801      	ldr	r0, [pc, #4]	; (8006710 <__sfp_lock_release+0x8>)
 800670a:	f000 b8d3 	b.w	80068b4 <__retarget_lock_release_recursive>
 800670e:	bf00      	nop
 8006710:	20012f01 	.word	0x20012f01

08006714 <__sinit_lock_acquire>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__sinit_lock_acquire+0x8>)
 8006716:	f000 b8cc 	b.w	80068b2 <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	20012f02 	.word	0x20012f02

08006720 <__sinit_lock_release>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__sinit_lock_release+0x8>)
 8006722:	f000 b8c7 	b.w	80068b4 <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	20012f02 	.word	0x20012f02

0800672c <__sinit>:
 800672c:	b510      	push	{r4, lr}
 800672e:	4604      	mov	r4, r0
 8006730:	f7ff fff0 	bl	8006714 <__sinit_lock_acquire>
 8006734:	69a3      	ldr	r3, [r4, #24]
 8006736:	b11b      	cbz	r3, 8006740 <__sinit+0x14>
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800673c:	f7ff bff0 	b.w	8006720 <__sinit_lock_release>
 8006740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006744:	6523      	str	r3, [r4, #80]	; 0x50
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <__sinit+0x68>)
 8006748:	4a13      	ldr	r2, [pc, #76]	; (8006798 <__sinit+0x6c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	62a2      	str	r2, [r4, #40]	; 0x28
 800674e:	42a3      	cmp	r3, r4
 8006750:	bf04      	itt	eq
 8006752:	2301      	moveq	r3, #1
 8006754:	61a3      	streq	r3, [r4, #24]
 8006756:	4620      	mov	r0, r4
 8006758:	f000 f820 	bl	800679c <__sfp>
 800675c:	6060      	str	r0, [r4, #4]
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f81c 	bl	800679c <__sfp>
 8006764:	60a0      	str	r0, [r4, #8]
 8006766:	4620      	mov	r0, r4
 8006768:	f000 f818 	bl	800679c <__sfp>
 800676c:	2200      	movs	r2, #0
 800676e:	60e0      	str	r0, [r4, #12]
 8006770:	2104      	movs	r1, #4
 8006772:	6860      	ldr	r0, [r4, #4]
 8006774:	f7ff ff82 	bl	800667c <std>
 8006778:	68a0      	ldr	r0, [r4, #8]
 800677a:	2201      	movs	r2, #1
 800677c:	2109      	movs	r1, #9
 800677e:	f7ff ff7d 	bl	800667c <std>
 8006782:	68e0      	ldr	r0, [r4, #12]
 8006784:	2202      	movs	r2, #2
 8006786:	2112      	movs	r1, #18
 8006788:	f7ff ff78 	bl	800667c <std>
 800678c:	2301      	movs	r3, #1
 800678e:	61a3      	str	r3, [r4, #24]
 8006790:	e7d2      	b.n	8006738 <__sinit+0xc>
 8006792:	bf00      	nop
 8006794:	080072a8 	.word	0x080072a8
 8006798:	080066c5 	.word	0x080066c5

0800679c <__sfp>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	4607      	mov	r7, r0
 80067a0:	f7ff ffac 	bl	80066fc <__sfp_lock_acquire>
 80067a4:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <__sfp+0x84>)
 80067a6:	681e      	ldr	r6, [r3, #0]
 80067a8:	69b3      	ldr	r3, [r6, #24]
 80067aa:	b913      	cbnz	r3, 80067b2 <__sfp+0x16>
 80067ac:	4630      	mov	r0, r6
 80067ae:	f7ff ffbd 	bl	800672c <__sinit>
 80067b2:	3648      	adds	r6, #72	; 0x48
 80067b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	d503      	bpl.n	80067c4 <__sfp+0x28>
 80067bc:	6833      	ldr	r3, [r6, #0]
 80067be:	b30b      	cbz	r3, 8006804 <__sfp+0x68>
 80067c0:	6836      	ldr	r6, [r6, #0]
 80067c2:	e7f7      	b.n	80067b4 <__sfp+0x18>
 80067c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067c8:	b9d5      	cbnz	r5, 8006800 <__sfp+0x64>
 80067ca:	4b16      	ldr	r3, [pc, #88]	; (8006824 <__sfp+0x88>)
 80067cc:	60e3      	str	r3, [r4, #12]
 80067ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067d2:	6665      	str	r5, [r4, #100]	; 0x64
 80067d4:	f000 f86c 	bl	80068b0 <__retarget_lock_init_recursive>
 80067d8:	f7ff ff96 	bl	8006708 <__sfp_lock_release>
 80067dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067e4:	6025      	str	r5, [r4, #0]
 80067e6:	61a5      	str	r5, [r4, #24]
 80067e8:	2208      	movs	r2, #8
 80067ea:	4629      	mov	r1, r5
 80067ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067f0:	f7ff fb84 	bl	8005efc <memset>
 80067f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067fc:	4620      	mov	r0, r4
 80067fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006800:	3468      	adds	r4, #104	; 0x68
 8006802:	e7d9      	b.n	80067b8 <__sfp+0x1c>
 8006804:	2104      	movs	r1, #4
 8006806:	4638      	mov	r0, r7
 8006808:	f7ff ff62 	bl	80066d0 <__sfmoreglue>
 800680c:	4604      	mov	r4, r0
 800680e:	6030      	str	r0, [r6, #0]
 8006810:	2800      	cmp	r0, #0
 8006812:	d1d5      	bne.n	80067c0 <__sfp+0x24>
 8006814:	f7ff ff78 	bl	8006708 <__sfp_lock_release>
 8006818:	230c      	movs	r3, #12
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	e7ee      	b.n	80067fc <__sfp+0x60>
 800681e:	bf00      	nop
 8006820:	080072a8 	.word	0x080072a8
 8006824:	ffff0001 	.word	0xffff0001

08006828 <fiprintf>:
 8006828:	b40e      	push	{r1, r2, r3}
 800682a:	b503      	push	{r0, r1, lr}
 800682c:	4601      	mov	r1, r0
 800682e:	ab03      	add	r3, sp, #12
 8006830:	4805      	ldr	r0, [pc, #20]	; (8006848 <fiprintf+0x20>)
 8006832:	f853 2b04 	ldr.w	r2, [r3], #4
 8006836:	6800      	ldr	r0, [r0, #0]
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	f000 f8d7 	bl	80069ec <_vfiprintf_r>
 800683e:	b002      	add	sp, #8
 8006840:	f85d eb04 	ldr.w	lr, [sp], #4
 8006844:	b003      	add	sp, #12
 8006846:	4770      	bx	lr
 8006848:	20000018 	.word	0x20000018

0800684c <_fwalk_reent>:
 800684c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006850:	4606      	mov	r6, r0
 8006852:	4688      	mov	r8, r1
 8006854:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006858:	2700      	movs	r7, #0
 800685a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800685e:	f1b9 0901 	subs.w	r9, r9, #1
 8006862:	d505      	bpl.n	8006870 <_fwalk_reent+0x24>
 8006864:	6824      	ldr	r4, [r4, #0]
 8006866:	2c00      	cmp	r4, #0
 8006868:	d1f7      	bne.n	800685a <_fwalk_reent+0xe>
 800686a:	4638      	mov	r0, r7
 800686c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006870:	89ab      	ldrh	r3, [r5, #12]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d907      	bls.n	8006886 <_fwalk_reent+0x3a>
 8006876:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800687a:	3301      	adds	r3, #1
 800687c:	d003      	beq.n	8006886 <_fwalk_reent+0x3a>
 800687e:	4629      	mov	r1, r5
 8006880:	4630      	mov	r0, r6
 8006882:	47c0      	blx	r8
 8006884:	4307      	orrs	r7, r0
 8006886:	3568      	adds	r5, #104	; 0x68
 8006888:	e7e9      	b.n	800685e <_fwalk_reent+0x12>
	...

0800688c <_gettimeofday_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d07      	ldr	r5, [pc, #28]	; (80068ac <_gettimeofday_r+0x20>)
 8006890:	2300      	movs	r3, #0
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	4611      	mov	r1, r2
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	f000 fc63 	bl	8007164 <_gettimeofday>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	d102      	bne.n	80068a8 <_gettimeofday_r+0x1c>
 80068a2:	682b      	ldr	r3, [r5, #0]
 80068a4:	b103      	cbz	r3, 80068a8 <_gettimeofday_r+0x1c>
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	bd38      	pop	{r3, r4, r5, pc}
 80068aa:	bf00      	nop
 80068ac:	20012f04 	.word	0x20012f04

080068b0 <__retarget_lock_init_recursive>:
 80068b0:	4770      	bx	lr

080068b2 <__retarget_lock_acquire_recursive>:
 80068b2:	4770      	bx	lr

080068b4 <__retarget_lock_release_recursive>:
 80068b4:	4770      	bx	lr

080068b6 <__swhatbuf_r>:
 80068b6:	b570      	push	{r4, r5, r6, lr}
 80068b8:	460e      	mov	r6, r1
 80068ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068be:	2900      	cmp	r1, #0
 80068c0:	b096      	sub	sp, #88	; 0x58
 80068c2:	4614      	mov	r4, r2
 80068c4:	461d      	mov	r5, r3
 80068c6:	da08      	bge.n	80068da <__swhatbuf_r+0x24>
 80068c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	602a      	str	r2, [r5, #0]
 80068d0:	061a      	lsls	r2, r3, #24
 80068d2:	d410      	bmi.n	80068f6 <__swhatbuf_r+0x40>
 80068d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068d8:	e00e      	b.n	80068f8 <__swhatbuf_r+0x42>
 80068da:	466a      	mov	r2, sp
 80068dc:	f000 fbb8 	bl	8007050 <_fstat_r>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	dbf1      	blt.n	80068c8 <__swhatbuf_r+0x12>
 80068e4:	9a01      	ldr	r2, [sp, #4]
 80068e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068ee:	425a      	negs	r2, r3
 80068f0:	415a      	adcs	r2, r3
 80068f2:	602a      	str	r2, [r5, #0]
 80068f4:	e7ee      	b.n	80068d4 <__swhatbuf_r+0x1e>
 80068f6:	2340      	movs	r3, #64	; 0x40
 80068f8:	2000      	movs	r0, #0
 80068fa:	6023      	str	r3, [r4, #0]
 80068fc:	b016      	add	sp, #88	; 0x58
 80068fe:	bd70      	pop	{r4, r5, r6, pc}

08006900 <__smakebuf_r>:
 8006900:	898b      	ldrh	r3, [r1, #12]
 8006902:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006904:	079d      	lsls	r5, r3, #30
 8006906:	4606      	mov	r6, r0
 8006908:	460c      	mov	r4, r1
 800690a:	d507      	bpl.n	800691c <__smakebuf_r+0x1c>
 800690c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	6123      	str	r3, [r4, #16]
 8006914:	2301      	movs	r3, #1
 8006916:	6163      	str	r3, [r4, #20]
 8006918:	b002      	add	sp, #8
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	ab01      	add	r3, sp, #4
 800691e:	466a      	mov	r2, sp
 8006920:	f7ff ffc9 	bl	80068b6 <__swhatbuf_r>
 8006924:	9900      	ldr	r1, [sp, #0]
 8006926:	4605      	mov	r5, r0
 8006928:	4630      	mov	r0, r6
 800692a:	f7ff fb5b 	bl	8005fe4 <_malloc_r>
 800692e:	b948      	cbnz	r0, 8006944 <__smakebuf_r+0x44>
 8006930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006934:	059a      	lsls	r2, r3, #22
 8006936:	d4ef      	bmi.n	8006918 <__smakebuf_r+0x18>
 8006938:	f023 0303 	bic.w	r3, r3, #3
 800693c:	f043 0302 	orr.w	r3, r3, #2
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	e7e3      	b.n	800690c <__smakebuf_r+0xc>
 8006944:	4b0d      	ldr	r3, [pc, #52]	; (800697c <__smakebuf_r+0x7c>)
 8006946:	62b3      	str	r3, [r6, #40]	; 0x28
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	6020      	str	r0, [r4, #0]
 800694c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006950:	81a3      	strh	r3, [r4, #12]
 8006952:	9b00      	ldr	r3, [sp, #0]
 8006954:	6163      	str	r3, [r4, #20]
 8006956:	9b01      	ldr	r3, [sp, #4]
 8006958:	6120      	str	r0, [r4, #16]
 800695a:	b15b      	cbz	r3, 8006974 <__smakebuf_r+0x74>
 800695c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006960:	4630      	mov	r0, r6
 8006962:	f000 fb87 	bl	8007074 <_isatty_r>
 8006966:	b128      	cbz	r0, 8006974 <__smakebuf_r+0x74>
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	f023 0303 	bic.w	r3, r3, #3
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	81a3      	strh	r3, [r4, #12]
 8006974:	89a0      	ldrh	r0, [r4, #12]
 8006976:	4305      	orrs	r5, r0
 8006978:	81a5      	strh	r5, [r4, #12]
 800697a:	e7cd      	b.n	8006918 <__smakebuf_r+0x18>
 800697c:	080066c5 	.word	0x080066c5

08006980 <__malloc_lock>:
 8006980:	4801      	ldr	r0, [pc, #4]	; (8006988 <__malloc_lock+0x8>)
 8006982:	f7ff bf96 	b.w	80068b2 <__retarget_lock_acquire_recursive>
 8006986:	bf00      	nop
 8006988:	20012f00 	.word	0x20012f00

0800698c <__malloc_unlock>:
 800698c:	4801      	ldr	r0, [pc, #4]	; (8006994 <__malloc_unlock+0x8>)
 800698e:	f7ff bf91 	b.w	80068b4 <__retarget_lock_release_recursive>
 8006992:	bf00      	nop
 8006994:	20012f00 	.word	0x20012f00

08006998 <__sfputc_r>:
 8006998:	6893      	ldr	r3, [r2, #8]
 800699a:	3b01      	subs	r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	b410      	push	{r4}
 80069a0:	6093      	str	r3, [r2, #8]
 80069a2:	da08      	bge.n	80069b6 <__sfputc_r+0x1e>
 80069a4:	6994      	ldr	r4, [r2, #24]
 80069a6:	42a3      	cmp	r3, r4
 80069a8:	db01      	blt.n	80069ae <__sfputc_r+0x16>
 80069aa:	290a      	cmp	r1, #10
 80069ac:	d103      	bne.n	80069b6 <__sfputc_r+0x1e>
 80069ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b2:	f7ff bcc3 	b.w	800633c <__swbuf_r>
 80069b6:	6813      	ldr	r3, [r2, #0]
 80069b8:	1c58      	adds	r0, r3, #1
 80069ba:	6010      	str	r0, [r2, #0]
 80069bc:	7019      	strb	r1, [r3, #0]
 80069be:	4608      	mov	r0, r1
 80069c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <__sfputs_r>:
 80069c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c8:	4606      	mov	r6, r0
 80069ca:	460f      	mov	r7, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	18d5      	adds	r5, r2, r3
 80069d0:	42ac      	cmp	r4, r5
 80069d2:	d101      	bne.n	80069d8 <__sfputs_r+0x12>
 80069d4:	2000      	movs	r0, #0
 80069d6:	e007      	b.n	80069e8 <__sfputs_r+0x22>
 80069d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069dc:	463a      	mov	r2, r7
 80069de:	4630      	mov	r0, r6
 80069e0:	f7ff ffda 	bl	8006998 <__sfputc_r>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d1f3      	bne.n	80069d0 <__sfputs_r+0xa>
 80069e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069ec <_vfiprintf_r>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	460d      	mov	r5, r1
 80069f2:	b09d      	sub	sp, #116	; 0x74
 80069f4:	4614      	mov	r4, r2
 80069f6:	4698      	mov	r8, r3
 80069f8:	4606      	mov	r6, r0
 80069fa:	b118      	cbz	r0, 8006a04 <_vfiprintf_r+0x18>
 80069fc:	6983      	ldr	r3, [r0, #24]
 80069fe:	b90b      	cbnz	r3, 8006a04 <_vfiprintf_r+0x18>
 8006a00:	f7ff fe94 	bl	800672c <__sinit>
 8006a04:	4b89      	ldr	r3, [pc, #548]	; (8006c2c <_vfiprintf_r+0x240>)
 8006a06:	429d      	cmp	r5, r3
 8006a08:	d11b      	bne.n	8006a42 <_vfiprintf_r+0x56>
 8006a0a:	6875      	ldr	r5, [r6, #4]
 8006a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a0e:	07d9      	lsls	r1, r3, #31
 8006a10:	d405      	bmi.n	8006a1e <_vfiprintf_r+0x32>
 8006a12:	89ab      	ldrh	r3, [r5, #12]
 8006a14:	059a      	lsls	r2, r3, #22
 8006a16:	d402      	bmi.n	8006a1e <_vfiprintf_r+0x32>
 8006a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a1a:	f7ff ff4a 	bl	80068b2 <__retarget_lock_acquire_recursive>
 8006a1e:	89ab      	ldrh	r3, [r5, #12]
 8006a20:	071b      	lsls	r3, r3, #28
 8006a22:	d501      	bpl.n	8006a28 <_vfiprintf_r+0x3c>
 8006a24:	692b      	ldr	r3, [r5, #16]
 8006a26:	b9eb      	cbnz	r3, 8006a64 <_vfiprintf_r+0x78>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f7ff fcd8 	bl	80063e0 <__swsetup_r>
 8006a30:	b1c0      	cbz	r0, 8006a64 <_vfiprintf_r+0x78>
 8006a32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a34:	07dc      	lsls	r4, r3, #31
 8006a36:	d50e      	bpl.n	8006a56 <_vfiprintf_r+0x6a>
 8006a38:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3c:	b01d      	add	sp, #116	; 0x74
 8006a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a42:	4b7b      	ldr	r3, [pc, #492]	; (8006c30 <_vfiprintf_r+0x244>)
 8006a44:	429d      	cmp	r5, r3
 8006a46:	d101      	bne.n	8006a4c <_vfiprintf_r+0x60>
 8006a48:	68b5      	ldr	r5, [r6, #8]
 8006a4a:	e7df      	b.n	8006a0c <_vfiprintf_r+0x20>
 8006a4c:	4b79      	ldr	r3, [pc, #484]	; (8006c34 <_vfiprintf_r+0x248>)
 8006a4e:	429d      	cmp	r5, r3
 8006a50:	bf08      	it	eq
 8006a52:	68f5      	ldreq	r5, [r6, #12]
 8006a54:	e7da      	b.n	8006a0c <_vfiprintf_r+0x20>
 8006a56:	89ab      	ldrh	r3, [r5, #12]
 8006a58:	0598      	lsls	r0, r3, #22
 8006a5a:	d4ed      	bmi.n	8006a38 <_vfiprintf_r+0x4c>
 8006a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a5e:	f7ff ff29 	bl	80068b4 <__retarget_lock_release_recursive>
 8006a62:	e7e9      	b.n	8006a38 <_vfiprintf_r+0x4c>
 8006a64:	2300      	movs	r3, #0
 8006a66:	9309      	str	r3, [sp, #36]	; 0x24
 8006a68:	2320      	movs	r3, #32
 8006a6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a72:	2330      	movs	r3, #48	; 0x30
 8006a74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c38 <_vfiprintf_r+0x24c>
 8006a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a7c:	f04f 0901 	mov.w	r9, #1
 8006a80:	4623      	mov	r3, r4
 8006a82:	469a      	mov	sl, r3
 8006a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a88:	b10a      	cbz	r2, 8006a8e <_vfiprintf_r+0xa2>
 8006a8a:	2a25      	cmp	r2, #37	; 0x25
 8006a8c:	d1f9      	bne.n	8006a82 <_vfiprintf_r+0x96>
 8006a8e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a92:	d00b      	beq.n	8006aac <_vfiprintf_r+0xc0>
 8006a94:	465b      	mov	r3, fp
 8006a96:	4622      	mov	r2, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	f7ff ff93 	bl	80069c6 <__sfputs_r>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f000 80aa 	beq.w	8006bfa <_vfiprintf_r+0x20e>
 8006aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aa8:	445a      	add	r2, fp
 8006aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8006aac:	f89a 3000 	ldrb.w	r3, [sl]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80a2 	beq.w	8006bfa <_vfiprintf_r+0x20e>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac0:	f10a 0a01 	add.w	sl, sl, #1
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	9307      	str	r3, [sp, #28]
 8006ac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006acc:	931a      	str	r3, [sp, #104]	; 0x68
 8006ace:	4654      	mov	r4, sl
 8006ad0:	2205      	movs	r2, #5
 8006ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad6:	4858      	ldr	r0, [pc, #352]	; (8006c38 <_vfiprintf_r+0x24c>)
 8006ad8:	f7f9 fb82 	bl	80001e0 <memchr>
 8006adc:	9a04      	ldr	r2, [sp, #16]
 8006ade:	b9d8      	cbnz	r0, 8006b18 <_vfiprintf_r+0x12c>
 8006ae0:	06d1      	lsls	r1, r2, #27
 8006ae2:	bf44      	itt	mi
 8006ae4:	2320      	movmi	r3, #32
 8006ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aea:	0713      	lsls	r3, r2, #28
 8006aec:	bf44      	itt	mi
 8006aee:	232b      	movmi	r3, #43	; 0x2b
 8006af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af4:	f89a 3000 	ldrb.w	r3, [sl]
 8006af8:	2b2a      	cmp	r3, #42	; 0x2a
 8006afa:	d015      	beq.n	8006b28 <_vfiprintf_r+0x13c>
 8006afc:	9a07      	ldr	r2, [sp, #28]
 8006afe:	4654      	mov	r4, sl
 8006b00:	2000      	movs	r0, #0
 8006b02:	f04f 0c0a 	mov.w	ip, #10
 8006b06:	4621      	mov	r1, r4
 8006b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b0c:	3b30      	subs	r3, #48	; 0x30
 8006b0e:	2b09      	cmp	r3, #9
 8006b10:	d94e      	bls.n	8006bb0 <_vfiprintf_r+0x1c4>
 8006b12:	b1b0      	cbz	r0, 8006b42 <_vfiprintf_r+0x156>
 8006b14:	9207      	str	r2, [sp, #28]
 8006b16:	e014      	b.n	8006b42 <_vfiprintf_r+0x156>
 8006b18:	eba0 0308 	sub.w	r3, r0, r8
 8006b1c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b20:	4313      	orrs	r3, r2
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	46a2      	mov	sl, r4
 8006b26:	e7d2      	b.n	8006ace <_vfiprintf_r+0xe2>
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	1d19      	adds	r1, r3, #4
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	9103      	str	r1, [sp, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bfbb      	ittet	lt
 8006b34:	425b      	neglt	r3, r3
 8006b36:	f042 0202 	orrlt.w	r2, r2, #2
 8006b3a:	9307      	strge	r3, [sp, #28]
 8006b3c:	9307      	strlt	r3, [sp, #28]
 8006b3e:	bfb8      	it	lt
 8006b40:	9204      	strlt	r2, [sp, #16]
 8006b42:	7823      	ldrb	r3, [r4, #0]
 8006b44:	2b2e      	cmp	r3, #46	; 0x2e
 8006b46:	d10c      	bne.n	8006b62 <_vfiprintf_r+0x176>
 8006b48:	7863      	ldrb	r3, [r4, #1]
 8006b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b4c:	d135      	bne.n	8006bba <_vfiprintf_r+0x1ce>
 8006b4e:	9b03      	ldr	r3, [sp, #12]
 8006b50:	1d1a      	adds	r2, r3, #4
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	9203      	str	r2, [sp, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	bfb8      	it	lt
 8006b5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b5e:	3402      	adds	r4, #2
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c48 <_vfiprintf_r+0x25c>
 8006b66:	7821      	ldrb	r1, [r4, #0]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	f7f9 fb38 	bl	80001e0 <memchr>
 8006b70:	b140      	cbz	r0, 8006b84 <_vfiprintf_r+0x198>
 8006b72:	2340      	movs	r3, #64	; 0x40
 8006b74:	eba0 000a 	sub.w	r0, r0, sl
 8006b78:	fa03 f000 	lsl.w	r0, r3, r0
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	4303      	orrs	r3, r0
 8006b80:	3401      	adds	r4, #1
 8006b82:	9304      	str	r3, [sp, #16]
 8006b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b88:	482c      	ldr	r0, [pc, #176]	; (8006c3c <_vfiprintf_r+0x250>)
 8006b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b8e:	2206      	movs	r2, #6
 8006b90:	f7f9 fb26 	bl	80001e0 <memchr>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d03f      	beq.n	8006c18 <_vfiprintf_r+0x22c>
 8006b98:	4b29      	ldr	r3, [pc, #164]	; (8006c40 <_vfiprintf_r+0x254>)
 8006b9a:	bb1b      	cbnz	r3, 8006be4 <_vfiprintf_r+0x1f8>
 8006b9c:	9b03      	ldr	r3, [sp, #12]
 8006b9e:	3307      	adds	r3, #7
 8006ba0:	f023 0307 	bic.w	r3, r3, #7
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	9303      	str	r3, [sp, #12]
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	443b      	add	r3, r7
 8006bac:	9309      	str	r3, [sp, #36]	; 0x24
 8006bae:	e767      	b.n	8006a80 <_vfiprintf_r+0x94>
 8006bb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bb4:	460c      	mov	r4, r1
 8006bb6:	2001      	movs	r0, #1
 8006bb8:	e7a5      	b.n	8006b06 <_vfiprintf_r+0x11a>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	3401      	adds	r4, #1
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f04f 0c0a 	mov.w	ip, #10
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bcc:	3a30      	subs	r2, #48	; 0x30
 8006bce:	2a09      	cmp	r2, #9
 8006bd0:	d903      	bls.n	8006bda <_vfiprintf_r+0x1ee>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0c5      	beq.n	8006b62 <_vfiprintf_r+0x176>
 8006bd6:	9105      	str	r1, [sp, #20]
 8006bd8:	e7c3      	b.n	8006b62 <_vfiprintf_r+0x176>
 8006bda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bde:	4604      	mov	r4, r0
 8006be0:	2301      	movs	r3, #1
 8006be2:	e7f0      	b.n	8006bc6 <_vfiprintf_r+0x1da>
 8006be4:	ab03      	add	r3, sp, #12
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	462a      	mov	r2, r5
 8006bea:	4b16      	ldr	r3, [pc, #88]	; (8006c44 <_vfiprintf_r+0x258>)
 8006bec:	a904      	add	r1, sp, #16
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f3af 8000 	nop.w
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	1c78      	adds	r0, r7, #1
 8006bf8:	d1d6      	bne.n	8006ba8 <_vfiprintf_r+0x1bc>
 8006bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bfc:	07d9      	lsls	r1, r3, #31
 8006bfe:	d405      	bmi.n	8006c0c <_vfiprintf_r+0x220>
 8006c00:	89ab      	ldrh	r3, [r5, #12]
 8006c02:	059a      	lsls	r2, r3, #22
 8006c04:	d402      	bmi.n	8006c0c <_vfiprintf_r+0x220>
 8006c06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c08:	f7ff fe54 	bl	80068b4 <__retarget_lock_release_recursive>
 8006c0c:	89ab      	ldrh	r3, [r5, #12]
 8006c0e:	065b      	lsls	r3, r3, #25
 8006c10:	f53f af12 	bmi.w	8006a38 <_vfiprintf_r+0x4c>
 8006c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c16:	e711      	b.n	8006a3c <_vfiprintf_r+0x50>
 8006c18:	ab03      	add	r3, sp, #12
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	4b09      	ldr	r3, [pc, #36]	; (8006c44 <_vfiprintf_r+0x258>)
 8006c20:	a904      	add	r1, sp, #16
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f880 	bl	8006d28 <_printf_i>
 8006c28:	e7e4      	b.n	8006bf4 <_vfiprintf_r+0x208>
 8006c2a:	bf00      	nop
 8006c2c:	0800737c 	.word	0x0800737c
 8006c30:	0800739c 	.word	0x0800739c
 8006c34:	0800735c 	.word	0x0800735c
 8006c38:	080073bc 	.word	0x080073bc
 8006c3c:	080073c6 	.word	0x080073c6
 8006c40:	00000000 	.word	0x00000000
 8006c44:	080069c7 	.word	0x080069c7
 8006c48:	080073c2 	.word	0x080073c2

08006c4c <_printf_common>:
 8006c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c50:	4616      	mov	r6, r2
 8006c52:	4699      	mov	r9, r3
 8006c54:	688a      	ldr	r2, [r1, #8]
 8006c56:	690b      	ldr	r3, [r1, #16]
 8006c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	bfb8      	it	lt
 8006c60:	4613      	movlt	r3, r2
 8006c62:	6033      	str	r3, [r6, #0]
 8006c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c68:	4607      	mov	r7, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	b10a      	cbz	r2, 8006c72 <_printf_common+0x26>
 8006c6e:	3301      	adds	r3, #1
 8006c70:	6033      	str	r3, [r6, #0]
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	0699      	lsls	r1, r3, #26
 8006c76:	bf42      	ittt	mi
 8006c78:	6833      	ldrmi	r3, [r6, #0]
 8006c7a:	3302      	addmi	r3, #2
 8006c7c:	6033      	strmi	r3, [r6, #0]
 8006c7e:	6825      	ldr	r5, [r4, #0]
 8006c80:	f015 0506 	ands.w	r5, r5, #6
 8006c84:	d106      	bne.n	8006c94 <_printf_common+0x48>
 8006c86:	f104 0a19 	add.w	sl, r4, #25
 8006c8a:	68e3      	ldr	r3, [r4, #12]
 8006c8c:	6832      	ldr	r2, [r6, #0]
 8006c8e:	1a9b      	subs	r3, r3, r2
 8006c90:	42ab      	cmp	r3, r5
 8006c92:	dc26      	bgt.n	8006ce2 <_printf_common+0x96>
 8006c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c98:	1e13      	subs	r3, r2, #0
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	bf18      	it	ne
 8006c9e:	2301      	movne	r3, #1
 8006ca0:	0692      	lsls	r2, r2, #26
 8006ca2:	d42b      	bmi.n	8006cfc <_printf_common+0xb0>
 8006ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4638      	mov	r0, r7
 8006cac:	47c0      	blx	r8
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d01e      	beq.n	8006cf0 <_printf_common+0xa4>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	68e5      	ldr	r5, [r4, #12]
 8006cb6:	6832      	ldr	r2, [r6, #0]
 8006cb8:	f003 0306 	and.w	r3, r3, #6
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	bf08      	it	eq
 8006cc0:	1aad      	subeq	r5, r5, r2
 8006cc2:	68a3      	ldr	r3, [r4, #8]
 8006cc4:	6922      	ldr	r2, [r4, #16]
 8006cc6:	bf0c      	ite	eq
 8006cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ccc:	2500      	movne	r5, #0
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	bfc4      	itt	gt
 8006cd2:	1a9b      	subgt	r3, r3, r2
 8006cd4:	18ed      	addgt	r5, r5, r3
 8006cd6:	2600      	movs	r6, #0
 8006cd8:	341a      	adds	r4, #26
 8006cda:	42b5      	cmp	r5, r6
 8006cdc:	d11a      	bne.n	8006d14 <_printf_common+0xc8>
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e008      	b.n	8006cf4 <_printf_common+0xa8>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	4638      	mov	r0, r7
 8006cea:	47c0      	blx	r8
 8006cec:	3001      	adds	r0, #1
 8006cee:	d103      	bne.n	8006cf8 <_printf_common+0xac>
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf8:	3501      	adds	r5, #1
 8006cfa:	e7c6      	b.n	8006c8a <_printf_common+0x3e>
 8006cfc:	18e1      	adds	r1, r4, r3
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	2030      	movs	r0, #48	; 0x30
 8006d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d06:	4422      	add	r2, r4
 8006d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d10:	3302      	adds	r3, #2
 8006d12:	e7c7      	b.n	8006ca4 <_printf_common+0x58>
 8006d14:	2301      	movs	r3, #1
 8006d16:	4622      	mov	r2, r4
 8006d18:	4649      	mov	r1, r9
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	47c0      	blx	r8
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d0e6      	beq.n	8006cf0 <_printf_common+0xa4>
 8006d22:	3601      	adds	r6, #1
 8006d24:	e7d9      	b.n	8006cda <_printf_common+0x8e>
	...

08006d28 <_printf_i>:
 8006d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2c:	7e0f      	ldrb	r7, [r1, #24]
 8006d2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d30:	2f78      	cmp	r7, #120	; 0x78
 8006d32:	4691      	mov	r9, r2
 8006d34:	4680      	mov	r8, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	469a      	mov	sl, r3
 8006d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d3e:	d807      	bhi.n	8006d50 <_printf_i+0x28>
 8006d40:	2f62      	cmp	r7, #98	; 0x62
 8006d42:	d80a      	bhi.n	8006d5a <_printf_i+0x32>
 8006d44:	2f00      	cmp	r7, #0
 8006d46:	f000 80d8 	beq.w	8006efa <_printf_i+0x1d2>
 8006d4a:	2f58      	cmp	r7, #88	; 0x58
 8006d4c:	f000 80a3 	beq.w	8006e96 <_printf_i+0x16e>
 8006d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d58:	e03a      	b.n	8006dd0 <_printf_i+0xa8>
 8006d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d5e:	2b15      	cmp	r3, #21
 8006d60:	d8f6      	bhi.n	8006d50 <_printf_i+0x28>
 8006d62:	a101      	add	r1, pc, #4	; (adr r1, 8006d68 <_printf_i+0x40>)
 8006d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d68:	08006dc1 	.word	0x08006dc1
 8006d6c:	08006dd5 	.word	0x08006dd5
 8006d70:	08006d51 	.word	0x08006d51
 8006d74:	08006d51 	.word	0x08006d51
 8006d78:	08006d51 	.word	0x08006d51
 8006d7c:	08006d51 	.word	0x08006d51
 8006d80:	08006dd5 	.word	0x08006dd5
 8006d84:	08006d51 	.word	0x08006d51
 8006d88:	08006d51 	.word	0x08006d51
 8006d8c:	08006d51 	.word	0x08006d51
 8006d90:	08006d51 	.word	0x08006d51
 8006d94:	08006ee1 	.word	0x08006ee1
 8006d98:	08006e05 	.word	0x08006e05
 8006d9c:	08006ec3 	.word	0x08006ec3
 8006da0:	08006d51 	.word	0x08006d51
 8006da4:	08006d51 	.word	0x08006d51
 8006da8:	08006f03 	.word	0x08006f03
 8006dac:	08006d51 	.word	0x08006d51
 8006db0:	08006e05 	.word	0x08006e05
 8006db4:	08006d51 	.word	0x08006d51
 8006db8:	08006d51 	.word	0x08006d51
 8006dbc:	08006ecb 	.word	0x08006ecb
 8006dc0:	682b      	ldr	r3, [r5, #0]
 8006dc2:	1d1a      	adds	r2, r3, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	602a      	str	r2, [r5, #0]
 8006dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e0a3      	b.n	8006f1c <_printf_i+0x1f4>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	6829      	ldr	r1, [r5, #0]
 8006dd8:	0606      	lsls	r6, r0, #24
 8006dda:	f101 0304 	add.w	r3, r1, #4
 8006dde:	d50a      	bpl.n	8006df6 <_printf_i+0xce>
 8006de0:	680e      	ldr	r6, [r1, #0]
 8006de2:	602b      	str	r3, [r5, #0]
 8006de4:	2e00      	cmp	r6, #0
 8006de6:	da03      	bge.n	8006df0 <_printf_i+0xc8>
 8006de8:	232d      	movs	r3, #45	; 0x2d
 8006dea:	4276      	negs	r6, r6
 8006dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df0:	485e      	ldr	r0, [pc, #376]	; (8006f6c <_printf_i+0x244>)
 8006df2:	230a      	movs	r3, #10
 8006df4:	e019      	b.n	8006e2a <_printf_i+0x102>
 8006df6:	680e      	ldr	r6, [r1, #0]
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006dfe:	bf18      	it	ne
 8006e00:	b236      	sxthne	r6, r6
 8006e02:	e7ef      	b.n	8006de4 <_printf_i+0xbc>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	6820      	ldr	r0, [r4, #0]
 8006e08:	1d19      	adds	r1, r3, #4
 8006e0a:	6029      	str	r1, [r5, #0]
 8006e0c:	0601      	lsls	r1, r0, #24
 8006e0e:	d501      	bpl.n	8006e14 <_printf_i+0xec>
 8006e10:	681e      	ldr	r6, [r3, #0]
 8006e12:	e002      	b.n	8006e1a <_printf_i+0xf2>
 8006e14:	0646      	lsls	r6, r0, #25
 8006e16:	d5fb      	bpl.n	8006e10 <_printf_i+0xe8>
 8006e18:	881e      	ldrh	r6, [r3, #0]
 8006e1a:	4854      	ldr	r0, [pc, #336]	; (8006f6c <_printf_i+0x244>)
 8006e1c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e1e:	bf0c      	ite	eq
 8006e20:	2308      	moveq	r3, #8
 8006e22:	230a      	movne	r3, #10
 8006e24:	2100      	movs	r1, #0
 8006e26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e2a:	6865      	ldr	r5, [r4, #4]
 8006e2c:	60a5      	str	r5, [r4, #8]
 8006e2e:	2d00      	cmp	r5, #0
 8006e30:	bfa2      	ittt	ge
 8006e32:	6821      	ldrge	r1, [r4, #0]
 8006e34:	f021 0104 	bicge.w	r1, r1, #4
 8006e38:	6021      	strge	r1, [r4, #0]
 8006e3a:	b90e      	cbnz	r6, 8006e40 <_printf_i+0x118>
 8006e3c:	2d00      	cmp	r5, #0
 8006e3e:	d04d      	beq.n	8006edc <_printf_i+0x1b4>
 8006e40:	4615      	mov	r5, r2
 8006e42:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e46:	fb03 6711 	mls	r7, r3, r1, r6
 8006e4a:	5dc7      	ldrb	r7, [r0, r7]
 8006e4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e50:	4637      	mov	r7, r6
 8006e52:	42bb      	cmp	r3, r7
 8006e54:	460e      	mov	r6, r1
 8006e56:	d9f4      	bls.n	8006e42 <_printf_i+0x11a>
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d10b      	bne.n	8006e74 <_printf_i+0x14c>
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	07de      	lsls	r6, r3, #31
 8006e60:	d508      	bpl.n	8006e74 <_printf_i+0x14c>
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	6861      	ldr	r1, [r4, #4]
 8006e66:	4299      	cmp	r1, r3
 8006e68:	bfde      	ittt	le
 8006e6a:	2330      	movle	r3, #48	; 0x30
 8006e6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e74:	1b52      	subs	r2, r2, r5
 8006e76:	6122      	str	r2, [r4, #16]
 8006e78:	f8cd a000 	str.w	sl, [sp]
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	aa03      	add	r2, sp, #12
 8006e80:	4621      	mov	r1, r4
 8006e82:	4640      	mov	r0, r8
 8006e84:	f7ff fee2 	bl	8006c4c <_printf_common>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d14c      	bne.n	8006f26 <_printf_i+0x1fe>
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e90:	b004      	add	sp, #16
 8006e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e96:	4835      	ldr	r0, [pc, #212]	; (8006f6c <_printf_i+0x244>)
 8006e98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e9c:	6829      	ldr	r1, [r5, #0]
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ea4:	6029      	str	r1, [r5, #0]
 8006ea6:	061d      	lsls	r5, r3, #24
 8006ea8:	d514      	bpl.n	8006ed4 <_printf_i+0x1ac>
 8006eaa:	07df      	lsls	r7, r3, #31
 8006eac:	bf44      	itt	mi
 8006eae:	f043 0320 	orrmi.w	r3, r3, #32
 8006eb2:	6023      	strmi	r3, [r4, #0]
 8006eb4:	b91e      	cbnz	r6, 8006ebe <_printf_i+0x196>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	f023 0320 	bic.w	r3, r3, #32
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	2310      	movs	r3, #16
 8006ec0:	e7b0      	b.n	8006e24 <_printf_i+0xfc>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	f043 0320 	orr.w	r3, r3, #32
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	2378      	movs	r3, #120	; 0x78
 8006ecc:	4828      	ldr	r0, [pc, #160]	; (8006f70 <_printf_i+0x248>)
 8006ece:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ed2:	e7e3      	b.n	8006e9c <_printf_i+0x174>
 8006ed4:	0659      	lsls	r1, r3, #25
 8006ed6:	bf48      	it	mi
 8006ed8:	b2b6      	uxthmi	r6, r6
 8006eda:	e7e6      	b.n	8006eaa <_printf_i+0x182>
 8006edc:	4615      	mov	r5, r2
 8006ede:	e7bb      	b.n	8006e58 <_printf_i+0x130>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	6826      	ldr	r6, [r4, #0]
 8006ee4:	6961      	ldr	r1, [r4, #20]
 8006ee6:	1d18      	adds	r0, r3, #4
 8006ee8:	6028      	str	r0, [r5, #0]
 8006eea:	0635      	lsls	r5, r6, #24
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	d501      	bpl.n	8006ef4 <_printf_i+0x1cc>
 8006ef0:	6019      	str	r1, [r3, #0]
 8006ef2:	e002      	b.n	8006efa <_printf_i+0x1d2>
 8006ef4:	0670      	lsls	r0, r6, #25
 8006ef6:	d5fb      	bpl.n	8006ef0 <_printf_i+0x1c8>
 8006ef8:	8019      	strh	r1, [r3, #0]
 8006efa:	2300      	movs	r3, #0
 8006efc:	6123      	str	r3, [r4, #16]
 8006efe:	4615      	mov	r5, r2
 8006f00:	e7ba      	b.n	8006e78 <_printf_i+0x150>
 8006f02:	682b      	ldr	r3, [r5, #0]
 8006f04:	1d1a      	adds	r2, r3, #4
 8006f06:	602a      	str	r2, [r5, #0]
 8006f08:	681d      	ldr	r5, [r3, #0]
 8006f0a:	6862      	ldr	r2, [r4, #4]
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f7f9 f966 	bl	80001e0 <memchr>
 8006f14:	b108      	cbz	r0, 8006f1a <_printf_i+0x1f2>
 8006f16:	1b40      	subs	r0, r0, r5
 8006f18:	6060      	str	r0, [r4, #4]
 8006f1a:	6863      	ldr	r3, [r4, #4]
 8006f1c:	6123      	str	r3, [r4, #16]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f24:	e7a8      	b.n	8006e78 <_printf_i+0x150>
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	462a      	mov	r2, r5
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	4640      	mov	r0, r8
 8006f2e:	47d0      	blx	sl
 8006f30:	3001      	adds	r0, #1
 8006f32:	d0ab      	beq.n	8006e8c <_printf_i+0x164>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	079b      	lsls	r3, r3, #30
 8006f38:	d413      	bmi.n	8006f62 <_printf_i+0x23a>
 8006f3a:	68e0      	ldr	r0, [r4, #12]
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	4298      	cmp	r0, r3
 8006f40:	bfb8      	it	lt
 8006f42:	4618      	movlt	r0, r3
 8006f44:	e7a4      	b.n	8006e90 <_printf_i+0x168>
 8006f46:	2301      	movs	r3, #1
 8006f48:	4632      	mov	r2, r6
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	47d0      	blx	sl
 8006f50:	3001      	adds	r0, #1
 8006f52:	d09b      	beq.n	8006e8c <_printf_i+0x164>
 8006f54:	3501      	adds	r5, #1
 8006f56:	68e3      	ldr	r3, [r4, #12]
 8006f58:	9903      	ldr	r1, [sp, #12]
 8006f5a:	1a5b      	subs	r3, r3, r1
 8006f5c:	42ab      	cmp	r3, r5
 8006f5e:	dcf2      	bgt.n	8006f46 <_printf_i+0x21e>
 8006f60:	e7eb      	b.n	8006f3a <_printf_i+0x212>
 8006f62:	2500      	movs	r5, #0
 8006f64:	f104 0619 	add.w	r6, r4, #25
 8006f68:	e7f5      	b.n	8006f56 <_printf_i+0x22e>
 8006f6a:	bf00      	nop
 8006f6c:	080073cd 	.word	0x080073cd
 8006f70:	080073de 	.word	0x080073de

08006f74 <__sread>:
 8006f74:	b510      	push	{r4, lr}
 8006f76:	460c      	mov	r4, r1
 8006f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7c:	f000 f89c 	bl	80070b8 <_read_r>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	bfab      	itete	ge
 8006f84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f86:	89a3      	ldrhlt	r3, [r4, #12]
 8006f88:	181b      	addge	r3, r3, r0
 8006f8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f8e:	bfac      	ite	ge
 8006f90:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f92:	81a3      	strhlt	r3, [r4, #12]
 8006f94:	bd10      	pop	{r4, pc}

08006f96 <__swrite>:
 8006f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9a:	461f      	mov	r7, r3
 8006f9c:	898b      	ldrh	r3, [r1, #12]
 8006f9e:	05db      	lsls	r3, r3, #23
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	460c      	mov	r4, r1
 8006fa4:	4616      	mov	r6, r2
 8006fa6:	d505      	bpl.n	8006fb4 <__swrite+0x1e>
 8006fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fac:	2302      	movs	r3, #2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f000 f870 	bl	8007094 <_lseek_r>
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fbe:	81a3      	strh	r3, [r4, #12]
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fca:	f000 b817 	b.w	8006ffc <_write_r>

08006fce <__sseek>:
 8006fce:	b510      	push	{r4, lr}
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd6:	f000 f85d 	bl	8007094 <_lseek_r>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	89a3      	ldrh	r3, [r4, #12]
 8006fde:	bf15      	itete	ne
 8006fe0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006fe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fea:	81a3      	strheq	r3, [r4, #12]
 8006fec:	bf18      	it	ne
 8006fee:	81a3      	strhne	r3, [r4, #12]
 8006ff0:	bd10      	pop	{r4, pc}

08006ff2 <__sclose>:
 8006ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff6:	f000 b81b 	b.w	8007030 <_close_r>
	...

08006ffc <_write_r>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	4d07      	ldr	r5, [pc, #28]	; (800701c <_write_r+0x20>)
 8007000:	4604      	mov	r4, r0
 8007002:	4608      	mov	r0, r1
 8007004:	4611      	mov	r1, r2
 8007006:	2200      	movs	r2, #0
 8007008:	602a      	str	r2, [r5, #0]
 800700a:	461a      	mov	r2, r3
 800700c:	f7fa f80f 	bl	800102e <_write>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d102      	bne.n	800701a <_write_r+0x1e>
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	b103      	cbz	r3, 800701a <_write_r+0x1e>
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	bd38      	pop	{r3, r4, r5, pc}
 800701c:	20012f04 	.word	0x20012f04

08007020 <abort>:
 8007020:	b508      	push	{r3, lr}
 8007022:	2006      	movs	r0, #6
 8007024:	f000 f882 	bl	800712c <raise>
 8007028:	2001      	movs	r0, #1
 800702a:	f7f9 ffd9 	bl	8000fe0 <_exit>
	...

08007030 <_close_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d06      	ldr	r5, [pc, #24]	; (800704c <_close_r+0x1c>)
 8007034:	2300      	movs	r3, #0
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fa f813 	bl	8001066 <_close>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_close_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_close_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20012f04 	.word	0x20012f04

08007050 <_fstat_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d07      	ldr	r5, [pc, #28]	; (8007070 <_fstat_r+0x20>)
 8007054:	2300      	movs	r3, #0
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	4611      	mov	r1, r2
 800705c:	602b      	str	r3, [r5, #0]
 800705e:	f7fa f80e 	bl	800107e <_fstat>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d102      	bne.n	800706c <_fstat_r+0x1c>
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	b103      	cbz	r3, 800706c <_fstat_r+0x1c>
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	bd38      	pop	{r3, r4, r5, pc}
 800706e:	bf00      	nop
 8007070:	20012f04 	.word	0x20012f04

08007074 <_isatty_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d06      	ldr	r5, [pc, #24]	; (8007090 <_isatty_r+0x1c>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fa f80d 	bl	800109e <_isatty>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_isatty_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_isatty_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20012f04 	.word	0x20012f04

08007094 <_lseek_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d07      	ldr	r5, [pc, #28]	; (80070b4 <_lseek_r+0x20>)
 8007098:	4604      	mov	r4, r0
 800709a:	4608      	mov	r0, r1
 800709c:	4611      	mov	r1, r2
 800709e:	2200      	movs	r2, #0
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7fa f806 	bl	80010b4 <_lseek>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_lseek_r+0x1e>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_lseek_r+0x1e>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	20012f04 	.word	0x20012f04

080070b8 <_read_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d07      	ldr	r5, [pc, #28]	; (80070d8 <_read_r+0x20>)
 80070bc:	4604      	mov	r4, r0
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7f9 ff94 	bl	8000ff4 <_read>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_read_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_read_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20012f04 	.word	0x20012f04

080070dc <_raise_r>:
 80070dc:	291f      	cmp	r1, #31
 80070de:	b538      	push	{r3, r4, r5, lr}
 80070e0:	4604      	mov	r4, r0
 80070e2:	460d      	mov	r5, r1
 80070e4:	d904      	bls.n	80070f0 <_raise_r+0x14>
 80070e6:	2316      	movs	r3, #22
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	f04f 30ff 	mov.w	r0, #4294967295
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80070f2:	b112      	cbz	r2, 80070fa <_raise_r+0x1e>
 80070f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070f8:	b94b      	cbnz	r3, 800710e <_raise_r+0x32>
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 f830 	bl	8007160 <_getpid_r>
 8007100:	462a      	mov	r2, r5
 8007102:	4601      	mov	r1, r0
 8007104:	4620      	mov	r0, r4
 8007106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800710a:	f000 b817 	b.w	800713c <_kill_r>
 800710e:	2b01      	cmp	r3, #1
 8007110:	d00a      	beq.n	8007128 <_raise_r+0x4c>
 8007112:	1c59      	adds	r1, r3, #1
 8007114:	d103      	bne.n	800711e <_raise_r+0x42>
 8007116:	2316      	movs	r3, #22
 8007118:	6003      	str	r3, [r0, #0]
 800711a:	2001      	movs	r0, #1
 800711c:	e7e7      	b.n	80070ee <_raise_r+0x12>
 800711e:	2400      	movs	r4, #0
 8007120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007124:	4628      	mov	r0, r5
 8007126:	4798      	blx	r3
 8007128:	2000      	movs	r0, #0
 800712a:	e7e0      	b.n	80070ee <_raise_r+0x12>

0800712c <raise>:
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <raise+0xc>)
 800712e:	4601      	mov	r1, r0
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	f7ff bfd3 	b.w	80070dc <_raise_r>
 8007136:	bf00      	nop
 8007138:	20000018 	.word	0x20000018

0800713c <_kill_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4d07      	ldr	r5, [pc, #28]	; (800715c <_kill_r+0x20>)
 8007140:	2300      	movs	r3, #0
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	4611      	mov	r1, r2
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	f7f9 ff39 	bl	8000fc0 <_kill>
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	d102      	bne.n	8007158 <_kill_r+0x1c>
 8007152:	682b      	ldr	r3, [r5, #0]
 8007154:	b103      	cbz	r3, 8007158 <_kill_r+0x1c>
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	bf00      	nop
 800715c:	20012f04 	.word	0x20012f04

08007160 <_getpid_r>:
 8007160:	f7f9 bf26 	b.w	8000fb0 <_getpid>

08007164 <_gettimeofday>:
 8007164:	4b02      	ldr	r3, [pc, #8]	; (8007170 <_gettimeofday+0xc>)
 8007166:	2258      	movs	r2, #88	; 0x58
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	f04f 30ff 	mov.w	r0, #4294967295
 800716e:	4770      	bx	lr
 8007170:	20012f04 	.word	0x20012f04

08007174 <_sbrk>:
 8007174:	4a04      	ldr	r2, [pc, #16]	; (8007188 <_sbrk+0x14>)
 8007176:	6811      	ldr	r1, [r2, #0]
 8007178:	4603      	mov	r3, r0
 800717a:	b909      	cbnz	r1, 8007180 <_sbrk+0xc>
 800717c:	4903      	ldr	r1, [pc, #12]	; (800718c <_sbrk+0x18>)
 800717e:	6011      	str	r1, [r2, #0]
 8007180:	6810      	ldr	r0, [r2, #0]
 8007182:	4403      	add	r3, r0
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	4770      	bx	lr
 8007188:	20012f08 	.word	0x20012f08
 800718c:	20012f10 	.word	0x20012f10

08007190 <_init>:
 8007190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007192:	bf00      	nop
 8007194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007196:	bc08      	pop	{r3}
 8007198:	469e      	mov	lr, r3
 800719a:	4770      	bx	lr

0800719c <_fini>:
 800719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719e:	bf00      	nop
 80071a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a2:	bc08      	pop	{r3}
 80071a4:	469e      	mov	lr, r3
 80071a6:	4770      	bx	lr
